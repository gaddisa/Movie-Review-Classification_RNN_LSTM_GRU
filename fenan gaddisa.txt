<?php

namespace App\Livewire\Attachement;

use LivewireUI\Modal\ModalComponent;
use Modules\Attachement\Models\Attachement;
use Modules\DCT\Models\DCT;
use Illuminate\Validation\Rule;
use RealRashid\SweetAlert\Facades\Alert; // Add this

class AttachementModal extends ModalComponent
{
    public $attachementId;
    public $isEdit = false;
    public $dctId; // Add this property

    // Form fields
    public $name;
    public $attachement_type = 'DOCUMENT'; // Changed default to DOCUMENT
    public $status = 'active';
    public $table_html;
    public $dct_id;
    public $is_required = 'Optional';

    protected function rules()
    {
        return [
            'name' => 'required|string|max:1255',
            'attachement_type' => 'required|string',
            'status' => 'required|string',
            'table_html' => 'nullable|string',
            'is_required' => 'required|in:Mandatory,Optional',
            'dct_id' => 'required|exists:dcts,id',
        ];
    }

    public function mount($siteId = null, $attachementId = null)
    {
        // Set DCT ID from the passed parameter
        $this->dct_id = $siteId ?? null;
        $this->dctId = $siteId ?? null;

        if ($attachementId) {
            $this->isEdit = true;
            $this->loadAttachement($attachementId);
        }
    }

    public function loadAttachement($attachementId)
    {
        try {
            $attachement = Attachement::findOrFail($attachementId);
            $this->attachementId = $attachementId;
            $this->name = $attachement->name;
            $this->attachement_type = $attachement->attachement_type;
            $this->status = $attachement->status;
            $this->is_required = $attachement->is_required;
            $this->table_html = $attachement->table_html;
            $this->dct_id = $attachement->dct_id;
        } catch (\Exception $e) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Failed to load attachement data',
                'position' => 'top-end',
                'duration' => 5000
            ]);
            $this->closeModal();
        }
    }

    public function saveAttachment()
    {
        $this->validate();

        // ADD OWNERSHIP CHECK HERE
        if (!$this->canCreateAttachment($this->dct_id, auth()->id())) {
            $this->closeModal();
            return;
        }

        try {
            $data = [
                'name' => $this->name,
                'attachement_type' => $this->attachement_type,
                'status' => $this->status,
                'is_required' => $this->is_required,
                'table_html' => $this->table_html,
                'dct_id' => $this->dct_id,
            ];

            if ($this->isEdit) {
                $attachement = Attachement::findOrFail($this->attachementId);
                $attachement->update($data);
            } else {
                Attachement::create($data);
            }

            $this->dispatch('refreshAttachements');
            $this->closeModal();
            $this->dispatch('showToast', [
                'type' => 'success',
                'message' => 'Attachement saved successfully'
            ]);
        } catch (\Exception $e) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Failed to save attachement',
                'position' => 'top-end',
                'duration' => 5000
            ]);
        }
    }

    /**
     * Check if user can create attachment for the given DCT
     */
    protected function canCreateAttachment($dctId, $userId)
    {
        $dct = DCT::find($dctId);
        
        if (!$dct) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'DCT not found!',
                'position' => 'top-end',
                'duration' => 5000
            ]);
            return false;
        }

        if ($dct->created_by != $userId) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'You can only add attachments to DCTs that you created!',
                'position' => 'top-end',
                'duration' => 5000
            ]);
            return false;
        }

        return true;
    }

    public function getDctsProperty()
    {
        return DCT::orderBy('name')->get(['id', 'name']);
    }

    public function render()
    {
        return view('livewire.attachement.attachement-modal');
    }

    public static function modalMaxWidth(): string
    {
        return '2xl';
    }
}
