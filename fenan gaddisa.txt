<?php

namespace App\Livewire\Employee;

use Livewire\Component;
use Livewire\WithPagination;
use App\Models\EmployeeInfo;

use App\Models\User;
use Lab404\Impersonate\Services\ImpersonateManager;

class Index extends Component
{
    use WithPagination;
    protected $listeners = ['refresh-employees' => '$refresh'];
    public $search = '';
    public $statusFilter = '';
    public $perPage = 10;

    public function render()
    {
        $employees = EmployeeInfo::query()
            ->where('created_by', auth()->id()) // Add this line
            ->when($this->search, function ($q) {
                $q->where(function ($query) {
                    $query->where('first_name', 'like', "%{$this->search}%")
                        ->orWhere('last_name', 'like', "%{$this->search}%")
                        ->orWhere('email', 'like', "%{$this->search}%")
                        ->orWhere('phone', 'like', "%{$this->search}%")
                        ->orWhere('national_id', 'like', "%{$this->search}%");
                });
            })
            ->when($this->statusFilter, function ($q) {
                $q->where('status', $this->statusFilter);
            })
            ->orderBy('first_name')
            ->paginate($this->perPage);

        return view('livewire.employee.index', compact('employees'));
    }

    public function registerEmployee()
    {
        $this->dispatch('openModal', 'employee.employee-info-modal');
    }

    public function editEmployee($employeeId)
    {
        // Add ownership check
        $employee = EmployeeInfo::where('id', $employeeId)
            ->where('created_by', auth()->id())
            ->first();

        if (!$employee) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'You can only edit employees you created'
            ]);
            return;
        }

        $this->dispatch('openModal', 'employee.employee-info-modal', [
            'employeeId' => $employeeId
        ]);
    }
    public function impersonate($userId)
    {
        $user = User::findOrFail($userId);

        if (!auth()->user()->canImpersonate() || !$user->canBeImpersonated()) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'You are not allowed to impersonate this user.'
            ]);
            return;
        }

        auth()->user()->impersonate($user);

        $this->dispatch('showToast', [
            'type' => 'success',
            'message' => 'You are now impersonating the tenant.'
        ]);

        return redirect()->route('backend.payments.paytenant');
    }
}

<?php

namespace App\Livewire\Employee;

use Carbon\Carbon;
use App\Models\User;
use App\Models\EmployeeInfo;
use App\Notifications\NotifyCeo;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Hash;
use LivewireUI\Modal\ModalComponent;
use Illuminate\Support\Facades\Artisan;
use App\Notifications\UserAccountCreated;

class EmployeeInfoModal extends ModalComponent
{
    public $employeeId;
    public $isEdit = false;

    public array $employee = [
        // English Names
        'first_name' => '',
        'middle_name' => '',
        'last_name' => '',

        // Amharic Names
        'first_name_am' => '',
        'middle_name_am' => '',
        'last_name_am' => '',

        // Personal Info
        'gender' => '',
        'birth_date' => '',
        'national_id' => '',
        'phone' => '',
        'email' => '',
    ];

    public function mount($employeeId = null)
    {
        if ($employeeId) {
            $this->employeeId = $employeeId;
            $this->isEdit = true;
            $this->loadEmployee();
        }
    }

    public function loadEmployee()
    {
        $employee = EmployeeInfo::where('id', $this->employeeId)
            ->where('created_by', auth()->id())
            ->first();

        if (!$employee) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Employee not found or you don\'t have permission',
                'position' => 'top-end',
                'duration' => 5000
            ]);
            $this->closeModal();
            return;
        }

        $this->employee = [
            'first_name' => $employee->first_name,
            // ... rest of your existing assignments ...
        ];
    }

    protected function prepareForValidation($attributes)
    {
        // Trim all string fields
        $attributes['employee'] = array_map(function ($value) {
            return is_string($value) ? trim($value) : $value;
        }, $attributes['employee'] ?? []);

        // Process phone number
        if (!empty($attributes['employee']['phone'])) {
            // Remove all non-digit characters
            $phone = preg_replace('/[^0-9]/', '', $attributes['employee']['phone']);

            // If phone is 9 digits and doesn't start with 0, add 0
            if (strlen($phone) === 9 && !str_starts_with($phone, '0')) {
                $phone = '0' . $phone;
            }

            $attributes['employee']['phone'] = $phone;
        }

        return $attributes; // Must return the modified attributes
    }
    protected function rules(): array
    {

        $rules = [
            // Names
            'employee.first_name' => 'required|string|max:255',
            'employee.middle_name' => 'required|string|max:255',
            'employee.last_name' => 'required|string|max:255',
            'employee.first_name_am' => 'nullable|string|max:255',
            'employee.middle_name_am' => 'nullable|string|max:255',
            'employee.last_name_am' => 'nullable|string|max:255',

            // Personal info
            'employee.gender' => 'required|in:male,female,other',
            'employee.birth_date' => 'nullable|date',

            // Phone validation - mandatory, 10 digits, starts with 0
            'employee.phone' => [
                'required',
                'string',
                'regex:/^0\d{9}$/',
                function ($attribute, $value, $fail) {
                    $query = $this->isEdit
                        ? EmployeeInfo::where('phone', $value)->where('id', '!=', $this->employeeId)
                        : EmployeeInfo::where('phone', $value);

                    if ($query->exists()) {
                        $fail('This phone number is already registered');
                    }
                }
            ],

            // Email validation - optional but must be valid if provided
            'employee.email' => [
                'nullable',
                'email',
                function ($attribute, $value, $fail) {
                    if (!empty($value)) {
                        $query = $this->isEdit
                            ? EmployeeInfo::where('email', $value)->where('id', '!=', $this->employeeId)
                            : EmployeeInfo::where('email', $value);

                        if ($query->exists()) {
                            $fail('This email is already registered');
                        }
                    }
                }
            ],
        ];

        // Modified national_id validation
        $rules['employee.national_id'] = [
            'nullable',
            'string',
            'max:50',
            function ($attribute, $value, $fail) {
                if (!empty($value)) {
                    $query = $this->isEdit
                        ? EmployeeInfo::where('national_id', $value)->where('id', '!=', $this->employeeId)
                        : EmployeeInfo::where('national_id', $value);

                    if ($query->exists()) {
                        $fail('This national ID is already registered');
                    }
                }
            }
        ];

        return $rules;
    }

    protected function generateEmail(): string
    {
        // If email is provided and valid, use it
        if (!empty($this->employee['email']) && filter_var($this->employee['email'], FILTER_VALIDATE_EMAIL)) {
            return $this->employee['email'];
        }

        // Otherwise use phone number (already validated to be 10 digits starting with 0)
        return $this->employee['phone'] . '@shaderms.com';
    }

    public function save()
    {
        if ($this->isEdit) {
            // Verify ownership before editing
            $exists = EmployeeInfo::where('id', $this->employeeId)
                ->where('created_by', auth()->id())
                ->exists();

            if (!$exists) {
                $this->dispatch('showToast', [
                    'type' => 'error',
                    'message' => 'You can only edit employees you created',
                    'position' => 'top-end',
                    'duration' => 5000
                ]);
                return;
            }
        }
        if (isset($this->employee['national_id']) && trim($this->employee['national_id']) === '') {
            $this->employee['national_id'] = null;
        }
        $validated = $this->validate();

        // Generate email based on rules
        $email = $this->generateEmail();
        $validated['employee']['email'] = $email;

        DB::beginTransaction();

        try {
            if ($this->isEdit) {
                // Update existing employee
                $employee = EmployeeInfo::find($this->employeeId);
                $employee->update($validated['employee']);

                // Update user if needed
                $user = $employee->user;
                if ($user) {
                    $user->update([
                        'first_name' => $validated['employee']['first_name'],
                        'middle_name' => $validated['employee']['middle_name'],
                        'last_name' => $validated['employee']['last_name'],
                        'name' => $validated['employee']['first_name'] . ' ' . $validated['employee']['middle_name'],
                        'email' => $email,
                    ]);
                    $this->notifyCeo('updated', $employee);
                }

                $message = 'Tenant updated successfully!';
            } else {
                // Create new employee
                $user = User::create([
                    'first_name' => $validated['employee']['first_name'],
                    'middle_name' => $validated['employee']['middle_name'],
                    'last_name' => $validated['employee']['last_name'],
                    'name' => $validated['employee']['first_name'] . ' ' . $validated['employee']['last_name'],
                    'email' => $email,
                    'password' => Hash::make($email),
                    'email_verified_at' => now(),
                ]);

                $user->syncRoles(['tenant']);
                $user->syncPermissions([]);

                $employeeData = $validated['employee'];
                $employeeData['user_id'] = $user->id;
                $employee = EmployeeInfo::create($employeeData);
                $this->notifyCeo('created', $employee);

                $user->notify(new UserAccountCreated([
                    'password' => $email,
                ]));

                $message = 'Tenant record created successfully!';
            }

            DB::commit();
            Artisan::call('cache:clear');

            $this->dispatch('refresh-employees');

            $this->closeModal();
            $this->dispatch('showToast', [
                'type' => 'success',
                'message' => $message
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error("Tenant record " . ($this->isEdit ? "update" : "creation") . " failed: " . $e->getMessage());
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Failed to ' . ($this->isEdit ? "update" : "create") . ' employee: ' . $e->getMessage()
            ]);
        }
    }

    public function render()
    {
        return view('livewire.employee.modal.employee-info-modal');
    }

    public static function modalMaxWidth(): string
    {
        return '4xl';
    }

    protected function notifyCeo($action, EmployeeInfo $employee)
    {
        $ceoUsers = User::role(['ceo', 'super admin'])->get();

        $data = [
            'employee_name' => $employee->full_name,
            'employee_id' => $employee->employee_id,
            'email' => $employee->email,
            'phone' => $employee->phone,
        ];

        foreach ($ceoUsers as $ceo) {
            $ceo->notify(new NotifyCeo(
                $action,
                'Tenant',
                $data
            ));
        }
    }
}
