<?php

namespace App\Http\Controllers\Backend;

use App\Models\Indicator;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;
use Illuminate\Support\Facades\DB;
use App\Models\Indicator_attachment_direct;
use App\Http\Controllers\Backend\BackendBaseController;

class Indicator_attachmentsController extends BackendBaseController
{
    public $module_title;
    public $module_name;
    public $module_path;
    public $module_icon;
    public $module_model;

    public function __construct()
    {
        $this->module_title = 'Indicators Attachment Management';
        $this->module_name = 'indicator_attachments';
        $this->module_path = 'backend';
        $this->module_icon = 'fas fa-paperclip';
        $this->module_model = "App\\Models\\Indicator_attachment";
    }

    public function index(Request $request)
{
    $module_title = $this->module_title;
    $module_name = $this->module_name;
    $module_path = $this->module_path;
    $module_icon = $this->module_icon;
    $module_model = $this->module_model;
    $module_action = 'List';

    // Retrieve the indicator_id from the query parameters
    $indicator_id = $request->query('id');

    // Get the DCT ID through the indicator's relationships
    $dct_id = Indicator::with(['substandard.standard.dct'])
        ->find($indicator_id)
        ?->substandard
        ?->standard
        ?->dct_id;

    logUserAccess($module_title . ' ' . $module_action);

    if ($request->ajax()) {
        // Fetch all attachments for this DCT and check if they are linked to the indicator
        $query = \Modules\Attachement\Models\Attachement::leftJoin('indicator_attachment', function ($join) use ($indicator_id) {
            $join->on('indicator_attachment.attachment_id', '=', 'attachments.id')
                ->where('indicator_attachment.indicator_id', '=', $indicator_id);
        })
            ->select(
                'attachments.id',
                'attachments.name',
                'attachments.attachement_type',
                DB::raw('CASE WHEN indicator_attachment.indicator_id IS NOT NULL THEN "checked" ELSE "" END AS selected')
            )
            ->whereNull('attachments.deleted_at') // Ensure attachments are not deleted
            ->where('attachments.name', 'NOT LIKE', 'Others%'); // Exclude names starting with "Others"

        // Filter by DCT if we found one
        if ($dct_id) {
            $query->where('attachments.dct_id', $dct_id);
        }

        return datatables()
            ->eloquent($query)
            ->addColumn('action', function ($row) {
                return '<a href="' . route("indicator_attachments.show", $row->id) . '" class="btn btn-sm btn-primary">View</a>';
            })
            ->rawColumns(['action', 'selected'])
            ->make(true);
    }

    return view("{$module_path}.{$module_name}.index_datatable", compact(
        'module_title',
        'module_name',
        'module_path',
        'module_icon',
        'module_action',
        'indicator_id'
    ));
}

public function index_data(?array $columns = null, array $additionalButtons = [], array $additionalData = [])
{
    $module_title = $this->module_title;
    $module_name = $this->module_name;
    $module_path = $this->module_path;
    $module_icon = $this->module_icon;
    $module_model = $this->module_model;
    $module_action = 'List';

    // Retrieve the indicator_id from the query parameters
    $indicator_id = request()->query('id');

    // Get the DCT ID through the indicator's relationships
    $dct_id = Indicator::with(['substandard.standard.dct'])
        ->find($indicator_id)
        ?->substandard
        ?->standard
        ?->dct_id;

    logUserAccess($module_title . ' ' . $module_action);

    // Fetch all attachements for this DCT and check if they are linked to the indicator
    $query = \Modules\Attachement\Models\Attachement::leftJoin('indicator_attachment', function ($join) use ($indicator_id) {
        $join->on('indicator_attachment.attachment_id', '=', 'attachements.id')
            ->where('indicator_attachment.indicator_id', '=', $indicator_id);
    })
        ->select(
            'attachements.id',
            'attachements.name',
            'attachements.attachement_type',
            DB::raw('CASE WHEN indicator_attachment.indicator_id IS NOT NULL THEN "checked" ELSE "" END AS selected')
        )
        ->whereNull('attachements.deleted_at') // Ensure attachements are not deleted
        ->where('attachements.name', 'NOT LIKE', 'Others%'); // Exclude names starting with "Others"

    // Filter by DCT if we found one
    if ($dct_id) {
        $query->where('attachements.dct_id', $dct_id);
    }

    return Datatables::of($query)
        ->addColumn('action', function ($data) use ($module_name) {
            return view('backend.includes.action_column', [
                'module_name' => $module_name,
                'data' => $data,
                'additionalButtons' => [],
                'additionalData' => [],
            ]);
        })
        ->addColumn('selected', function ($row) {
            return $row->selected === 'checked' ? 'checked' : '';
        })
        ->rawColumns(['action', 'selected'])
        ->make(true);
}


    public function toggleAttachment(Request $request)
    {
        $indicatorId = $request->input('indicator_id');
        $attachmentId = $request->input('attachment_id');
        $selected = filter_var($request->input('selected'), FILTER_VALIDATE_BOOLEAN);

        if (!$indicatorId || !$attachmentId) {
            return response()->json(['success' => false, 'message' => 'Missing required parameters.'], 400);
        }

        try {
            if ($selected) {
                // Inserting the link using Indicator_attachment model
                Indicator_attachment_direct::updateOrCreate(
                    ['indicator_id' => $indicatorId, 'attachment_id' => $attachmentId]
                );
            } else {
                // Force delete the link using Indicator_attachment model to bypass SoftDeletes
                $rowsDeleted = Indicator_attachment_direct::where('indicator_id', $indicatorId)
                    ->where('attachment_id', $attachmentId)
                    ->forceDelete(); // Use forceDelete() for permanent deletion

                if ($rowsDeleted == 0) {
                    return response()->json(['success' => false, 'message' => 'No attachment found to delete.'], 404);
                }
            }

            return response()->json(['success' => true, 'message' => 'Attachment toggled successfully.']);
        } catch (\Exception $e) {
            //Log::error('Error toggling attachment: ' . $e->getMessage());  // Log the error message
            return response()->json(['success' => false, 'message' => 'Error toggling attachment.'], 500);
        }
    }
}
