<?php

namespace App\Livewire\Room;

use App\Models\User;
use Modules\Room\Models\Room;
use Modules\Site\Models\Site;
use Illuminate\Validation\Rule;
use App\Notifications\NotifyCeo;
use Illuminate\Support\Facades\DB;
use Modules\Room\Models\RoomPrice;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Gate;
use LivewireUI\Modal\ModalComponent;

class RoomModal extends ModalComponent
{
    public $siteId;
    public $roomId;
    public $isEdit = false;

    // Form fields
    public $name;
    public $description;
    public $area_square_meters;
    public $room_status = 0;
    public $status = 1;
    public $selected_site_id;
    public $price_per_sqm;

    protected function authorizeAction(string $action): bool
    {
        $permission = match ($action) {
            'create' => 'add_rooms',
            'update' => 'edit_rooms',
            default => 'view_rooms',
        };

        if (!auth()->user()->can($permission)) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'You are not authorized to perform this action',
                'position' => 'top-end',
                'duration' => 5000
            ]);
            return false;
        }

        return true;
    }

    public function mount($siteId = null, $roomId = null)
    {
        $action = $roomId ? 'update' : 'create';
        if (!$this->authorizeAction($action)) {
            $this->skipRender();
            return;
        }

        $this->siteId = $siteId;
        $this->selected_site_id = $siteId;

        if ($roomId) {
            $this->isEdit = true;
            $this->loadRoom($roomId);
        }
    }

    public function loadRoom($roomId)
    {

        try {
            //$room = Room::with(['currentPrice'])->findOrFail($roomId);
            //$room = Room::with('prices')->findOrFail($roomId);
            $room = Room::with('currentPriceModel')->findOrFail($roomId);

            $this->roomId = $roomId;
            $this->selected_site_id = $room->site_id;
            $this->name = $room->name;
            $this->description = $room->description;
            $this->area_square_meters = $room->area_square_meters;
            $this->room_status = $room->room_status;
            $this->status = $room->status;

            // Get the current active price
            //$currentPrice = $room->prices()->whereNull('effective_to')->latest('effective_from')->first();
            //$this->price_per_sqm = $currentPrice?->price_per_sqm ?? 0;

            $this->price_per_sqm = $room->currentPriceModel?->price_per_sqm ?? 0;
        } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'The requested room does not exist',
                'position' => 'top-end',
                'duration' => 5000
            ]);
            $this->closeModal();
        } catch (\Exception $e) {
            Log::error('Failed to load room: ' . $e->getMessage(), [
                'room_id' => $roomId,
                'user_id' => auth()->id()
            ]);
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Failed to load room data',
                'position' => 'top-end',
                'duration' => 5000
            ]);
            $this->closeModal();
        }
    }

    public function saveRoom()
    {
        $action = $this->isEdit ? 'update' : 'create';
        if (!$this->authorizeAction($action)) {
            return;
        }

        $validated = $this->validate([
            'selected_site_id' => 'required|exists:sites,id',
            'name' => [
                'required',
                'string',
                'max:255',
                Rule::unique('rooms')->where(function ($query) {
                    return $query->where('site_id', $this->selected_site_id);
                })->ignore($this->roomId)
            ],
            'description' => 'nullable|string',
            'area_square_meters' => 'required|numeric|min:0',
            'price_per_sqm' => 'required|numeric|min:0',
            'room_status' => 'required|in:0,1',
            'status' => 'required|in:0,1,2',
        ]);

        $validated['site_id'] = $this->selected_site_id;

        try {
            DB::beginTransaction();

            if ($this->isEdit) {
                $room = Room::findOrFail($this->roomId);
                $room->update($validated);
                $this->notifyCeo('updated', $room);

                // Check if price changed
                $currentPrice = $room->currentPriceModel;
                if (!$currentPrice || (float)$currentPrice->price_per_sqm != (float)$this->price_per_sqm) {

                    // Expire old price if exists
                    if ($currentPrice) {
                        $currentPrice->update([
                            'effective_to' => now()->subDay()->toDateString()
                        ]);
                    }

                    // Create new price record
                    RoomPrice::create([
                        'room_id' => $room->id,
                        'price_per_sqm' => $this->price_per_sqm,
                        'total_price' => $this->price_per_sqm * $room->area_square_meters,
                        'effective_from' => now()->toDateString()
                    ]);
                }
            } else {
                $room = Room::create($validated);
                $this->notifyCeo('created', $room);

                // Create initial price record
                RoomPrice::create([
                    'room_id' => $room->id,
                    'price_per_sqm' => $this->price_per_sqm,
                    'total_price' => $this->price_per_sqm * $room->area_square_meters,
                    'effective_from' => now()->toDateString()
                ]);
            }

            DB::commit();

            $this->dispatch('refreshRooms');
            $this->closeModal();
            $this->dispatch('showToast', [
                'type' => 'success',
                'message' => 'Room saved successfully'
            ]);
        } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
            DB::rollBack();
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Room not found',
                'position' => 'top-end',
                'duration' => 5000
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Room save failed: ' . $e->getMessage(), [
                'exception' => $e,
                'room_id' => $this->roomId ?? null,
                'user_id' => auth()->id()
            ]);

            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Failed to save room. Please try again.',
                'position' => 'top-end',
                'duration' => 5000
            ]);
        }
    }

    public function getSitesProperty()
    {
        return Site::orderBy('name')->get(['id', 'name']);
    }

    public function getTotalPriceProperty()
    {
        return $this->area_square_meters * $this->price_per_sqm;
    }

    public function render()
    {
        return view('livewire.room.room-modal', [
            'totalPrice' => $this->totalPrice
        ]);
    }

    public static function modalMaxWidth(): string
    {
        return '2xl';
    }

    protected function notifyCeo($action, Room $room)
    {
        try {
            $ceoUsers = User::role(['ceo', 'super admin'])->get();

            $data = [
                'room_name' => $room->name,
                'site_name' => $room->site->name,
                'area_sqm' => $room->area_square_meters,
                'status' => $room->status ? 'Active' : 'Inactive',
            ];

            foreach ($ceoUsers as $ceo) {
                $ceo->notify(new NotifyCeo(
                    $action,
                    'Room',
                    $data
                ));
            }
        } catch (\Exception $e) {
            Log::error('Failed to send CEO notification: ' . $e->getMessage(), [
                'room_id' => $room->id,
                'action' => $action
            ]);
        }
    }
}
