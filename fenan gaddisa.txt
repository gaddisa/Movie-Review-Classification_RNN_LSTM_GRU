<?php

namespace App\Livewire\Attachement;

use Livewire\Component;
use Livewire\WithPagination;
use Modules\Attachement\Models\Attachement;
use Modules\DCT\Models\DCT;
use RealRashid\SweetAlert\Facades\Alert;

class Attachements extends Component
{
    use WithPagination;

    public $searchTerm = '';
    public $statusFilter = '';
    public $typeFilter = '';
    public $dctFilter = '';
    public $sortField = 'name';
    public $sortDirection = 'asc';
    public $perPage = 50;

    protected $listeners = ['refreshAttachements' => '$refresh'];

    public function sortBy($field)
    {
        if ($this->sortField === $field) {
            $this->sortDirection = $this->sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            $this->sortDirection = 'asc';
        }
        $this->sortField = $field;
    }

    public function resetFilters()
    {
        $this->reset(['statusFilter', 'typeFilter', 'dctFilter', 'searchTerm']);
        $this->resetPage();
    }

    public function openAddModal()
    {
        $this->dispatch('openModal', 'attachement.attachement-modal');
    }

    public function openEditModal($attachementId)
    {
        $attachement = Attachement::find($attachementId);
        
        // CHECK OWNERSHIP BEFORE EDITING
        if ($attachement && !$this->canCreateAttachment($attachement->dct_id, auth()->id())) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'You can only edit attachments for DCTs that you created!',
                'position' => 'top-end',
                'duration' => 5000
            ]);
            return;
        }

        $this->dispatch('openModal', 'attachement.attachement-modal', [
            'attachementId' => $attachementId
        ]);
    }

    public function deleteAttachement($attachementId)
    {
        $attachement = Attachement::find($attachementId);
        
        if ($attachement) {
            // CHECK OWNERSHIP BEFORE DELETING
            if (!$this->canCreateAttachment($attachement->dct_id, auth()->id())) {
                $this->dispatch('showToast', [
                    'type' => 'error',
                    'message' => 'You can only delete attachments for DCTs that you created!',
                    'position' => 'top-end',
                    'duration' => 5000
                ]);
                return;
            }

            $attachement->delete();
            $this->dispatch('refreshAttachements');
            $this->dispatch('showToast', [
                'type' => 'success',
                'message' => 'Attachement deleted successfully'
            ]);
        }
    }

    /**
     * Check if user can create attachment for the given DCT
     */
    protected function canCreateAttachment($dctId, $userId)
    {
        $dct = DCT::find($dctId);
        
        if (!$dct) {
            return false;
        }

        return $dct->created_by == $userId;
    }

    public function getDctsProperty()
    {
        return DCT::orderBy('name')->get(['id', 'name']);
    }

    public function render()
    {
        // Add ownership filter to only show attachments for DCTs created by current user
        $attachements = Attachement::query()
            ->with(['dct'])
            ->when($this->searchTerm, function ($query) {
                return $query->where('name', 'like', '%' . $this->searchTerm . '%');
            })
            ->when($this->statusFilter, function ($query) {
                return $query->where('status', $this->statusFilter);
            })
            ->when($this->typeFilter, function ($query) {
                return $query->where('attachement_type', $this->typeFilter);
            })
            ->when($this->dctFilter, function ($query) {
                return $query->where('dct_id', $this->dctFilter);
            })
            // Add ownership filter - only show attachments for DCTs created by current user
            ->whereHas('dct', function ($query) {
                $query->where('created_by', auth()->id());
            })
            // Exclude attachments starting with "Others"
            ->where('name', 'NOT LIKE', 'Others%')
            ->orderBy($this->sortField, $this->sortDirection)
            ->paginate($this->perPage);

        return view('livewire.attachement.attachements', [
            'attachements' => $attachements,
            'statusOptions' => ['active' => 'Active', 'inactive' => 'Inactive'],
            'typeOptions' => [
                'table' => 'Table',
                'document' => 'Document',
                'image' => 'Image',
                'other' => 'Other'
            ],
            'dcts' => $this->dcts
        ]);
    }
}
