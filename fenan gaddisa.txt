<?php

namespace App\Livewire\Payment;

use Carbon\Carbon;
use App\Models\User;
use App\Models\Payment;
use Livewire\Component;
use App\Models\EmployeeInfo;
use App\Models\RentAgreement;
use App\Models\PaymentAllocation;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Auth;
use LivewireUI\Modal\ModalComponent;
use App\Notifications\GeneralNotification;

class TenantsPaymentModal extends ModalComponent
{
    public $agreementId;
    public $selectedMonths = [];
    public $totalAmountDue;
    public $amountToPay;
    public $ttnNumber;
    public $paymentDate;
    public $paymentId = null;
    public $allocationId = null;
    public $isEdit = false;

    public $rentAmount;
    public $minimumPayment;

    protected $rules = [
        'ttnNumber' => ['required', 'string', 'max:15', 'regex:/^[a-zA-Z0-9]+$/'],
        'paymentDate' => 'required|date',
        'amountToPay' => 'required|numeric|min:0',
    ];

    public function mount($agreementId, $selectedMonths, $totalAmount, $paymentId = null, $allocationId = null)
    {
        $this->agreementId = $agreementId;
        $this->selectedMonths = $selectedMonths;
        $this->totalAmountDue = (float)$totalAmount;
        $this->paymentDate = now()->format('Y-m-d');
        $this->amountToPay = (float)$totalAmount;
        $this->paymentId = $paymentId;
        $this->allocationId = $allocationId;
        $this->isEdit = !is_null($paymentId);

        $this->initializePaymentData();
    }

    protected function initializePaymentData()
    {
        try {
            DB::beginTransaction();

            $agreement = RentAgreement::with('tenant')->findOrFail($this->agreementId);
            $currentEmployee = EmployeeInfo::where('user_id', auth()->id())->firstOrFail();

            $this->verifyTenantOwnership($agreement, $currentEmployee);

            $this->rentAmount = (float)$agreement->rent_amount;

            if ($this->isEdit) {
                $this->loadExistingPayment();
            }

            $this->calculateMinimumPayment();

            DB::commit();
        } catch (\Exception $e) {
            DB::rollBack();
            $this->handleError('Payment initialization failed', $e);
            $this->closeModal();
        }
    }

    protected function verifyTenantOwnership($agreement, $employee)
    {
        if ($agreement->tenant_id != $employee->id) {
            abort(403, 'You are not authorized to access this agreement');
        }

        if ($this->isEdit) {
            $payment = Payment::findOrFail($this->paymentId);
            if ($payment->created_by != auth()->id()) {
                abort(403, 'You can only edit your own payments');
            }
        }
    }

    protected function loadExistingPayment()
    {
        $payment = Payment::findOrFail($this->paymentId);
        $this->ttnNumber = $payment->ttn_number;
        $this->paymentDate = $payment->payment_date_gregorian->format('Y-m-d');
        $this->amountToPay = (float)$payment->total_amount;
    }

    protected function calculateMinimumPayment()
    {
        $monthsWithPenalty = array_filter($this->selectedMonths, function ($month) {
            return $this->calculatePenalty($month['year'], $month['month'], $this->rentAmount) > 0;
        });

        $penaltyTotal = 0;
        foreach ($monthsWithPenalty as $month) {
            $penaltyTotal += $this->calculatePenalty($month['year'], $month['month'], $this->rentAmount);
        }
        
        $this->minimumPayment = (count($monthsWithPenalty) * $this->rentAmount) + $penaltyTotal;

        $this->rules['amountToPay'] = [
            'required',
            'numeric',
            'min:' . $this->minimumPayment,
            'max:' . $this->totalAmountDue
        ];
    }

    public function updated($property, $value)
    {
        if ($property === 'amountToPay') {
            $this->validateOnly('amountToPay');
        }
    }

    public function submitPayment()
    {
        $this->validate();

        $cleanedTtn = strtoupper(preg_replace('/\s+/', '', $this->ttnNumber));

        if (Payment::ttnExistsInApproved($cleanedTtn, $this->isEdit ? $this->paymentId : null)) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'The TTN is already used in an approved payment.'
            ]);
            return;
        }

        try {
            DB::beginTransaction();

            $agreement = RentAgreement::with('tenant')->findOrFail($this->agreementId);
            $currentEmployee = EmployeeInfo::where('user_id', auth()->id())->firstOrFail();

            $this->verifyTenantOwnership($agreement, $currentEmployee);

            if ($this->isEdit) {
                $payment = $this->updateExistingPayment();
            } else {
                $payment = $this->createNewPayment();
            }

            $this->processPaymentAllocations($payment);

            DB::commit();

            $this->notifyAdminsAboutPayment($payment, $this->isEdit ? 'updated' : 'submitted');

            $this->dispatch('payment-processed');
            $this->dispatch('showToast', [
                'type' => 'success',
                'message' => 'Payment ' . ($this->isEdit ? 'updated' : 'submitted') . ' successfully!'
            ]);
            $this->closeModal();
        } catch (\Exception $e) {
            DB::rollBack();
            $this->handleError('Payment processing failed', $e);
        }
    }

    protected function updateExistingPayment()
    {
        $payment = Payment::findOrFail($this->paymentId);

        $cleanedTtn = strtoupper(preg_replace('/\s+/', '', $this->ttnNumber));
        if (Payment::ttnExistsInApproved($cleanedTtn, $this->isEdit ? $this->paymentId : null)) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'The TTN is already used in an approved payment.'
            ]);
            return;
        }

        $payment->update([
            'ttn_number' => $cleanedTtn,
            'total_amount' => $this->amountToPay,
            'payment_date_gregorian' => $this->paymentDate,
            'status' => 'pending',
            'updated_by' => Auth::id(),
        ]);

        PaymentAllocation::where('payment_id', $payment->id)->delete();
        return $payment;
    }

    protected function createNewPayment()
    {
        $cleanedTtn = strtoupper(preg_replace('/\s+/', '', $this->ttnNumber));

        return Payment::create([
            'agreement_id' => $this->agreementId,
            'ttn_number' => $cleanedTtn,
            'total_amount' => $this->amountToPay,
            'payment_date_gregorian' => $this->paymentDate,
            'status' => 'pending',
            'created_by' => Auth::id(),
        ]);
    }

    protected function processPaymentAllocations(Payment $payment)
    {
        $remainingAmount = $this->amountToPay;

        // Sort by year and month (oldest first)
        usort($this->selectedMonths, function ($a, $b) {
            $dateA = Carbon::create($a['year'], $a['month'], 1);
            $dateB = Carbon::create($b['year'], $b['month'], 1);
            return $dateA <=> $dateB;
        });

        foreach ($this->selectedMonths as $month) {
            if ($remainingAmount <= 0) break;

            $penalty = $this->calculatePenalty($month['year'], $month['month'], $this->rentAmount);
            $totalForMonth = $this->rentAmount + $penalty;
            $amountToAllocate = min($totalForMonth, $remainingAmount);

            PaymentAllocation::create([
                'payment_id' => $payment->id,
                'agreement_id' => $this->agreementId,
                'year_gregorian' => $month['year'],
                'month_gregorian' => $month['month'],
                'penalty_amount' => $penalty,
                'rent_amount' => $this->rentAmount,
                'total_for_the_month' => $totalForMonth,
                'amount_paid' => $amountToAllocate,
                'status' => 'pending',
            ]);

            $remainingAmount -= $amountToAllocate;
        }
    }

    protected function calculatePenalty($year, $month, $rentAmount)
    {
        $monthDate = Carbon::create($year, $month, 1)->endOfMonth();
        $diffInMonths = $monthDate->diffInMonths(now());
        return $diffInMonths >= 3 ? $rentAmount * 0.10 : 0;
    }

    protected function handleError(string $context, \Exception $e)
    {
        Log::error($context, [
            'error' => $e->getMessage(),
            'agreement_id' => $this->agreementId,
            'payment_id' => $this->paymentId,
            'user_id' => Auth::id()
        ]);
        $this->dispatch('showToast', [
            'type' => 'error',
            'message' => $e->getMessage()
        ]);
    }

    protected function notifyAdminsAboutPayment(Payment $payment, string $action)
    {
        try {
            $tenant = EmployeeInfo::find($payment->agreement_id);

            $data = [
                'title' => ucfirst($action) . ' Rent Payment',
                'message' => sprintf(
                    '%s %s a rent payment of %s (TTN: %s)',
                    auth()->user()->name,
                    $action,
                    $payment->total_amount,
                    $payment->ttn_number
                ),
                'module' => 'Rent Payment',
                'type' => $action,
                'icon' => 'fas fa-money-bill-wave',
                'url_backend' => route('backend.paymentreports.index'),
                'url_frontend' => '',
            ];

            $admins = User::role(['ceo', 'cashier', 'deputy director', 'super admin'])->get();

            foreach ($admins as $admin) {
                $admin->notify(new GeneralNotification($data));
            }
        } catch (\Exception $e) {
            Log::error('Payment notification failed', [
                'payment_id' => $payment->id,
                'error' => $e->getMessage()
            ]);
        }
    }

    public static function modalMaxWidth(): string
    {
        return '2xl';
    }

    public function render()
    {
        try {
            $agreement = RentAgreement::with(['tenant', 'room'])->findOrFail($this->agreementId);
            $currentEmployee = EmployeeInfo::where('user_id', auth()->id())->firstOrFail();

            $this->verifyTenantOwnership($agreement, $currentEmployee);

            return view('livewire.payment.tenants-payment-modal', [
                'agreement' => $agreement,
            ]);
        } catch (\Exception $e) {
            $this->handleError('Render failed', $e);
            return view('livewire.payment.tenants-payment-modal', ['agreement' => null]);
        }
    }
}
