<?php

namespace App\Http\Controllers\Backend;

use Carbon\Carbon;
use App\Models\User;
use App\Models\Payment;
use Andegna\DateTimeFactory;
use App\Models\EmployeeInfo;
use Illuminate\Http\Request;
use App\Models\RentAgreement;
use Modules\Room\Models\Room;
use Modules\Site\Models\Site;
use App\Models\PaymentAllocation;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Modules\Application\Models\Application;
use Modules\Mainsetting\Models\Mainsetting;

class BackendController extends Controller
{

    // Add this to your BackendController or a helper class

    private function getEthiopianMonthlyCollections($allocations, $fiscalYearStart, $fiscalYearEnd)
    {
        $ethiopianMonths = [
            1 => 'መስከረም',
            2 => 'ጥቅምት',
            3 => 'ኅዳር',
            4 => 'ታኅሣሥ',
            5 => 'ጥር',
            6 => 'የካቲት',
            7 => 'መጋቢት',
            8 => 'ሚያዝያ',
            9 => 'ግንቦት',
            10 => 'ሰኔ',
            11 => 'ሐምሌ',
            12 => 'ነሐሴ',
            13 => 'ጳጉሜ'
        ];

        // Initialize monthly data for Ethiopian fiscal year (from ሐምሌ to ሰኔ)
        $monthlyData = [];
        for ($month = 11; $month <= 13; $month++) {
            $monthlyData[$ethiopianMonths[$month]] = 0;
        }
        for ($month = 1; $month <= 10; $month++) {
            $monthlyData[$ethiopianMonths[$month]] = 0;
        }

        // Group allocations by Ethiopian month
        foreach ($allocations as $allocation) {
            $ethiopianDate = DateTimeFactory::fromDateTime($allocation->created_at);
            $ethiopianMonth = $ethiopianDate->getMonth();
            $ethiopianYear = $ethiopianDate->getYear();

            // Check if the date falls within the fiscal year
            $fiscalStartEth = DateTimeFactory::fromDateTime($fiscalYearStart);
            $fiscalEndEth = DateTimeFactory::fromDateTime($fiscalYearEnd);

            if ($ethiopianDate >= $fiscalStartEth && $ethiopianDate <= $fiscalEndEth) {
                $monthName = $ethiopianMonths[$ethiopianMonth];
                $monthlyData[$monthName] += $allocation->total_for_the_month;
            }
        }

        // Prepare chart data in the correct order (ሐምሌ to ሰኔ)
        $orderedMonths = [
            'ሐምሌ',
            'ነሐሴ',
            'ጳጉሜ', // Ethiopian months 11,12,13
            'መስከረም',
            'ጥቅምት',
            'ኅዳር',
            'ታኅሣሥ',
            'ጥር',
            'የካቲት',
            'መጋቢት',
            'ሚያዝያ',
            'ግንቦት',
            'ሰኔ'  // Months 1-10
        ];

        $labels = [];
        $data = [];

        foreach ($orderedMonths as $month) {
            $labels[] = $month;
            $data[] = $monthlyData[$month] ?? 0;
        }

        return [
            'labels' => $labels,
            'data' => $data
        ];
    }
    public function index(Request $request)
    {
        // Get all cashiers except the test email
        $cashiers = User::role('cashier')
            ->where('email', '!=', 'teslim12@gmail.com')
            ->get();


        // Initialize variables with default values
        $cashierNames = [];
        $rentAgreementCounts = [];
        $roomCounts = [];
        $tenantCounts = [];
        $leader = null;
        $maxAgreements = 0;

        if ($cashiers->isNotEmpty()) {
            foreach ($cashiers as $cashier) {
                $cashierNames[] = $cashier->name;

                // Count rent agreements created by this cashier
                $agreementCount = RentAgreement::where('created_by', $cashier->id)->count();
                $rentAgreementCounts[] = $agreementCount;

                // Count rooms created by this cashier
                $roomCount = Room::where('created_by', $cashier->id)->count();
                $roomCounts[] = $roomCount;

                // Count tenants (EmployeeInfo) created by this cashier
                $tenantCount = EmployeeInfo::where('created_by', $cashier->id)->count();
                $tenantCounts[] = $tenantCount;

                // Check for leader
                if ($agreementCount > $maxAgreements) {
                    $maxAgreements = $agreementCount;
                    $leader = $cashier;
                }
            }
        }

        return view('backend.index', compact(
            'cashiers',
            'cashierNames',
            'rentAgreementCounts',
            'roomCounts',
            'tenantCounts',
            'leader',
            'maxAgreements'
        ));
    }

    private function getAvailableFiscalYears($currentFiscalYear)
    {
        $firstHistoricalYear = 2024; // First fiscal year in system
        $years = range($firstHistoricalYear, $currentFiscalYear);
        return array_reverse($years); // Newest first
    }
    private function getLastEightWeeksPerformance($ceoUsers)
    {
        $payments = PaymentAllocation::where('status', 'approved')
            ->whereIn('updated_by', $ceoUsers)
            ->where('created_at', '>=', now()->subWeeks(8)->startOfWeek())
            ->get();

        $weeklyData = [];

        for ($i = 7; $i >= 0; $i--) {
            $start = now()->subWeeks($i)->startOfWeek();
            $end = now()->subWeeks($i)->endOfWeek();

            // Convert to Ethiopian dates
            $ethStart = DateTimeFactory::fromDateTime($start);
            $ethEnd = DateTimeFactory::fromDateTime($end);

            // Create Amharic label: "ሳምንት 1: ሐምሌ 15-21"
            $weekNumber = 8 - $i;
            $monthStart = translate_ethiopian_month($ethStart->format('F'), 'am');
            $monthEnd = translate_ethiopian_month($ethEnd->format('F'), 'am');

            $label = "ሳምንት $weekNumber: " .
                $monthStart . ' ' . $ethStart->format('j') . '-' .
                ($monthStart === $monthEnd ? '' : $monthEnd . ' ') .
                $ethEnd->format('j');

            $amount = $payments->filter(function ($payment) use ($start, $end) {
                return $payment->created_at >= $start && $payment->created_at <= $end;
            })->sum('total_for_the_month');

            $weeklyData[] = [
                'week_number' => $weekNumber,
                'label' => $label,
                'amount' => $amount,
                'start_date' => $start,
                'end_date' => $end
            ];
        }

        return [
            'labels' => array_column($weeklyData, 'label'),
            'data' => array_column($weeklyData, 'amount'),
            'detailed_data' => $weeklyData
        ];
    }
    // private function getLastEightWeeksPerformance($ceoUsers)
    // {
    //     $payments = PaymentAllocation::where('status', 'approved')
    //         ->whereIn('updated_by', $ceoUsers)
    //         ->where('created_at', '>=', now()->subWeeks(8)->startOfWeek())
    //         ->get();

    //     $weeklyData = [];

    //     for ($i = 7; $i >= 0; $i--) {
    //         $start = now()->subWeeks($i)->startOfWeek();
    //         $end = now()->subWeeks($i)->endOfWeek();

    //         // Week label format: "Week 1: Jul 1-7" or "ሳምንት 1: Jul 1-7"
    //         $weekNumber = 8 - $i; // Counts from 1 to 8
    //         $gregorianLabel = "Week $weekNumber: " . $start->format('M j') . '-' . $end->format('j');
    //         $amharicLabel = "ሳምንት $weekNumber: " . $start->format('M j') . '-' . $end->format('j');

    //         $amount = $payments->filter(function ($payment) use ($start, $end) {
    //             return $payment->created_at >= $start && $payment->created_at <= $end;
    //         })->sum('total_for_the_month');

    //         $weeklyData[] = [
    //             'week_number' => $weekNumber,
    //             'gregorian_label' => $gregorianLabel,
    //             'amharic_label' => $amharicLabel,
    //             'amount' => $amount,
    //             'start_date' => $start,
    //             'end_date' => $end
    //         ];
    //     }

    //     return [
    //         'labels' => array_column($weeklyData, 'gregorian_label'),
    //         'amharic_labels' => array_column($weeklyData, 'amharic_label'),
    //         'data' => array_column($weeklyData, 'amount'),
    //         'detailed_data' => $weeklyData
    //     ];
    // }
}



@extends('backend.layouts.app')

@section('title')
    @lang('Date Encoders Performance Dashboard')
@endsection

@section('breadcrumbs')
    <x-backend.breadcrumbs />
@endsection

@section('content')
    <div class="card border-0 rounded-4 shadow-lg mb-4" style="background: linear-gradient(135deg, #007BFF, #00BFA5)">
        <div class="card-body p-4">
            <div class="row align-items-center text-white">
                <div class="col-md-8">
                    <div class="d-flex align-items-center flex-wrap mb-3">
                        <h2 class="fw-bold m-0"><i class="fas fa-tachometer-alt me-2"></i> Data Encoding Performance Report
                        </h2>
                    </div>
                    <p class="lead"><i class="far fa-clock me-2"></i> Data Encoders Performance Dashboard</p>
                </div>

                @if ($leader)
                    <div class="col-md-4 text-center">
                        <div class="leader-badge bg-warning p-3 rounded-4 shadow">
                            <i class="fas fa-trophy fa-3x text-white mb-2"></i>
                            <h4 class="text-white mb-1">Top Performer</h4>
                            <h3 class="text-white">{{ $leader->name }}</h3>
                            <p class="text-white mb-0">{{ $maxAgreements }} Rent Agreements</p>
                        </div>
                    </div>
                @endif
            </div>
        </div>
    </div>

    @if ($cashiers->isEmpty())
        <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i> No cashiers found (excluding test accounts).
        </div>
    @else
        <div class="row">
            <!-- Rent Agreements Chart -->
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0"><i class="fas fa-file-contract me-2"></i> Rent Agreements Created</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="rentAgreementsChart" height="250"></canvas>
                    </div>
                </div>
            </div>

            <!-- Rooms Chart -->
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0"><i class="fas fa-door-open me-2"></i> Rooms Registered</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="roomsChart" height="250"></canvas>
                    </div>
                </div>
            </div>

            <!-- Tenants Chart -->
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0"><i class="fas fa-users me-2"></i> Tenants Registered</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="tenantsChart" height="250"></canvas>
                    </div>
                </div>
            </div>

            <!-- Performance Summary -->
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-header bg-secondary text-white">
                        <h5 class="mb-0"><i class="fas fa-chart-pie me-2"></i> Performance Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="thead-light">
                                    <tr>
                                        <th>Cashier</th>
                                        <th class="text-end">Agreements</th>
                                        <th class="text-end">Rooms</th>
                                        <th class="text-end">Tenants</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach ($cashiers as $index => $cashier)
                                        <tr>
                                            <td>{{ $cashier->name }}</td>
                                            <td class="text-end">{{ $rentAgreementCounts[$index] }}</td>
                                            <td class="text-end">{{ $roomCounts[$index] }}</td>
                                            <td class="text-end">{{ $tenantCounts[$index] }}</td>
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    @endif

    @push('after-scripts')
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            @if ($cashiers->isNotEmpty())
                // Rent Agreements Chart
                const rentCtx = document.getElementById('rentAgreementsChart').getContext('2d');
                new Chart(rentCtx, {
                    type: 'bar',
                    data: {
                        labels: {!! json_encode($cashierNames) !!},
                        datasets: [{
                            label: 'Rent Agreements Created',
                            data: {!! json_encode($rentAgreementCounts) !!},
                            backgroundColor: 'rgba(54, 162, 235, 0.7)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });

                // Rooms Chart
                const roomsCtx = document.getElementById('roomsChart').getContext('2d');
                new Chart(roomsCtx, {
                    type: 'bar',
                    data: {
                        labels: {!! json_encode($cashierNames) !!},
                        datasets: [{
                            label: 'Rooms Registered',
                            data: {!! json_encode($roomCounts) !!},
                            backgroundColor: 'rgba(75, 192, 192, 0.7)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });

                // Tenants Chart
                const tenantsCtx = document.getElementById('tenantsChart').getContext('2d');
                new Chart(tenantsCtx, {
                    type: 'bar',
                    data: {
                        labels: {!! json_encode($cashierNames) !!},
                        datasets: [{
                            label: 'Tenants Registered',
                            data: {!! json_encode($tenantCounts) !!},
                            backgroundColor: 'rgba(153, 102, 255, 0.7)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            @endif
        </script>
    @endpush

    @push('after-styles')
        <style>
            .leader-badge {
                background: linear-gradient(135deg, #FFC107, #FF9800);
                border: 3px solid white;
            }

            .card {
                border-radius: 8px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                transition: all 0.3s ease;
            }

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
            }

            .table-hover tbody tr:hover {
                background-color: rgba(0, 123, 255, 0.05);
            }
        </style>
    @endpush
@endsection
