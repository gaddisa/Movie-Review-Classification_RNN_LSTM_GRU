<?php

namespace App\Livewire\RentAgreement;

use Livewire\Component;
use App\Models\EmployeeInfo;
use Livewire\WithPagination;
use App\Models\RentAgreement;
use Modules\Room\Models\Room;
use Modules\Site\Models\Site;
use Illuminate\Support\Facades\Auth;

class RentAgreements extends Component
{
    use WithPagination;

    protected $listeners = ['refresh-rent-agreements' => '$refresh'];

    public $search = '';
    public $statusFilter = 'active';
    public $perPage = 10;
    public $siteFilter = '';
    public $dateFilter = '';
    public $deleteId = null;

    public function render()
    {
        $rentAgreements = RentAgreement::query()
            ->with(['tenant', 'room.site', 'updater'])
            ->where('rent_agreements.created_by', auth()->id()) // Specify table name
            ->when($this->search, function ($q) {
                $q->whereHas('tenant', function ($query) {
                    $query->where('first_name', 'like', "%{$this->search}%")
                        ->orWhere('last_name', 'like', "%{$this->search}%")
                        ->orWhere('employee_id', 'like', "%{$this->search}%");
                });
            })
            ->when($this->siteFilter, function ($q) {
                $q->whereHas('room.site', function ($query) {
                    $query->where('id', $this->siteFilter);
                });
            })
            ->when($this->dateFilter, function ($q) {
                $q->whereDate('rent_agreements.start_date', '<=', $this->dateFilter)
                    ->whereDate('rent_agreements.end_date', '>=', $this->dateFilter);
            })
            ->when($this->statusFilter === 'active', function ($q) {
                $q->whereDate('rent_agreements.start_date', '<=', now())
                    ->whereDate('rent_agreements.end_date', '>=', now());
            })
            ->when($this->statusFilter === 'expired', function ($q) {
                $q->whereDate('rent_agreements.end_date', '<', now());
            })
            ->when($this->statusFilter === 'upcoming', function ($q) {
                $q->whereDate('rent_agreements.start_date', '>', now());
            })
            ->join('employee_infos', 'rent_agreements.tenant_id', '=', 'employee_infos.id')
            ->orderBy('employee_infos.employee_id')
            ->orderBy('rent_agreements.start_date', 'desc')
            ->select('rent_agreements.*')
            ->paginate($this->perPage);

        $sites = Site::where('created_by', auth()->id())->orderBy('name')->get();
        $tenants = EmployeeInfo::where('created_by', auth()->id())->orderBy('first_name')->get();

        return view('livewire.rentagreement.rent-agreements', [
            'rentAgreements' => $rentAgreements,
            'sites' => $sites,
            'tenants' => $tenants
        ]);
    }

    // ... rest of your methods remain the same ...
    public function createAgreement()
    {
        $this->dispatch('openModal', 'rentagreement.rent-agreement-modal');
    }

    public function viewAgreement($agreementId)
    {
        $agreement = RentAgreement::findOrFail($agreementId);

        if (!$agreement->hasMedia('agreement_files')) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'No agreement file found'
            ]);
            return;
        }

        $media = $agreement->getFirstMedia('agreement_files');
        return response()->file($media->getPath());
    }

    public function editAgreement($agreementId)
    {
        $agreement = RentAgreement::find($agreementId);

        if (!$this->canEditOrDelete($agreement)) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'You are not authorized to edit this agreement'
            ]);
            return;
        }

        $this->dispatch('openModal', 'rentagreement.rent-agreement-modal', [
            'agreementId' => $agreementId
        ]);
    }

    public function confirmDelete($agreementId)
    {
        $agreement = RentAgreement::find($agreementId);

        if (!$this->canEditOrDelete($agreement)) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'You are not authorized to delete this agreement'
            ]);
            return;
        }

        $this->dispatch('openModal', 'rentagreement.delete-confirmation-modal', [
            'agreementId' => $agreementId
        ]);
    }

    protected function canEditOrDelete($agreement)
    {
        // First check if user created the agreement
        if ($agreement->created_by === auth()->id()) {
            return true;
        }

        $user = Auth::user();

        // Keep your existing role-based checks
        if ($agreement->updated_by) {
            $updater = $agreement->updater;
            if ($updater && in_array($updater->roles->pluck('name')->first(), ['super admin', 'cashier', 'ceo'])) {
                return $user->hasAnyRole(['super admin', 'cashier', 'ceo']);
            }
        }

        return false;
    }
}



<?php

namespace App\Livewire\Rentagreement;

use Carbon\Carbon;
use App\Models\User;
use App\Models\EmployeeInfo;
use App\Models\RentAgreement;
use Livewire\WithFileUploads;
use Modules\Room\Models\Room;
use App\Notifications\NotifyCeo;
use Illuminate\Support\Facades\DB;
use Modules\Room\Models\RoomPrice;
use Illuminate\Support\Facades\Gate;
use LivewireUI\Modal\ModalComponent;

class RentAgreementModal extends ModalComponent
{
    use WithFileUploads;

    public $agreementId;
    public $isEdit = false;

    public $tenant_id = '';
    public $room_id = '';
    public $start_date = '';
    public $end_date = '';
    public $purpose = '';
    public $rent_amount = '';
    public $agreement_file;
    public $existing_file;
    public $agreement;
    public $show_end_date = false; // Control visibility


    protected $rules = [
        'tenant_id' => 'required|exists:employee_infos,id',
        'room_id' => 'required|exists:rooms,id',
        'start_date' => 'required|date',
        'end_date' => 'required|date|after:start_date',
        'purpose' => 'nullable|string|max:500',
        'rent_amount' => 'required|numeric|min:0',
        'agreement_file' => 'nullable|file|mimes:pdf|max:8200',
    ];

    protected function authorizeAction(string $action): bool
    {
        $permission = match ($action) {
            'create' => 'add_rentagreements',
            'update' => 'edit_rentagreements',
            default => 'view_rentagreements'
        };

        if (!auth()->user()->can($permission)) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'You are not authorized to perform this action',
                'position' => 'top-end',
                'duration' => 5000
            ]);
            return false;
        }

        return true;
    }
    public function mount($agreementId = null)
    {
        $action = $agreementId ? 'update' : 'create';
        if (!$this->authorizeAction($action)) {
            $this->skipRender();
            return;
        }

        if ($agreementId) {
            $this->agreementId = $agreementId;
            $this->isEdit = true;
            $this->loadAgreement();
        } else {
            $this->start_date = now()->format('Y-m-d');
            $this->end_date = now()->addYears(5)->format('Y-m-d');
            $this->show_end_date = false;
        }
    }
    public function updatedStartDate($value)
    {
        if (!$this->isEdit && !empty($value)) {
            try {
                $this->end_date = Carbon::parse($value)->addYears(5)->format('Y-m-d');
            } catch (\Exception $e) {
                $this->dispatch('showToast', [
                    'type' => 'error',
                    'message' => 'Invalid Date.'
                ]);
            }
        }
    }

    public function loadAgreement()
    {
        $this->agreement = RentAgreement::where('id', $this->agreementId)
            ->where('created_by', auth()->id())
            ->first();
        if (!$this->agreement) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Agreement not found or you don\'t have permission',
                'position' => 'top-end',
                'duration' => 5000
            ]);
            $this->closeModal();
            return;
        }
        if ($this->agreement) {
            $this->tenant_id = $this->agreement->tenant_id;
            $this->room_id = $this->agreement->room_id;
            $this->start_date = $this->agreement->start_date->format('Y-m-d');
            $this->end_date = $this->agreement->end_date->format('Y-m-d');
            $this->purpose = $this->agreement->purpose;
            $this->rent_amount = $this->agreement->rent_amount;
        }
    }

    public function updatedRoomId($value)
    {
        if ($value) {
            $roomPrice = RoomPrice::where('room_id', $value)
                ->whereNull('effective_to')
                ->latest()
                ->first();

            if ($roomPrice) {
                $this->rent_amount = $roomPrice->total_price;
            }
        }
    }

    public function save()
    {
        $action = $this->isEdit ? 'update' : 'create';
        if (!$this->authorizeAction($action)) {
            return;
        }

        $this->validate();

        // Check room availability
        if (!RentAgreement::isRoomAvailable(
            $this->room_id,
            $this->start_date,
            $this->end_date,
            $this->isEdit ? $this->agreementId : null
        )) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'The room is already occupied during the selected period'
            ]);
            return;
        }

        // Get current room price
        $roomPrice = RoomPrice::where('room_id', $this->room_id)
            ->whereNull('effective_to')
            ->latest()
            ->first();

        if (!$roomPrice) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'No active price found for this room'
            ]);
            return;
        }

        DB::beginTransaction();

        try {
            $data = [
                'tenant_id' => $this->tenant_id,
                'room_id' => $this->room_id,
                'start_date' => $this->start_date,
                'end_date' => $this->end_date,
                'purpose' => $this->purpose,
                'rent_amount' => $roomPrice->total_price,
            ];

            if ($this->isEdit) {
                $agreement = RentAgreement::where('id', $this->agreementId)
                    ->where('created_by', auth()->id())
                    ->first();

                if (!$agreement) {
                    throw new \Exception('You can only edit agreements you created');
                }

                $agreement->update($data);

                // Handle file upload for edit
                if ($this->agreement_file) {
                    $agreement->clearMediaCollection('agreement_files');
                    $agreement->addMedia($this->agreement_file->getRealPath())
                        ->usingName($this->agreement_file->getClientOriginalName())
                        ->toMediaCollection('agreement_files');
                }
                $this->notifyCeo('updated', $agreement);


                $message = 'Rent agreement updated successfully!';
            } else {
                $agreement = RentAgreement::create($data);

                // Handle file upload for create
                if ($this->agreement_file) {
                    $agreement->addMedia($this->agreement_file->getRealPath())
                        ->usingName($this->agreement_file->getClientOriginalName())
                        ->toMediaCollection('agreement_files');
                }
                $this->notifyCeo('created', $agreement);

                $message = 'Rent agreement created successfully!';
            }

            DB::commit();

            $this->dispatch('refresh-rent-agreements');
            $this->closeModal();
            $this->dispatch('showToast', [
                'type' => 'success',
                'message' => $message
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Failed to save rent agreement: ' . $e->getMessage()
            ]);
        }
    }

    public function render()
    {
        $tenants = EmployeeInfo::orderBy('first_name')->get();
        $rooms = Room::orderBy('name')->get();

        return view('livewire.rentagreement.rent-agreement-modal', [
            'tenants' => EmployeeInfo::where('created_by', auth()->id())->orderBy('first_name')->get(),
            'rooms' => Room::whereHas('site', function ($q) {
                $q->where('created_by', auth()->id());
            })->orderBy('name')->get()
        ]);
    }

    public static function modalMaxWidth(): string
    {
        return '4xl';
    }



    protected function notifyCeo($action, RentAgreement $agreement)
    {
        $ceoUsers = User::role(['ceo', 'super admin'])->get();

        $data = [
            'tenant_name' => $agreement->tenant->full_name,
            'room_name' => $agreement->room->name,
            'rent_amount' => $agreement->rent_amount,
        ];

        foreach ($ceoUsers as $ceo) {
            $ceo->notify(new NotifyCeo(
                $action,
                'Rent Agreement',
                $data
            ));
        }
    }
}
