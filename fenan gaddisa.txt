<?php

namespace App\Providers;

use App\Models\EmployeeInfo;
use App\Policies\DeskPolicy;
use Modules\Desk\Models\Desk;
use Modules\Room\Models\Room;
use Modules\Site\Models\Site;
use Modules\Room\Models\RoomPrice;
use App\Policies\ApplicationPolicy;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Event;
use App\Policies\SystemSettingsPolicy;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\ServiceProvider;
use Modules\DeskReview\Models\DeskReview;
use Modules\Application\Models\Application;
use App\Policies\DeskReviewApplicationPolicy;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        // Enhanced permission cache clearing
        $this->registerPermissionCacheClearing();

        Schema::defaultStringLength(125);

        // Register Event Listeners
        $this->registerEventListeners();
        $this->configureCommands();

        // Implicitly grant "Super Admin" role all permissions
        Gate::before(function ($user, $ability) {
            return $user->hasRole('super admin') ? true : null;
        });

        // Register policies
        Gate::policy(Site::class, SystemSettingsPolicy::class);
        Gate::policy(Room::class, SystemSettingsPolicy::class);
        Gate::policy(RoomPrice::class, SystemSettingsPolicy::class);
        Gate::policy(EmployeeInfo::class, SystemSettingsPolicy::class);
    }

    protected function registerPermissionCacheClearing(): void
    {
        // Clear cache when roles/permissions change
        Role::updated(function ($role) {
            $this->clearPermissionCaches();
            logger()->info("Role updated: {$role->name}, cleared permission caches");
        });

        Permission::updated(function ($permission) {
            $this->clearPermissionCaches();
            logger()->info("Permission updated: {$permission->name}, cleared permission caches");
        });

        // Clear cache when user roles/permissions change
        \App\Models\User::updated(function ($user) {
            if ($user->isDirty() && ($user->relationLoaded('roles') || $user->relationLoaded('permissions'))) {
                $this->clearPermissionCaches();
                logger()->info("User roles/permissions updated: {$user->id}, cleared permission caches");
            }
        });
    }

    protected function clearPermissionCaches(): void
    {
        try {
            // Clear Spatie permission cache
            app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();

            // Clear Laravel cache
            Artisan::call('permission:cache-reset');
            Artisan::call('cache:clear');

            // Clear specific cache stores if needed
            if (method_exists(app('cache')->store(), 'tags')) {
                app('cache')->tags('spatie.permission.cache')->flush();
            }
        } catch (\Exception $e) {
            logger()->error('Permission cache clear failed: ' . $e->getMessage());
        }
    }

    public function registerEventListeners()
    {
        /**
         * Auth Event Listeners.
         */
        // Event::listen(
        //     'App\Events\Auth\UserLoginSuccess',
        //     'App\Listeners\Auth\UpdateLoginData',
        //     'App\Listeners\Auth\SendPodcastNotification'
        // );
        /**
         * Frontend Event Listeners.
         */
        // Event::listen('App\Events\Frontend\UserRegistered',
        //     'App\Listeners\Frontend\UserRegistered\EmailNotificationOnUserRegistered'
        // );

        /**
         * Backend Event Listeners.
         */
        // Event::listen(
        //     'App\Events\Backend\UserCreated',
        //     'App\Listeners\Backend\UserCreated\UserCreatedProfileCreate',
        //     'App\Listeners\Backend\UserCreated\UserCreatedNotifySuperUser'
        // );

        // Event::listen(
        //     'App\Events\Backend\UserUpdated',
        //     'App\Listeners\Backend\UserUpdated\UserUpdatedNotifyUser'
        // );
    }
    /**
     * Restrict destructive commands in production.
     */
    private function configureCommands(): void
    {
        // if (App::environment('production')) {
        //     Artisan::command('migrate:fresh', function () {
        //         $this->error('The migrate:fresh command is disabled in production.');
        //         return 1;
        //     });

        //     Artisan::command('migrate:reset', function () {
        //         $this->error('The migrate:reset command is disabled in production.');
        //         return 1;
        //     });

        //     Artisan::command('migrate:rollback', function () {
        //         $this->error('The migrate:rollback command is disabled in production.');
        //         return 1;
        //     });

        //     Artisan::command('db:wipe', function () {
        //         $this->error('The db:wipe command is disabled in production');
        //         return 1;
        //     });

        //     Artisan::command('queue:restart', function () {
        //         $this->error('The queue:restart command is disabled in production');
        //         return 1;
        //     });

        //     Artisan::command('event:clear', function () {
        //         $this->error('The event:clear command is disabled in production');
        //         return 1;
        //     });
        // }
    }
}


<?php

namespace App\Http\Controllers\Backend;

use Exception;
use Carbon\Carbon;
use App\Models\Role;
use App\Models\User;
use App\Authorizable;
use App\Models\Permission;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use App\Models\UserProvider;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;
use App\Events\Backend\UserCreated;
use App\Events\Backend\UserUpdated;
use Illuminate\Support\Facades\Log;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Artisan;
use RealRashid\SweetAlert\Facades\Alert;
use App\Notifications\UserAccountCreated;

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;



class UserController extends Controller
{
    use Authorizable;

    public $module_title;

    public $module_name;

    public $module_path;

    public $module_icon;

    public $module_model;

    public function __construct()
    {
        // Page Title
        $this->module_title = 'Users';

        // module name
        $this->module_name = 'users';

        // directory path of the module
        $this->module_path = 'backend';

        // module icon
        $this->module_icon = 'fa-solid fa-user-group';

        // module model name, path
        $this->module_model = "App\Models\User";
    }

    /**
     * Retrieves the index page for the module.
     *
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function index()
    {

        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'List';

        $page_heading = ucfirst($module_title);
        $title = $page_heading . ' ' . ucfirst($module_action);

        $$module_name = $module_model::paginate();

        logUserAccess($module_title . ' ' . $module_action);

        return view(
            "{$module_path}.{$module_name}.index",
            compact('module_title', 'module_name', 'module_path', 'module_icon', 'module_action', 'module_name_singular', 'page_heading', 'title')
        );
    }

    public function index_data()
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'List';

        $$module_name = $module_model::select('id', 'name', 'username', 'email', 'email_verified_at', 'updated_at', 'status');

        $data = $$module_name;

        return Datatables::of($$module_name)
            ->addColumn('action', function ($data) {
                $module_name = $this->module_name;

                return view('backend.includes.user_actions', compact('module_name', 'data'));
            })
            ->addColumn('user_roles', function ($data) {
                $module_name = $this->module_name;

                return view('backend.includes.user_roles', compact('module_name', 'data'));
            })
            ->editColumn('name', '<strong>{{$name}}</strong>')
            ->editColumn('status', function ($data) {
                $return_data = $data->status_label;
                $return_data .= '<br>' . $data->confirmed_label;

                return $return_data;
            })
            ->editColumn('updated_at', function ($data) {
                $module_name = $this->module_name;

                $diff = Carbon::now()->diffInHours($data->updated_at);

                if ($diff < 25) {
                    return $data->updated_at->diffForHumans();
                }

                return $data->updated_at->isoFormat('LLLL');
            })
            ->rawColumns(['name', 'action', 'status', 'user_roles'])
            ->orderColumns(['id'], '-:column $1')
            ->make(true);
    }

    /**
     * Retrieves a list of items based on the search term.
     *
     * @param  Request  $request  The HTTP request object.
     * @return JsonResponse The JSON response containing the list of items.
     *
     * @throws None
     */
    public function index_list(Request $request)
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Index List';

        $page_heading = label_case($module_title);
        $title = $page_heading . ' ' . label_case($module_action);

        $term = trim($request->q);

        if (empty($term)) {
            return response()->json([]);
        }

        $query_data = $module_model::where('name', 'LIKE', "%{$term}%")->orWhere('email', 'LIKE', "%{$term}%")->limit(10)->get();

        $$module_name = [];

        foreach ($query_data as $row) {
            $$module_name[] = [
                'id' => $row->id,
                'text' => $row->name . ' (Email: ' . $row->email . ')',
            ];
        }

        logUserAccess($module_title . ' ' . $module_action);

        return response()->json($$module_name);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return Response
     */
    public function create()
    {

        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Create';

        $roles = Role::get();
        $permissions = Permission::select('name', 'id')->orderBy('id')->get();

        logUserAccess($module_title . ' ' . $module_action);

        return view(
            "{$module_path}.{$module_name}.create",
            compact('module_title', 'module_name', 'module_path', 'module_icon', 'module_action', 'module_name_singular', 'roles', 'permissions')
        );
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Contracts\View\View
     */

    public function store(Request $request)
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Details';

        // Validate input
        $validated_data = $request->validate([
            'first_name' => 'required|min:2|max:191',
            'last_name' => 'required|min:2|max:191',
            'email' => 'required|email:rfc|regex:/(.+)@(.+)\.(.+)/i|max:191|unique:users',
            'password' => 'required|confirmed|min:6',
            'roles' => 'nullable|array',
            'permissions' => 'nullable|array',
        ]);

        // Start a database transaction
        DB::beginTransaction();

        try {
            // Prepare data
            $data_array = Arr::except($validated_data, ['_token', 'roles', 'permissions', 'password_confirmation']);
            $data_array['name'] = $request->first_name . ' ' . $request->last_name;
            $data_array['password'] = Hash::make($request->password);

            if ($request->confirmed === 1) {
                $data_array['email_verified_at'] = Carbon::now();
            } else {
                $data_array['email_verified_at'] = null;
            }

            // Create a User
            $$module_name_singular = User::create($data_array);

            // Sync Roles
            $$module_name_singular->syncRoles($validated_data['roles'] ?? []);

            // Sync Permissions
            $$module_name_singular->syncPermissions($validated_data['permissions'] ?? []);

            // Set Username
            $id = $$module_name_singular->id;
            $username = config('app.initial_username') + $id;
            $$module_name_singular->username = $username;
            $$module_name_singular->save();

            // Trigger UserCreated event
            event(new UserCreated($$module_name_singular));

            // Send email credentials if requested
            if ($request->email_credentials == 1) {
                $data = ['password' => $request->password];
                $$module_name_singular->notify(new UserAccountCreated($data));
                Alert::toast('Account Credentials Sent to User.', 'success');
            }

            // Commit the transaction
            DB::commit();

            // Flash success message
            Alert::toast("New '" . Str::singular($module_title) . "' Created", 'success');

            // Log the action
            Log::info(label_case("{$module_title} {$module_action}") . ' | User:' . Auth::user()->name . ' (ID:' . Auth::user()->id . ')');

            // Clear cache
            Artisan::call('cache:clear');

            return redirect("admin/{$module_name}");
        } catch (\Exception $e) {
            // Rollback the transaction on error
            DB::rollBack();

            // Log the error
            Log::error("Error creating user: " . $e->getMessage());

            // Flash error message
            Alert::toast('Failed to create user!', 'error');

            return redirect()->back()->withInput()->withErrors(['error' => 'Failed to create user.']);
        }
    }
    public function createAssessors()
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_action = 'Register External Assessors';

        $roles = Role::get();
        $permissions = Permission::select('name', 'id')->orderBy('id')->get();

        logUserAccess($module_title . ' ' . $module_action);

        return view(
            "{$module_path}.{$module_name}.create_assessors",
            compact('module_title', 'module_name', 'module_path', 'module_icon', 'module_action', 'roles', 'permissions')
        );
    }


    public function storeAssessors(Request $request)
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Details';

        // Validate input
        $validated_data = $request->validate([
            'first_name' => ['required', 'string', 'regex:/^[A-Za-z]+$/', 'min:1', 'max:50'],
            'middle_name' => ['required', 'string', 'regex:/^[A-Za-z]+$/', 'min:1', 'max:50'],
            'last_name' => ['required', 'string', 'regex:/^[A-Za-z]+$/', 'min:1', 'max:50'],

            'email' => ['required', 'email:rfc', 'max:191', 'unique:users'],
            'password' => ['required', 'min:6'],

            'salutation' => ['required', 'in:Mr,Mrs,Miss,Ms,Dr,Prof,Eng,Hon,Rev'], // Add any more valid salutations

            'gender' => ['required', 'in:Male,Female'],

            'mobile' => ['required', 'regex:/^(?:\+251[1-9]\d{8}|0[1-9]\d{8})$/'], // Ensures it starts with +251 or 0 and follows Ethiopian number format

            'bio' => ['nullable', 'string'],
            'address' => ['required', 'string', 'max:255'],

            'degree_university' => ['required', 'string', 'max:191'],
            'degree_department' => ['required', 'string', 'max:191'],

            'masters_university' => ['nullable', 'string', 'max:191'],
            'masters_department' => ['nullable', 'string', 'max:191'],

            'phd_university' => ['nullable', 'string', 'max:191'],
            'phd_department' => ['nullable', 'string', 'max:191'],

            'roles' => ['nullable', 'array'],
            'permissions' => ['nullable', 'array'],
        ]);

        // Start a database transaction
        DB::beginTransaction();

        try {
            // Prepare data
            $data_array = Arr::except($validated_data, ['_token', 'roles', 'permissions']);
            $data_array['name'] = $request->salutation . ' ' . $request->first_name . ' ' . $request->middle_name . ' ' . $request->last_name;
            $data_array['password'] = Hash::make($request->password);

            if ($request->confirmed === 1) {
                $data_array['email_verified_at'] = Carbon::now();
            } else {
                $data_array['email_verified_at'] = null;
            }

            // Create a User
            $assessor = User::create($data_array);

            // Sync Roles
            $assessor->syncRoles(['assessor']);

            // Sync Permissions
            $assessor->syncPermissions($validated_data['permissions'] ?? []);

            // Set Username
            $id = $assessor->id;
            $username = config('app.initial_username') + $id;
            $assessor->username = $username;
            $assessor->save();

            // Send email credentials if requested
            if ($request->email_credentials == 1) {
                $assessor->notify(new UserAccountCreated(['password' => $request->password]));
                Alert::toast('Account Credentials Sent to User.', 'success');
            }

            // Commit the transaction
            DB::commit();

            // Flash success message
            Alert::toast('New Assessor created successfully! 🎉', 'success');

            // Log the action
            Log::info(label_case("{$module_title} {$module_action}") . ' | User:' . Auth::user()->name . ' (ID:' . Auth::user()->id . ')');

            // Clear cache
            Artisan::call('cache:clear');

            return redirect("admin/{$module_name}");
        } catch (\Exception $e) {
            // Rollback the transaction on error
            DB::rollBack();

            // Log the error
            Log::error("Error creating assessor: " . $e->getMessage());

            // Flash error message
            Alert::toast('Failed to create assessor!', 'error');

            return redirect()->back()->withInput()->withErrors(['error' => 'Failed to create assessor.']);
        }
    }



    public function createAccreditationExperts()
    {

        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_action = 'Register Accreditation experts';

        $roles = Role::get();
        $permissions = Permission::select('name', 'id')->orderBy('id')->get();

        logUserAccess($module_title . ' ' . $module_action);

        return view(
            "{$module_path}.{$module_name}.create_accreditation_experts",
            compact('module_title', 'module_name', 'module_path', 'module_icon', 'module_action', 'roles', 'permissions')
        );
    }


    public function storeAccreditationExperts(Request $request)
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Details';

        // Validate input
        $validated_data = $request->validate([
            'first_name' => ['required', 'string', 'regex:/^[A-Za-z]+$/', 'min:1', 'max:50'],
            'last_name' => ['required', 'string', 'regex:/^[A-Za-z]+$/', 'min:1', 'max:50'],
            'email' => 'required|email:rfc|regex:/(.+)@(.+)\.(.+)/i|max:191|unique:users',
            'mobile' => ['required', 'regex:/^(?:\+251[1-9]\d{8}|0[1-9]\d{8})$/'], // Ensures it starts with +251 or 0 and follows Ethiopian number format
            'password' => 'required|confirmed|min:6',
            'roles' => 'nullable|array',
            'permissions' => 'nullable|array',
        ]);

        // Start a database transaction
        DB::beginTransaction();

        try {
            // Prepare data
            $data_array = Arr::except($validated_data, ['_token', 'roles', 'permissions', 'password_confirmation']);
            $data_array['name'] = $request->first_name . ' ' . $request->last_name;
            $data_array['password'] = Hash::make($request->password);

            if ($request->confirmed === 1) {
                $data_array['email_verified_at'] = Carbon::now();
            } else {
                $data_array['email_verified_at'] = null;
            }

            // Create a User
            $$module_name_singular = User::create($data_array);

            // Sync Roles
            $$module_name_singular->syncRoles(['accreditation expert', 'assessor']);

            // Sync Permissions
            $$module_name_singular->syncPermissions($validated_data['permissions'] ?? []);

            // Set Username
            $id = $$module_name_singular->id;
            $username = config('app.initial_username') + $id;
            $$module_name_singular->username = $username;
            $$module_name_singular->save();

            // Send email credentials if requested
            if ($request->email_credentials == 1) {
                $data = ['password' => $request->password];
                $$module_name_singular->notify(new UserAccountCreated($data));
                Alert::toast('Account Credentials Sent to User.', 'success');
            }

            // Commit the transaction
            DB::commit();

            // Flash success message
            Alert::toast('New Accreditation Expert created successfully! 🎉', 'success');

            // Log the action
            Log::info(label_case("{$module_title} {$module_action}") . ' | User:' . Auth::user()->name . ' (ID:' . Auth::user()->id . ')');

            // Clear cache
            Artisan::call('cache:clear');

            return redirect("admin/{$module_name}");
        } catch (\Exception $e) {
            // Rollback the transaction on error
            DB::rollBack();

            // Log the error
            Log::error("Error creating accreditation expert: " . $e->getMessage());

            // Flash error message
            Alert::toast('Failed to create accreditation expert!', 'error');

            return redirect()->back()->withInput()->withErrors(['error' => 'Failed to create accreditation expert.']);
        }
    }

    public function show($uuid)
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);
        $module_action = 'Show';

        $$module_name_singular = $module_model::where('uuid', $uuid)->firstOrFail();
        $id = $$module_name_singular->id;

        logUserAccess(__METHOD__ . " | {$$module_name_singular->name} ($id)");

        return view(
            "{$module_path}.{$module_name}.show",
            compact('module_title', 'module_name', 'module_path', 'module_icon', 'module_action', 'module_name_singular', "{$module_name_singular}")
        );
    }


    /**
     * Updates the password for a user.
     *
     * @param  int  $id  The ID of the user whose password will be changed.
     * @return \Illuminate\Contracts\View\View The view for the "Change Password" page.
     *
     * @throws \Illuminate\Database\Eloquent\ModelNotFoundException If the user cannot be found.
     */


    public function changePassword($uuid)
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Change Password';

        $page_heading = label_case($module_title);
        $title = $page_heading . ' ' . label_case($module_action);

        if (! auth()->user()->can('edit_users')) {
            $id = auth()->user()->id;
        }

        $$module_name_singular = $module_model::where('uuid', $uuid)->firstOrFail();
        $id = $$module_name_singular->id;


        logUserAccess("{$module_title} {$module_action} {$$module_name_singular->name} ($id)");

        return view(
            "{$module_path}.{$module_name}.changePassword",
            compact('module_title', 'module_name', 'module_path', 'module_icon', 'module_action', 'module_name_singular', "{$module_name_singular}")
        );
    }




    /**
     * Updates the password for a user.
     *
     * @param  Request  $request  The request object containing the new password.
     * @param  int  $id  The ID of the user whose password is being updated.
     * @return \Illuminate\Http\RedirectResponse The response object redirecting to the admin module.
     *
     * @throws \Illuminate\Validation\ValidationException If the validation fails.
     * @throws \Illuminate\Database\Eloquent\ModelNotFoundException If the user with the given ID is not found.
     */


    public function changePasswordUpdate(Request $request, $id)
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Change Password Update';

        // Validate input
        $request->validate([
            'password' => 'required|confirmed|min:6',
        ]);

        // Ensure only authorized users can change passwords
        if (!auth()->user()->can('edit_users')) {
            $id = auth()->user()->id;
        }

        // Start a database transaction
        DB::beginTransaction();

        try {
            // Find the user
            $$module_name_singular = User::findOrFail($id);

            // Update the password
            $request_data = $request->only('password');
            $request_data['password'] = Hash::make($request_data['password']);
            $$module_name_singular->update($request_data);

            // Commit the transaction
            DB::commit();

            // Flash success message
            Alert::toast(Str::singular($module_title) . "' Updated Successfully", 'success');

            // Log the action
            Log::info("{$module_title} {$module_action} {$$module_name_singular->name} ($id)");

            return redirect("admin/{$module_name}/{$id}");
        } catch (\Exception $e) {
            // Rollback the transaction on error
            DB::rollBack();

            // Log the error
            Log::error("Error updating password: " . $e->getMessage());

            // Flash error message
            Alert::toast('Failed to update password!', 'error');

            return redirect()->back()->withInput()->withErrors(['error' => 'Failed to update password.']);
        }
    }

    //USER SELF CHANGE THEIR PASSWORD AFTER LOG IN
    public function userchangePassword()
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Change Password';

        $page_heading = label_case($module_title);
        $title = $page_heading . ' ' . label_case($module_action);

        // Get the currently authenticated user
        $id = auth()->user()->id;
        $$module_name_singular = $module_model::findOrFail($id);

        logUserAccess("{$module_title} {$module_action} {$$module_name_singular->name} ($id)");

        return view(
            "{$module_path}.{$module_name}.userchangePassword",
            compact('module_title', 'module_name', 'module_path', 'module_icon', 'module_action', 'module_name_singular', "{$module_name_singular}")
        );
    }

    public function userchangePasswordUpdate(Request $request)
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Change Password Update';

        // Validate input
        $request->validate([
            'password' => 'required|confirmed|min:6',
        ]);

        // Start a database transaction
        DB::beginTransaction();

        try {
            // Get the currently authenticated user
            $id = auth()->user()->id;
            $$module_name_singular = User::findOrFail($id);

            // Update the password
            $request_data = $request->only('password');
            $request_data['password'] = Hash::make($request_data['password']);
            $$module_name_singular->update($request_data);

            // Commit the transaction
            DB::commit();

            // Flash success message
            Alert::toast(Str::singular($module_title) . "' You password is Updated Successfully", 'success');

            // Log the action
            Log::info("{$module_title} {$module_action} {$$module_name_singular->name} ($id)");

            return redirect()->route('backend.dashboard');
        } catch (\Exception $e) {
            // Rollback the transaction on error
            DB::rollBack();

            // Log the error
            Log::error("Error updating password: " . $e->getMessage());

            // Flash error message
            Alert::toast('Failed to update password!', 'error');

            return redirect()->back()->withInput()->withErrors(['error' => 'Failed to update password.']);
        }
    }


    /**
     * Edit a record in the database.
     *
     * @param  int  $id  The ID of the record to be edited.
     * @return \Illuminate\View\View The view for editing the record.
     *
     * @throws \Illuminate\Auth\Access\AuthorizationException If the user does not have the permission to edit users.
     */
    public function edit($uuid)
    {
        // If the user doesn't have permission, default to their own account
        if (!auth()->user()->can('edit_users')) {
            $uuid = auth()->user()->uuid;
        }

        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Edit';

        // Get the user by UUID
        $$module_name_singular = $module_model::where('uuid', $uuid)->firstOrFail();
        $id = $$module_name_singular->id;

        // Get user roles and permissions
        $userRoles = $$module_name_singular->roles->pluck('name')->all();
        $userPermissions = $$module_name_singular->permissions->pluck('name')->all();

        // Load all available roles and permissions
        $roles = Role::get();
        $permissions = Permission::select('name', 'id')->orderBy('id')->get();

        // Log access
        logUserAccess("{$module_title} {$module_action} {$$module_name_singular->name} ($id)");

        return view(
            "{$module_path}.{$module_name}.edit",
            compact(
                'module_title',
                'module_name',
                'module_path',
                'module_icon',
                'module_action',
                'module_name_singular',
                "{$module_name_singular}",
                'uuid',
                'roles',
                'permissions',
                'userRoles',
                'userPermissions'
            )
        );
    }


    /**
     * Updates a user with the given ID.
     *
     * @param  Request  $request  The HTTP request object.
     * @param  int  $id  The ID of the user to update.
     * @return RedirectResponse The redirect response to the admin module.
     *
     * @throws NotFoundHttpException If the authenticated user does not have the 'edit_users' permission.
     */


    public function update(Request $request, $id)
    {
        if (!auth()->user()->can('edit_users')) {
            $id = auth()->user()->id;
        }

        $validated_data = $request->validate([
            'first_name' => 'required|min:3|max:191',
            'last_name' => 'required|min:3|max:191',
            'email' => 'required|email:rfc|regex:/(.+)@(.+)\.(.+)/i|max:191|unique:users,email,' . $id,
            'roles' => 'nullable|array',
            'permissions' => 'nullable|array',
        ]);

        $validated_data['name'] = $validated_data['first_name'] . ' ' . $validated_data['last_name'];

        DB::beginTransaction();

        try {
            $user = User::findOrFail($id);

            // Clear cache before changes
            app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();

            // Update user data
            $user->update($request->except('roles', 'permissions'));

            // Handle roles - use existing roles if none in request
            $roles = $request->has('roles') ? $request->roles : $user->getRoleNames()->toArray();
            $user->syncRoles($roles);

            // Handle permissions - only update if explicitly provided
            if ($request->has('permissions')) {
                $user->syncPermissions($request->permissions);
            }

            DB::commit();

            // Final cache clear
            Artisan::call('permission:cache-reset');

            Alert::toast('User updated successfully!', 'success');
            return redirect()->route('backend.users.index');
        } catch (\Exception $e) {
            DB::rollBack();
            Alert::toast('Error: ' . $e->getMessage(), 'error');
            return back()->withInput();
        }
    }

    /**
     * Deletes a user by their ID.
     *
     * @param  int  $id  The ID of the user to be deleted.
     * @return Illuminate\Http\RedirectResponse
     *
     * @throws Illuminate\Database\Eloquent\ModelNotFoundException If the user with the given ID is not found.
     */


    public function destroy($uuid)
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Destroy';

        // Find the user by UUID
        $$module_name_singular = $module_model::where('uuid', $uuid)->firstOrFail();
        $id = $$module_name_singular->id;

        // Prevent deletion of specific users
        if (auth()->user()->id === $id || $id === 1) {
            Alert::toast('You cannot delete this user!', 'warning');
            Log::notice("{$module_title} {$module_action} Failed! User ID: {$id}");
            return redirect()->back();
        }

        // Ensure only authorized users can delete
        if (!auth()->user()->can('delete_users')) {
            abort(403);
        }

        // Start a database transaction
        DB::beginTransaction();

        try {
            // Delete the user
            $$module_name_singular->delete();

            // Commit the transaction
            DB::commit();

            // Trigger UserUpdated event
            event(new UserUpdated($$module_name_singular));

            // Flash success message
            Alert::toast($$module_name_singular->name . ' User Successfully Deleted!', 'success');

            // Log the action
            Log::info("{$module_title} {$module_action} {$$module_name_singular->name} ($id)");

            return redirect("admin/{$module_name}");
        } catch (\Exception $e) {
            // Rollback the transaction on error
            DB::rollBack();

            // Log the error
            Log::error("Error deleting user: " . $e->getMessage());

            // Flash error message
            Alert::toast('Failed to delete user!', 'error');

            return redirect()->back();
        }
    }

    /**
     * Retrieves and displays a list of deleted records for the specified module.
     *
     * @return \Illuminate\View\View the view for the list of deleted records
     */
    public function trashed()
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Trash List';

        $$module_name = $module_model::onlyTrashed()->orderBy('deleted_at', 'desc')->paginate();

        logUserAccess($module_title . ' ' . $module_action);

        logUserAccess("{$module_title} {$module_action}");

        return view(
            "{$module_path}.{$module_name}.trash",
            compact('module_title', 'module_name', 'module_path', "{$module_name}", 'module_icon', 'module_name_singular', 'module_action')
        );
    }

    /**
     * Restores a record in the database.
     *
     * @param  int  $id  The ID of the record to be restored.
     * @return Illuminate\Http\RedirectResponse The redirect response to the admin module page.
     */


    public function restore($id)
    {
        // Ensure only authorized users can restore
        if (!auth()->user()->can('restore_users')) {
            abort(403);
        }

        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Restore';

        // Start a database transaction
        DB::beginTransaction();

        try {
            // Find the user (including soft-deleted)
            $$module_name_singular = $module_model::withTrashed()->findOrFail($id);

            // Restore the user
            $$module_name_singular->restore();

            // Commit the transaction
            DB::commit();

            // Trigger UserUpdated event
            event(new UserUpdated($$module_name_singular));

            // Flash success message
            Alert::toast($$module_name_singular->name . ' Successfully Restored!', 'success');

            // Log the action
            Log::info("{$module_title} {$module_action} {$$module_name_singular->name} ($id)");

            return redirect("admin/{$module_name}");
        } catch (\Exception $e) {
            // Rollback the transaction on error
            DB::rollBack();

            // Log the error
            Log::error("Error restoring user: " . $e->getMessage());

            // Flash error message
            Alert::toast('Failed to restore user!', 'error');

            return redirect()->back();
        }
    }

    /**
     * Block a user.
     *
     * @param  int  $id  The ID of the user to block.
     * @return Illuminate\Http\RedirectResponse
     *
     * @throws Exception There was a problem updating this user. Please try again.
     */


    public function block($uuid)
    {
        // Ensure only authorized users can block
        if (!auth()->user()->can('delete_users')) {
            abort(403);
        }

        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Block';

        // Resolve the user by UUID (include soft deleted users)
        $$module_name_singular = $module_model::withTrashed()->where('uuid', $uuid)->firstOrFail();
        $id = $$module_name_singular->id;

        // Prevent blocking specific users
        if (auth()->user()->id == $id || $id == 1) {
            Alert::toast("You cannot block this user!", 'warning');
            Log::notice("{$module_title} {$module_action} Failed | User ID: {$id}");
            return redirect()->back();
        }

        // Start a database transaction
        DB::beginTransaction();

        try {
            // Block the user (e.g., setting status to 'blocked')
            $$module_name_singular->status = 2;
            $$module_name_singular->save();

            // Commit the transaction
            DB::commit();

            // Trigger UserUpdated event
            event(new UserUpdated($$module_name_singular));

            // Flash success message
            Alert::toast($$module_name_singular->name . ' User Successfully Blocked!', 'success');

            // Log the action
            Log::info("{$module_title} {$module_action} {$$module_name_singular->name} ($id)");

            return redirect()->back();
        } catch (\Exception $e) {
            // Rollback the transaction on error
            DB::rollBack();

            // Log the error
            Log::error("Error blocking user: " . $e->getMessage());

            // Flash error message
            Alert::toast('Failed to block user!', 'error');

            return redirect()->back();
        }
    }


    /**
     * Unblock a user.
     *
     * @param  int  $id  The ID of the user to unblock.
     * @return RedirectResponse The redirect back to the previous page.
     *
     * @throws Exception If there is a problem updating the user.
     */


    public function unblock($uuid)
    {
        // Ensure only authorized users can unblock
        if (!auth()->user()->can('delete_users')) {
            abort(403);
        }

        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Unblock';

        // Resolve the user by UUID (with soft-deleted included)
        $$module_name_singular = $module_model::withTrashed()->where('uuid', $uuid)->firstOrFail();
        $id = $$module_name_singular->id;

        // Prevent unblocking specific users
        if (auth()->user()->id == $id || $id == 1) {
            Alert::toast("You cannot unblock this user!", 'warning');
            Log::notice("{$module_title} {$module_action} Failed | User ID: {$id}");
            return redirect()->back();
        }

        // Start a database transaction
        DB::beginTransaction();

        try {
            // Unblock the user (e.g., setting status to 'active')
            $$module_name_singular->status = 1;
            $$module_name_singular->save();

            // Commit the transaction
            DB::commit();

            // Trigger UserUpdated event
            event(new UserUpdated($$module_name_singular));

            // Flash success message
            Alert::toast($$module_name_singular->name . ' User Successfully Unblocked!', 'success');

            // Log the action
            Log::info("{$module_title} {$module_action} {$$module_name_singular->name} ($id)");

            return redirect()->back();
        } catch (\Exception $e) {
            // Rollback the transaction on error
            DB::rollBack();

            // Log the error
            Log::error("Error unblocking user: " . $e->getMessage());

            // Flash error message
            Alert::toast('Failed to unblock user!', 'error');

            return redirect()->back();
        }
    }

    /**
     * Destroy a user provider.
     *
     * @param  Request  $request  The request object.
     * @return void
     *
     * @throws Exception There was a problem updating this user. Please try again.
     */
    public function userProviderDestroy(Request $request)
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $user_provider_id = $request->user_provider_id;
        $user_id = $request->user_id;

        if (! $user_provider_id > 0 || ! $user_id > 0) {
            flash('Invalid Request. Please try again.')->error()->important();

            return redirect()->back();
        }
        $user_provider = UserProvider::findOrFail($user_provider_id);

        if ($user_id == $user_provider->user->id) {
            $user_provider->delete();

            flash('Unlinked from User, "' . $user_provider->user->name . '"!')->success()->important();

            return redirect()->back();
        }
        flash('Request rejected. Please contact the Administrator!')->warning()->important();

        event(new UserUpdated($$module_name_singular));

        throw new Exception('There was a problem updating this user. Please try again.');
    }

    /**
     * Resends the email confirmation for a user.
     *
     * @param  int  $id  The ID of the user.
     * @return \Illuminate\Http\RedirectResponse Returns a redirect response.
     *
     * @throws \Illuminate\Http\Client\RequestException If the user is not authorized to resend the email confirmation.
     */


    public function emailConfirmationResend($id)
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Email Confirmation Resend';

        // Ensure only authorized users can resend email confirmation
        if (!auth()->user()->can('edit_users')) {
            $id = auth()->user()->id;
        }

        // Find the user
        $user = User::where('id', '=', $id)->first();

        if ($user) {
            if ($user->email_verified_at === null) {
                // Log the action
                Log::info($user->name . ' (' . $user->id . ') - User Requested for Email Verification.');

                // Send Email To Registered User
                $user->sendEmailVerificationNotification();

                // Flash success message
                Alert::toast('Email Sent! Please Check Your Inbox.', 'success');

                return redirect()->back();
            }

            // Log if email is already verified
            Log::info($user->name . ' (' . $user->id . ') - User Requested but Email already verified at ' . $user->email_verified_at);

            // Flash message for already verified email
            Alert::toast($user->name . ', You already confirmed your email address at ' . $user->email_verified_at->isoFormat('LL'), 'success');

            return redirect()->back();
        }

        // Flash error message if user not found
        Alert::toast('User not found!', 'error');
        return redirect()->back();
    }
}



@extends('backend.layouts.app')

@section('title')
    {{ $$module_name_singular->name }} - {{ $$module_name_singular->username }} - {{ __($module_action) }}
    {{ __($module_title) }}
@endsection

@section('breadcrumbs')
    <x-backend.breadcrumbs>
        <x-backend.breadcrumb-item route='{{ route("backend.$module_name.index") }}' icon="{{ $module_icon }}">
            {{ $$module_name_singular->name }}
        </x-backend.breadcrumb-item>

        <x-backend.breadcrumb-item type="active">
            {{ __($module_title) }}
            {{ __($module_action) }}
        </x-backend.breadcrumb-item>
    </x-backend.breadcrumbs>
@endsection

@section('content')
    <x-backend.layouts.edit :data="$user">
        <x-backend.section-header>
            <i class="{{ $module_icon }}"></i>
            {{ $$module_name_singular->name }}
            <small class="text-muted">{{ __($module_title) }} {{ __($module_action) }}</small>

            <x-slot name="toolbar">
                <x-backend.buttons.return-back :small="true" />
                <x-backend.buttons.show class="ms-1"
                    title="{{ __('Show') }} {{ ucwords(Str::singular($module_name)) }}" route='{!! route("backend.$module_name.show", $$module_name_singular) !!}'
                    :small="true" />
            </x-slot>
        </x-backend.section-header>

        <div class="row mt-4">
            <div class="col">
                {{ html()->modelForm($user, 'PATCH', route('backend.users.update', $user->id))->class('form-horizontal')->acceptsFiles()->open() }}

                <div class="form-group row">
                    {{ html()->label(__('labels.backend.users.fields.avatar'))->class('col-md-2 form-label')->for('name') }}

                    <div class="col-md-5 mb-3">
                        <img class="user-profile-image img-fluid img-thumbnail"
                            src="{{ asset($$module_name_singular->avatar) }}"
                            style="max-height: 200px; max-width: 200px" />
                    </div>
                    <div class="col-md-5 mb-3">
                        <input id="file-multiple-input" name="avatar" type="file" multiple="" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-12 col-sm-6 mb-3">
                        <div class="form-group">
                            <?php
                            $field_name = 'first_name';
                            $field_lable = __(label_case($field_name));
                            $field_placeholder = $field_lable;
                            $required = 'required';
                            ?>

                            {{ html()->label($field_lable, $field_name)->class('form-label') }}
                            {!! field_required($required) !!}
                            {{ html()->text($field_name)->placeholder($field_placeholder)->class('form-control')->attributes(["$required"]) }}
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 mb-3">
                        <div class="form-group">
                            <?php
                            $field_name = 'last_name';
                            $field_lable = __(label_case($field_name));
                            $field_placeholder = $field_lable;
                            $required = 'required';
                            ?>

                            {{ html()->label($field_lable, $field_name)->class('form-label') }}
                            {!! field_required($required) !!}
                            {{ html()->text($field_name)->placeholder($field_placeholder)->class('form-control')->attributes(["$required"]) }}
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 mb-3">
                        <div class="form-group">
                            <?php
                            $field_name = 'email';
                            $field_lable = __(label_case($field_name));
                            $field_placeholder = $field_lable;
                            $required = 'required';
                            ?>

                            {{ html()->label($field_lable, $field_name)->class('form-label') }}
                            {!! field_required($required) !!}
                            {{ html()->email($field_name)->placeholder($field_placeholder)->class('form-control')->attributes(["$required"]) }}
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 mb-3">
                        <div class="form-group">
                            <?php
                            $field_name = 'mobile';
                            $field_lable = __(label_case($field_name));
                            $field_placeholder = $field_lable;
                            $required = '';
                            ?>

                            {{ html()->label($field_lable, $field_name)->class('form-label') }}
                            {!! field_required($required) !!}
                            {{ html()->text($field_name)->placeholder($field_placeholder)->class('form-control')->attributes(["$required"]) }}
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12 col-sm-6 mb-3">
                        <div class="form-group">
                            <?php
                            $field_name = 'gender';
                            $field_lable = __(label_case($field_name));
                            $field_placeholder = '-- Select an option --';
                            $required = '';
                            $select_options = [
                                'Female' => 'Female',
                                'Male' => 'Male',
                                'Other' => 'Other',
                            ];
                            ?>

                            {{ html()->label($field_lable, $field_name)->class('form-label') }}
                            {!! field_required($required) !!}
                            {{ html()->select($field_name, $select_options)->placeholder($field_placeholder)->class('form-select')->attributes(["$required"]) }}
                        </div>
                    </div>

                    <div class="col-12 col-sm-6 mb-3">
                        <div class="form-group">
                            <?php
                            $field_name = 'date_of_birth';
                            $field_lable = __(label_case($field_name));
                            $field_placeholder = $field_lable;
                            $required = '';
                            ?>

                            {{ html()->label($field_lable, $field_name)->class('form-label') }}
                            {!! field_required($required) !!}
                            {{ html()->date($field_name)->placeholder($field_placeholder)->class('form-control')->attributes(["$required"]) }}
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12 col-sm-6 mb-3">
                        <div class="form-group">
                            <?php
                            $field_name = 'address';
                            $field_lable = __(label_case($field_name));
                            $field_placeholder = $field_lable;
                            $required = '';
                            ?>

                            {{ html()->label($field_lable, $field_name)->class('form-label') }}
                            {!! field_required($required) !!}
                            {{ html()->textarea($field_name)->placeholder($field_placeholder)->class('form-control')->attributes(["$required"]) }}
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 mb-3">
                        <div class="form-group">
                            <?php
                            $field_name = 'bio';
                            $field_lable = __(label_case($field_name));
                            $field_placeholder = $field_lable;
                            $required = '';
                            ?>

                            {{ html()->label($field_lable, $field_name)->class('form-label') }}
                            {!! field_required($required) !!}
                            {{ html()->textarea($field_name)->placeholder($field_placeholder)->class('form-control')->attributes(["$required"]) }}
                        </div>
                    </div>
                </div>

                @php
                    $socialFieldsNames = $$module_name_singular->socialFieldsNames();
                @endphp

                <div class="row">
                    @foreach ($$module_name_singular->socialFieldsNames() as $item)
                        <div class="col-12 col-sm-6 mb-3">
                            <div class="form-group">
                                <?php
                                $field_name = 'social_profiles[' . $item . ']';
                                $field_lable = label_case($item);
                                $field_placeholder = $field_lable;
                                $required = '';
                                ?>

                                {{ html()->label($field_lable, $field_name)->class('form-label') }}
                                {!! field_required($required) !!}
                                {{ html()->text($field_name)->placeholder($field_placeholder)->class('form-control')->attributes(["$required"]) }}
                            </div>
                        </div>
                    @endforeach
                </div>

                <div class="row mb-3">
                    <?php
                    $field_name = 'password';
                    $field_lable = __('labels.backend.users.fields.password');
                    $field_placeholder = $field_lable;
                    $required = 'required';
                    ?>

                    <div class="col-12 col-sm-2">
                        <div class="form-group">
                            {{ html()->label($field_lable, $field_name)->class('form-label') }}
                            {!! field_required($required) !!}
                        </div>
                    </div>
                    <div class="col-12 col-sm-10">
                        <div class="form-group">
                            <a class="btn btn-outline-primary btn-sm"
                                href="{{ route('backend.users.changePassword', $user->id) }}">
                                <i class="fas fa-key"></i>
                                Change password
                            </a>
                        </div>
                    </div>
                </div>

                <div class="row mb-3">
                    <?php
                    $field_name = 'confirmed';
                    $field_lable = __('labels.backend.users.fields.confirmed');
                    $field_placeholder = $field_lable;
                    $required = '';
                    ?>

                    <div class="col-12 col-sm-2">
                        <div class="form-group">
                            {{ html()->label($field_lable, $field_name)->class('form-label') }}
                            {!! field_required($required) !!}
                        </div>
                    </div>
                    <div class="col-12 col-sm-10">
                        <div class="form-group">
                            @if ($user->email_verified_at == null)
                                <a class="btn btn-outline-primary btn-sm" data-toggle="tooltip"
                                    href="{{ route('backend.users.emailConfirmationResend', $user->id) }}"
                                    title="Send Confirmation Email">
                                    <i class="fas fa-envelope"></i>
                                    Send Confirmation Email
                                </a>
                            @else
                                {!! $user->confirmed_label !!}
                            @endif
                        </div>
                    </div>
                </div>

                <div class="row mb-3">
                    <?php
                    $field_name = 'social';
                    $field_lable = __('labels.backend.users.fields.social');
                    $field_placeholder = $field_lable;
                    $required = '';
                    ?>

                    <div class="col-12 col-sm-2">
                        <div class="form-group">
                            {{ html()->label($field_lable, $field_name)->class('form-label') }}
                            {!! field_required($required) !!}
                        </div>
                    </div>
                    <div class="col-12 col-sm-10">
                        <div class="form-group">
                            @forelse ($user->providers as $provider)
                                <li>
                                    <i class="fab fa-{{ $provider->provider }} fa-fw"></i>
                                    {{ label_case($provider->provider) }}
                                </li>
                            @empty
                                {{ __('No social profile added!') }}
                            @endforelse
                        </div>
                    </div>
                </div>

                @can('edit_users_permissions')
                    <div class="form-group row mb-3">
                        {{ html()->label(__('Abilities'))->class('col-sm-2 form-label') }}
                        <div class="col">
                            <div class="row">
                                <div class="col-sm-6 mb-3">
                                    <div class="card card-accent-primary">
                                        <div class="card-header">
                                            @lang('Roles')
                                        </div>
                                        <div class="card-body">
                                            @if ($roles->count())
                                                @foreach ($roles as $role)
                                                    <div class="card mb-3">
                                                        <div class="card-header">
                                                            <div class="checkbox">
                                                                <div class="form-check">
                                                                    <input class="form-check-input"
                                                                        id="{{ 'role-' . $role->id }}" name="roles[]"
                                                                        type="checkbox" value="{{ $role->name }}"
                                                                        {{ in_array($role->name, $userRoles) ? 'checked' : '' }} />
                                                                    <label class="form-check-label"
                                                                        for="{{ 'role-' . $role->id }}">
                                                                        {{ label_case($role->name) . ' (' . $role->name . ')' }}
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="card-body">
                                                            @if ($role->id != 1)
                                                                @if ($role->permissions->count())
                                                                    @foreach ($role->permissions as $permission)
                                                                        <i class="far fa-check-circle fa-fw mr-1"></i>
                                                                        &nbsp;{{ $permission->name }}&nbsp;
                                                                    @endforeach
                                                                @else
                                                                    @lang('None')
                                                                @endif
                                                            @else
                                                                @lang('All Permissions')
                                                            @endif
                                                        </div>
                                                    </div>
                                                @endforeach
                                            @endif
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6 mb-3">
                                    <div class="card card-accent-info">
                                        <div class="card-header">
                                            @lang('Permissions')
                                        </div>
                                        <div class="card-body">
                                            @if ($permissions->count())
                                                @foreach ($permissions as $permission)
                                                    <div class="mb-2">
                                                        <input class="form-check-input"
                                                            id="{{ 'permission-' . $permission->id }}" name="permissions[]"
                                                            type="checkbox" value="{{ $permission->name }}"
                                                            {{ in_array($permission->name, $userPermissions) ? 'checked' : '' }} />
                                                        <label class="form-check-label"
                                                            for="{{ 'permission-' . $permission->id }}">
                                                            {{ label_case($permission->name) . ' (' . $permission->name . ')' }}
                                                        </label>
                                                    </div>
                                                @endforeach
                                            @endif
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                @endcan

                <div class="row">
                    <div class="col-4 mb-3">
                        <div class="form-group">
                            <x-backend.buttons.save />
                        </div>
                    </div>

                    <div class="col-8 mb-3">
                        <div class="float-end">
                            @if ($$module_name_singular->status != 2 && $$module_name_singular->id != 1)
                                <a class="btn btn-danger" data-method="PATCH" data-token="{{ csrf_token() }}"
                                    data-toggle="tooltip" data-confirm="Are you sure?"
                                    href="{{ route('backend.users.block', $uuid) }}"
                                    title="{{ __('labels.backend.block') }}">
                                    <i class="fas fa-ban"></i>
                                </a>
                            @endif

                            @if ($$module_name_singular->status == 2)
                                <a class="btn btn-info" data-method="PATCH" data-token="{{ csrf_token() }}"
                                    data-toggle="tooltip" data-confirm="Are you sure?"
                                    href="{{ route('backend.users.unblock', $$module_name_singular) }}"
                                    title="{{ __('labels.backend.unblock') }}">
                                    <i class="fas fa-check"></i>
                                    Unblock
                                </a>
                            @endif

                            @if ($$module_name_singular->email_verified_at == null)
                                <a class="btn btn-primary" data-toggle="tooltip"
                                    href="{{ route('backend.users.emailConfirmationResend', $$module_name_singular->id) }}"
                                    title="Send Confirmation Email">
                                    <i class="fas fa-envelope"></i>
                                </a>
                            @endif

                            @if ($$module_name_singular->id != 1)
                                <a class="btn btn-danger" data-method="DELETE" data-token="{{ csrf_token() }}"
                                    data-toggle="tooltip"
                                    href="{{ route("backend.$module_name.destroy", $$module_name_singular) }}"
                                    title="{{ __('labels.backend.delete') }}">
                                    <i class="fas fa-trash-alt"></i>
                                    Delete
                                </a>
                            @endif

                            <x-backend.buttons.return-back>@lang('Cancel')</x-backend.buttons.return-back>
                        </div>
                    </div>
                </div>
                {{ html()->closeModelForm() }}
            </div>
            <!--/.col-->
        </div>
    </x-backend.layouts.edit>
@endsection


// Add this at the bottom of your edit.blade.php
@section('scripts')
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');

            form.addEventListener('submit', function(e) {
                // Ensure all role checkboxes are submitted
                document.querySelectorAll('input[name="roles[]"]').forEach(checkbox => {
                    if (!checkbox.checked) {
                        // Create a hidden input for unchecked boxes
                        const hidden = document.createElement('input');
                        hidden.type = 'hidden';
                        hidden.name = 'roles[]';
                        hidden.value = checkbox.value;
                        hidden.disabled = true;
                        form.appendChild(hidden);
                    }
                });
            });
        });
    </script>
@endsection
