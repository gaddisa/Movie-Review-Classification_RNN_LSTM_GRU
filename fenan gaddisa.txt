<?php

namespace App\Livewire;

use App\Models\User;
use Livewire\Component;
use Livewire\WithPagination;
use Spatie\Permission\Models\Role;

class UsersIndex extends Component
{
    use WithPagination;

    public $searchTerm = '';
    public $roleFilter = '';
    public $perPage = 10; // Explicit pagination setting

    protected $paginationTheme = 'bootstrap';

    // Reset page when filters change
    public function updatingSearchTerm() { $this->resetPage(); }
    public function updatingRoleFilter() { $this->resetPage(); }
    public function updatingPerPage() { $this->resetPage(); }

    public function render()
    {
        $query = User::query()
            ->when($this->searchTerm, function ($query) {
                $query->where(function($q) {
                    $q->where('name', 'like', '%'.$this->searchTerm.'%')
                      ->orWhere('email', 'like', '%'.$this->searchTerm.'%');
                });
            })
            ->when($this->roleFilter, function ($query) {
                $query->whereHas('roles', function($q) {
                    $q->where('name', $this->roleFilter);
                });
            })
            ->orderBy('id', 'desc');

        // Optimized eager loading
        $users = $query->with([
            'roles' => fn($q) => $q->select('id', 'name'),
            'permissions' => fn($q) => $q->select('id', 'name'),
            'providers' => fn($q) => $q->select('user_id', 'provider')
        ])->paginate($this->perPage);

        $roles = Role::all(['id', 'name']);

        return view('livewire.users-index', compact('users', 'roles'));
    }
}


<?php

namespace App\Livewire;

use App\Models\User;
use Livewire\Component;
use Livewire\WithPagination;
use Spatie\Permission\Models\Role;

class UsersIndex extends Component
{
    use WithPagination;

    public $searchTerm = '';
    public $roleFilter = '';

    protected $paginationTheme = 'bootstrap';

    // Reset page when search or filter changes
    public function updated($property)
    {
        if (in_array($property, ['searchTerm', 'roleFilter'])) {
            $this->resetPage();
        }
    }

    public function render()
    {
        $users = User::query()
            ->when($this->searchTerm, function ($query) {
                $query->where(function($q) {
                    $q->where('name', 'like', '%' . $this->searchTerm . '%')
                      ->orWhere('email', 'like', '%' . $this->searchTerm . '%');
                });
            })
            ->when($this->roleFilter, function ($query) {
                $query->role($this->roleFilter);
            })
            ->orderBy('id', 'desc')
            ->with(['permissions', 'roles', 'providers'])
            ->paginate(10); // Explicit pagination count

        $roles = Role::all();

        return view('livewire.users-index', compact('users', 'roles'));
    }
}
