<?php

namespace App\Models;

use App\Models\Question;
use Illuminate\Database\Eloquent\Model;
use Modules\DeskReview\Models\DeskReview;
use Modules\Application\Models\Application;
use Modules\DeskReview\Models\DeskheadReview;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class Standard extends BaseModel
{
    use HasFactory;

    protected $fillable = [
        'name',
        'dct_id',
        'weights',
    ];
    // Add this relationship
    public function dct()
    {
        return $this->belongsTo(\Modules\DCT\Models\DCT::class, 'dct_id');
    }
    public function substandards()
    {
        return $this->hasMany(\App\Models\Substandard::class, 'standard_id');
    }


    // Update the `questions` method to accept `application_id`
    public function questions($applicationId = null)
    {
        $query = Question::whereIn('indicator_id', function ($query) {
            $query->select('id')
                ->from('indicators')
                ->whereIn('substandard_id', function ($subQuery) {
                    $subQuery->select('id')
                        ->from('substandards')
                        ->where('standard_id', $this->id);
                });
        });

        // Filter by `application_id` if provided
        if ($applicationId) {
            $query->whereHas('answers', function ($query) use ($applicationId) {
                $query->where('application_id', $applicationId);
            });
        }

        return $query;
    }

    public function totalIndicators()
    {
        return $this->substandards->flatMap(function ($substandard) {
            return $substandard->indicators;
        })->count();
    }

    // public function reviewedIndicators($applicationId, $reviewerId)
    // {
    //     return DeskReview::where('application_id', $applicationId)
    //         ->where('reviewer_id', $reviewerId)
    //         ->where('review_type', 'dct')
    //         ->whereIn('indicator_id', function ($query) {
    //             $query->select('id')
    //                 ->from('indicators')
    //                 ->whereIn('substandard_id', function ($subQuery) {
    //                     $subQuery->select('id')
    //                         ->from('substandards')
    //                         ->where('standard_id', $this->id);
    //                 });
    //         })
    //         ->count();
    // }

    public function reviewedIndicators($applicationId, $reviewerId)
    {
        // Get the current review phase from the application
        $application = Application::find($applicationId);
        $currentReviewPhase = $application->review_phase;

        // Check if the reviewer is assigned to the current review phase in desk_review_assignment
        $isAssigned = DeskReviewAssignment::where('application_id', $applicationId)
            ->where('assessor_id', $reviewerId)
            ->where('review_phase', $currentReviewPhase)
            ->exists();

        if (!$isAssigned) {
            // If the reviewer is not assigned to the current review phase, return 0
            return 0;
        }

        // Get the count of reviewed indicators for the current review phase
        return DeskReview::where('application_id', $applicationId)
            ->where('reviewer_id', $reviewerId)
            ->where('review_type', 'dct')
            ->where('review_phase', $currentReviewPhase) // Filter by the current review phase
            ->whereIn('indicator_id', function ($query) {
                $query->select('id')
                    ->from('indicators')
                    ->whereIn('substandard_id', function ($subQuery) {
                        $subQuery->select('id')
                            ->from('substandards')
                            ->where('standard_id', $this->id);
                    });
            })
            ->count();
    }

    // Update the `answeredQuestions` method to correctly filter by `application_id`
    public function answeredQuestions($applicationId)
    {
        return $this->questions($applicationId)->count();
    }

    public function reviewedIndicatorsByDeskhead($applicationId)
    {
        // Get the current review phase from the application
        $application = Application::find($applicationId);
        if (!$application) {
            // If the application is not found, return 0
            return 0;
        }

        $currentReviewPhase = $application->review_phase;

        // Get the count of reviewed indicators for the current review phase by desk heads
        return DeskReview::where('application_id', $applicationId)
            ->where('reviewer_or_head', 1) // Only desk heads
            ->where('review_type', 'dct')
            ->where('review_phase', $currentReviewPhase) // Filter by the current review phase
            ->whereIn('indicator_id', function ($query) {
                $query->select('id')
                    ->from('indicators')
                    ->whereIn('substandard_id', function ($subQuery) {
                        $subQuery->select('id')
                            ->from('substandards')
                            ->where('standard_id', $this->id);
                    });
            })
            ->count();
    }



    public function reviewedIndicatorsByDeskhead2($applicationId)
    {
        return DeskheadReview::where('application_id', $applicationId)
            ->whereIn('indicator_id', function ($query) {
                $query->select('id')
                    ->from('indicators')
                    ->whereIn('substandard_id', function ($subQuery) {
                        $subQuery->select('id')
                            ->from('substandards')
                            ->where('standard_id', $this->id);
                    });
            })
            ->count();
    }

    /**
     * Count reviewed indicators for a specific reviewer in a specific phase
     *
     * @param int $applicationId
     * @param int $reviewerId
     * @param string $reviewPhase
     * @return int
     */
    public function countReviewedIndicatorsByPhase($applicationId, $reviewerId, $reviewPhase)
    {
        return DeskReview::where('application_id', $applicationId)
            ->where('reviewer_id', $reviewerId)
            ->where('review_type', 'dct')
            ->where('review_phase', $reviewPhase)
            ->whereIn('indicator_id', function ($query) {
                $query->select('id')
                    ->from('indicators')
                    ->whereIn('substandard_id', function ($subQuery) {
                        $subQuery->select('id')
                            ->from('substandards')
                            ->where('standard_id', $this->id);
                    });
            })
            ->count();
    }
}
