<?php

namespace Modules\Application\Http\Controllers\Backend;



use Carbon\Carbon;
use Dompdf\Dompdf;
use Dompdf\Options;
use App\Models\User;
use App\Authorizable;
use App\Models\Answer;
use App\Models\Campus;
use App\Models\Question;
use App\Models\Standard;
use App\Models\Indicator;
use App\Models\Institute;
use App\Models\SerReview;
use App\Models\SssReview;
use Soundasleep\Html2Text;
use App\Models\Substandard;
use Illuminate\Support\Str;
use Modules\DCT\Models\DCT;
use Illuminate\Http\Request;
use App\Models\AnswerHistory;
use Modules\Desk\Models\Desk;
use App\Models\IndicatorMedia;
use PhpOffice\PhpWord\PhpWord;
use PhpOffice\PhpWord\IOFactory;
use Yajra\DataTables\DataTables;
use App\Models\ApplicationSSSSER;
use PhpOffice\PhpWord\Style\Cell;
use PhpOffice\PhpWord\Style\Font;
use Illuminate\Support\Facades\DB;
use PhpOffice\PhpWord\Shared\Html;

use PhpOffice\PhpWord\Style\Table;
use Illuminate\Support\Facades\Log;
use Modules\Program\Models\Program;

use App\Enums\ApplicationStatusEnum;
use App\Models\DeskReviewAssignment;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Gate;

use PhpOffice\PhpWord\SimpleType\Jc;
use PhpOffice\PhpWord\Element\Section;

use PhpOffice\PhpWord\Element\TextRun;
use PhpOffice\PhpWord\Style\Paragraph;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Storage;
use App\Models\ApplicationStatusHistory;
use RealRashid\SweetAlert\Facades\Alert;
use Illuminate\Support\Facades\Validator;
use Modules\DeskReview\Models\DeskReview;
use App\Notifications\GenericNotification;
use App\Enums\SerReviewQuestionsEnumerator;
use App\Enums\SssReviewQuestionsEnumerator;
use Illuminate\Support\Facades\RateLimiter;
use Modules\Application\Models\Application;
use Modules\Attachement\Models\Attachement;
use Modules\Certificate\Models\Certificate;
use Modules\Mainsetting\Models\Mainsetting;
use Modules\DeskReview\Models\DeskheadReview;
use App\Notifications\ProfileDecisionNotification;

use Modules\DeskReview\Models\DeskheadSSSSERReview;
use App\Http\Controllers\Backend\BackendBaseController;
use App\Notifications\InstitutionUserStoredNotification;
use App\Notifications\NewApplicationSubmittedNotification;

class ApplicationsController extends BackendBaseController
{
    use Authorizable;

    public function __construct()
    {
        // Page Title
        $this->module_title = 'Applications';

        // module name
        $this->module_name = 'applications';

        // directory path of the module
        $this->module_path = 'application::backend';

        // module icon
        $this->module_icon = 'fa-regular fa-sun';

        // module model name, path
        $this->module_model = "Modules\Application\Models\Application";
    }




    public function edit($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Edit';

        try {
            // Fetch the application record
            $$module_name_singular = $module_model::findOrFail($id);

            // Authorization check
            $gate_response = Gate::inspect('update', $$module_name_singular);
            if (!$gate_response->allowed()) {
                Auth::logout(); // Logout the user
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect('/login')->with('unauthorized', $gate_response->message());
            }

            // Fetch related data
            $institute = Institute::find($$module_name_singular->institution_id);
            $campus = Campus::find($$module_name_singular->campus_id);
            $program = Program::find($$module_name_singular->program_id);

            // Fetch existing attachments
            $delegation_letter = $$module_name_singular->getFirstMedia('delegation_letters');
            $application_form = $$module_name_singular->getFirstMedia('application_forms');

            // Log user access
            logUserAccess($module_title . ' ' . $module_action . ' | Id: ' . $$module_name_singular->id);

            return view(
                "{$module_path}.{$module_name}.edit",
                compact(
                    'module_title',
                    'module_name',
                    'module_path',
                    'module_icon',
                    'module_action',
                    'module_name_singular',
                    "{$module_name_singular}",
                    'delegation_letter',
                    'application_form',
                    'institute',
                    'campus',
                    'program'
                )
            );
        } catch (\Exception $e) {
            Log::error('Error in edit method: ' . $e->getMessage());
            Alert::toast('An error occurred while fetching the record. Please try again.', 'error');
            return redirect()->back();
        }
    }
    public function update(Request $request, $id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Update';

        DB::beginTransaction();
        try {
            // Fetch the record to update
            $$module_name_singular = $module_model::findOrFail($id);

            // Authorization check
            $gate_response = Gate::inspect('update', $$module_name_singular);
            if (!$gate_response->allowed()) {
                Auth::logout(); // Logout the user
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect('/login')->with('unauthorized', $gate_response->message());
            }

            // Validate request
            $request->validate([
                'institute_id' => 'required',
                'campus_id' => 'required',
                'program_start_year' => 'nullable|integer|min:1900|max:' . date('Y'),
                'graduation_cycles' => 'nullable|integer|min:1',
                'students_graduated' => 'nullable|integer|min:0',
                'program_id' => 'required|exists:programs,id',
                'delegation_letter' => 'nullable|file|mimes:pdf|max:8048',
                'application_form' => 'nullable|file|mimes:pdf|max:8048',
            ]);

            // Handle Institute
            $instituteInput = $request->input('institute_id');
            $institute = is_numeric($instituteInput) ?
                Institute::findOrFail($instituteInput) :
                Institute::create(['name' => $instituteInput]);

            // Handle Campus
            $campusInput = $request->input('campus_id');
            $campus = is_numeric($campusInput) ?
                Campus::findOrFail($campusInput) :
                Campus::create(['name' => $campusInput]);

            // Prepare the data array
            $data = [
                'application_type' => $request->input('application_type'),
                'institute_type' => $request->input('institute_type'),
                'institution_id' => $institute->id,
                'campus_id' => $campus->id,
                'program_start_year' => $request->input('program_start_year'),
                'graduation_cycles' => $request->input('graduation_cycles'),
                'students_graduated' => $request->input('students_graduated'),
                'program_id' => $request->input('program_id'),
            ];

            // Update the record
            $$module_name_singular->update($data);

            // Handle delegation letter attachment
            if ($request->hasFile('delegation_letter')) {
                $$module_name_singular->clearMediaCollection('delegation_letters');
                $$module_name_singular->addMedia($request->file('delegation_letter'))
                    ->toMediaCollection('delegation_letters', 'private');
            }

            // Handle application form attachment
            if ($request->hasFile('application_form')) {
                $$module_name_singular->clearMediaCollection('application_forms');
                $$module_name_singular->addMedia($request->file('application_form'))
                    ->toMediaCollection('application_forms', 'private');
            }

            DB::commit();

            // Success message
            Alert::toast(Str::singular($module_title) . "' Updated Successfully", 'success')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();

            logUserAccess($module_title . ' ' . $module_action . ' | Id: ' . $$module_name_singular->id);

            return redirect()->route("backend.{$module_name}.show", $$module_name_singular->id);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error in update method: ' . $e->getMessage());
            Alert::toast('An error occurred while updating the record. Please try again.', 'error');
            return redirect()->back();
        }
    }

    public function show($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        $module_action = 'Show';

        try {
            $response = parent::show($id);
            $$module_name_singular = $this->module_model::findOrFail($id);

            // Fetch related models
            $related_models = [
                'created_by_user' => User::find($$module_name_singular->created_by),
                'updated_by_user' => User::find($$module_name_singular->updated_by),
            ];

            return view($this->module_path . '.' . $this->module_name . '.show', array_merge($response->getData(), $related_models));
        } catch (\Exception $e) {
            Log::error('Error in show method: ' . $e->getMessage());
            Alert::toast('An error occurred while fetching the record. Please try again.', 'error');
            return redirect()->back();
        }
    }

    public function delegationLetter($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        try {
            $application = Application::findOrFail($id);
            $media = $application->getFirstMedia('delegation_letters');

            if ($media) {
                $filePath = storage_path('app/private/' . $media->id . '/' . $media->file_name);
                if (file_exists($filePath)) {
                    return response()->file($filePath);
                }
            }

            return abort(404, 'Delegation letter file not found.');
        } catch (\Exception $e) {
            Log::error('Error in delegationLetter method: ' . $e->getMessage());
            return abort(404, 'No delegation letter available.');
        }
    }

    public function applicationForm($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        try {
            $application = Application::findOrFail($id);
            $media = $application->getFirstMedia('application_forms');

            if ($media) {
                $filePath = storage_path('app/private/' . $media->id . '/' . $media->file_name);
                if (file_exists($filePath)) {
                    return response()->file($filePath);
                }
            }

            return abort(404, 'Application form file not found.');
        } catch (\Exception $e) {
            Log::error('Error in applicationForm method: ' . $e->getMessage());
            return abort(404, 'No application form available.');
        }
    }




    public function uploadSSS(Request $request, $id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        $request->validate([
            'sss_file' => 'required|mimes:pdf|max:51200', // 8MB
        ]);

        DB::beginTransaction();
        try {
            $application = Application::findOrFail($id);

            $gate_response = Gate::inspect('questionresponseedit', $application);
            if (!$gate_response->allowed()) {
                Auth::logout(); // Logout the user
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect('/login')->with('unauthorized', $gate_response->message());
            }


            if ($request->hasFile('sss_file')) {
                $sss = ApplicationSSSSER::where('application_id', $id)
                    ->where('type', 'sss_document')
                    ->first();

                if ($sss && $sss->getFirstMedia('sss_files')) {
                    $sss->getFirstMedia('sss_files')->delete();
                }

                $sss = ApplicationSSSSER::updateOrCreate(
                    ['application_id' => $id, 'type' => 'sss_document'],
                    ['created_by' => auth()->id(), 'status' => 'Completed']
                );

                $sss->addMedia($request->file('sss_file'))
                    ->toMediaCollection('sss_files', 'private');

                $sss->update(['status' => 'Completed']);
            }

            DB::commit();
            Alert::toast('Student Satisfaction Survey Document uploaded successfully!', 'success');
            return redirect()->route('backend.applications.beginresponse', ['id' => $id]);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error uploading SSS document: ' . $e->getMessage());
            Alert::toast('An error occurred while uploading the document. Please try again.', 'error');
            return redirect()->back();
        }
    }



    public function uploadSER(Request $request, $id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        $request->validate([
            'ser_file' => 'required|mimes:pdf|max:51200', // 8MB
        ]);

        DB::beginTransaction();
        try {
            $application = Application::findOrFail($id);

            $gate_response = Gate::inspect('questionresponseedit', $application);
            if (!$gate_response->allowed()) {
                Auth::logout(); // Logout the user
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect('/login')->with('unauthorized', $gate_response->message());
            }



            if ($request->hasFile('ser_file')) {
                $ser = ApplicationSSSSER::where('application_id', $id)
                    ->where('type', 'self_evaluation')
                    ->first();

                if ($ser && $ser->getFirstMedia('ser_files')) {
                    $ser->getFirstMedia('ser_files')->delete();
                }

                $ser = ApplicationSSSSER::updateOrCreate(
                    ['application_id' => $id, 'type' => 'self_evaluation'],
                    ['created_by' => auth()->id(), 'status' => 'Completed']
                );

                $ser->addMedia($request->file('ser_file'))
                    ->toMediaCollection('ser_files', 'private');

                $ser->update(['status' => 'Completed']);
            }

            DB::commit();
            Alert::toast('Self Evaluation Report Document uploaded successfully!', 'success');
            return redirect()->route('backend.applications.beginresponse', ['id' => $id]);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error uploading SER document: ' . $e->getMessage());
            Alert::toast('An error occurred while uploading the document. Please try again.', 'error');
            return redirect()->back();
        }
    }

    public function viewSER($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        try {
            $ser = ApplicationSSSSER::where('application_id', $id)
                ->where('type', 'self_evaluation')
                ->firstOrFail();

            $media = $ser->getFirstMedia('ser_files');
            if ($media) {
                $filePath = storage_path('app/private/' . $media->id . '/' . $media->file_name);
                if (file_exists($filePath)) {
                    return response()->file($filePath);
                }
            }

            return abort(404, 'Self Evaluation Report file not found.');
        } catch (\Exception $e) {
            Log::error('Error viewing SER document: ' . $e->getMessage());
            return abort(404, 'No Self Evaluation Report available.');
        }
    }

    public function viewSSS($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        try {
            $sss = ApplicationSSSSER::where('application_id', $id)
                ->where('type', 'sss_document')
                ->firstOrFail();

            $media = $sss->getFirstMedia('sss_files');
            if ($media) {
                $filePath = storage_path('app/private/' . $media->id . '/' . $media->file_name);
                if (file_exists($filePath)) {
                    return response()->file($filePath);
                }
            }

            return abort(404, 'SSS Document file not found.');
        } catch (\Exception $e) {
            Log::error('Error viewing SSS document: ' . $e->getMessage());
            return abort(404, 'No SSS Document available.');
        }
    }

    public function uploadMedia(Request $request, $id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        $request->validate([
            'attachment_file' => 'required|mimes:pdf|max:25192',
            'attachment_id' => 'required|exists:attachements,id',
            'indicator_id' => 'required|exists:indicators,id',
            'page_number' => 'nullable|integer|min:1',
        ]);

        DB::beginTransaction();
        try {
            $applicationId = $id;

            $application = Application::findOrFail($applicationId);
            $gate_response = Gate::inspect('questionresponseedit', $application);
            if (!$gate_response->allowed()) {
                Auth::logout(); // Logout the user
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect('/login')->with('unauthorized', $gate_response->message());
            }

            $attachmentId = $request->attachment_id;
            $indicatorId = $request->indicator_id;
            $pageNumber = $request->page_number ?? 1;


            if ($request->hasFile('attachment_file')) {
                $indicatorMedia = IndicatorMedia::where('application_id', $applicationId)
                    ->where('attachment_id', $attachmentId)
                    ->first();

                if ($indicatorMedia && $indicatorMedia->getFirstMedia('indicator_attachments')) {
                    $indicatorMedia->getFirstMedia('indicator_attachments')->delete();
                }

                $indicatorMedia = IndicatorMedia::updateOrCreate(
                    [
                        'application_id' => $applicationId,
                        'indicator_id' => $indicatorId,
                        'attachment_id' => $attachmentId,
                    ],
                    [
                        'start_page' => $pageNumber,
                    ]
                );

                $media = $indicatorMedia->addMedia($request->file('attachment_file'))
                    ->toMediaCollection('indicator_attachments', 'private');

                $indicatorMedia->update(['media_id' => $media->id]);
            }

            DB::commit();
            Alert::toast('Attachment uploaded successfully!', 'success');
            return redirect()->back();
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error uploading media: ' . $e->getMessage());
            Alert::toast('An error occurred while uploading the attachment. Please try again.', 'error');
            return redirect()->back();
        }
    }

    public function viewMedia($application_id, $attachment_id, $start_page = 1)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        try {
            $indicatorMedia = IndicatorMedia::where('application_id', $application_id)
                ->where('attachment_id', $attachment_id)
                ->firstOrFail();

            $media = $indicatorMedia->getFirstMedia('indicator_attachments');
            if ($media) {
                $filePath = storage_path('app/private/' . $media->id . '/' . $media->file_name);
                if (file_exists($filePath)) {
                    if (mime_content_type($filePath) === 'application/pdf') {
                        return response()->file($filePath, ['Content-Disposition' => 'inline; filename="' . $media->file_name . '"']);
                    } else {
                        return response()->file($filePath);
                    }
                }
            }

            return abort(404, 'Attachment file not found.');
        } catch (\Exception $e) {
            Log::error('Error viewing media: ' . $e->getMessage());
            return abort(404, 'No attachment available.');
        }
    }

    public function submit(Request $request)
    {
        // Start a database transaction
        DB::beginTransaction();

        try {
            // Find the application
            $application = Application::findOrFail($request->id);

            // Check authorization using Gate
            $gate_response = Gate::inspect('updateApplicationSubmissionStatus', $application);
            if (!$gate_response->allowed()) {
                // Logout the user
                // Auth::logout();

                // Use the denial message from the policy response
                $us = auth()->user()->email;
                log::warning("Unauthorized access attempt: User {$us} tried to update Application {$application->id}.");

                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();

                return redirect()->back();
            }

            // Record status change
            ApplicationStatusHistory::recordStatusChange($application, ApplicationStatusEnum::PROFILE_SUB);

            // Update application review phase
            $application->review_phase = "profile_stage";
            $application->save();

            // Fetch users with roles 'deputy director'
            $usersToNotify = User::role(['deputy director', 'ceo'])
                ->where('status', 1) // Filter by status = 1
                ->orderBy('created_at', 'desc') // Order by the latest created_at
                ->get(); // Fetch all matching users

            // Send notification to each user
            foreach ($usersToNotify as $user) {
                $user->notify(new NewApplicationSubmittedNotification($application));
            }

            // Commit the transaction
            DB::commit();

            // Return success response
            return response()->json(['success' => true]);
        } catch (\Exception $e) {
            // Roll back the transaction on error
            DB::rollBack();

            // Log the error
            Log::error("Error submitting application: " . $e->getMessage());

            // Return error response
            return response()->json(['success' => false, 'message' => 'An error occurred while submitting the application. Please try again.'], 500);
        }
    }

    public function index_data(?array $columns = null, array $additionalButtons = [], array $additionalData = [])
    {
        $columns = $columns ?? [
            'id',
            'name',
            'institution_id',
            'campus_id',
            'application_type',
            'program_id',
            'program_start_year',
            'graduation_cycles',
            'students_graduated',
            'status',
            'created_by',
            'updated_at'
        ];

        $buttonModuleName = 'applications';

        // Fetch applications
        // Fetch applications
        $applications = Application::with(['institute', 'campus', 'program'])
            ->when(auth()->user()->hasRole('user'), function ($query) {
                // For users, only show their own applications
                $query->where('created_by', auth()->id());
            }, function ($query) {
                // For non-users, show all applications except those with status 'profile_draft'
                $query->where('status', '!=', 'profile_draft');
            })
            ->get();
        // Define additional buttons conditionally
        $additionalButtons = [];

        // Iterate over each application to add buttons based on status
        foreach ($applications as $application) {
            // Button 1: Start Submission (visible only to the creator when status is profile_accepted or revision_requested)
            if (auth()->user()->hasRole('user') && in_array($application->status, ['profile_accepted', 'profile_rejected', 'desk_review_revision_requested'])) {
                $additionalButtons[$application->id][] = [
                    'route' => "backend.$buttonModuleName.beginresponse", // Route name
                    'title' => 'Start Submission',
                    'class' => 'btn-outline-info',
                    'icon' => 'fa-solid fa-file-import blink-icon',
                    'param' => 'id', // The parameter to pass
                ];
            }

            // Button 2: Review Application Profile (visible only to deputy director or CEO)
            if (auth()->user()->hasAnyRole(['deputy director', 'accreditation expert', 'assessor', 'council member', 'super admin', 'ceo'])) {
                $additionalButtons[$application->id][] = [
                    'route' => "backend.$buttonModuleName.profileview", // Route name
                    'title' => 'Review Application Profile',
                    'class' => 'btn-outline-info',
                    'icon' => 'fas fa-check',
                    'param' => 'id', // The parameter to pass
                ];
            }

            // Button 2: Truck my Application Profile (visible only to users)
            if (auth()->user()->hasAnyRole('user')) {
                $additionalButtons[$application->id][] = [
                    'route' => "backend.$buttonModuleName.profileview", // Route name
                    'title' => 'Truck my Application',
                    'class' => 'btn-outline-info',
                    'icon' => 'fas fa-history',
                    'param' => 'id', // The parameter to pass
                ];
            }
        }

        return DataTables::of($applications)
            ->addColumn('institution_name', function ($application) {
                return $application->institute->name ?? 'N/A';
            })
            ->addColumn('campus_name', function ($application) {
                return $application->campus->name ?? 'N/A';
            })
            ->addColumn('program_description', function ($application) {
                return $application->program->description ?? 'N/A';
            })
            ->addColumn('updated_at', function ($application) {
                return $application->updated_at ? $application->updated_at->diffForHumans() : 'N/A';
            })
            ->addColumn('attachments', function ($application) {
                $delegationLetterButton = 'No letter';
                $applicationFormButton = 'No form';

                // Get applicant's name
                $applicantName = $application->name;

                // Check if the application has a delegation letter
                $delegationLetterMedia = $application->getFirstMedia('delegation_letters');
                if ($delegationLetterMedia) {
                    $delegationLetterUrl = route('backend.applications.delegation_letter', ['id' => $application->id]);
                    $delegationLetterButton = '<button class="btn btn-primary btn-sm view-pdf"
                        data-pdf-url="' . $delegationLetterUrl . '"
                        data-title="Delegation Letter for ' . htmlspecialchars($applicantName, ENT_QUOTES, 'UTF-8') . '"
                        data-bs-toggle="modal"
                        data-bs-target="#pdfModal">
                    <i class="fas fa-file-pdf"></i> Delegation
                  </button>';
                }

                // Check if the application has an application form
                $applicationFormMedia = $application->getFirstMedia('application_forms');
                if ($applicationFormMedia) {
                    $applicationFormUrl = route('backend.applications.application_form', ['id' => $application->id]);
                    $applicationFormButton = '<button class="btn btn-secondary btn-sm view-pdf"
                        data-pdf-url="' . $applicationFormUrl . '"
                        data-title="Application Form for ' . htmlspecialchars($applicantName, ENT_QUOTES, 'UTF-8') . '"
                        data-bs-toggle="modal"
                        data-bs-target="#pdfModal">
                    <i class="fas fa-file-pdf"></i> Application
                  </button>';
                }

                return $delegationLetterButton . ' <br><br> ' . $applicationFormButton;
            })
            ->addColumn('action', function ($application) use ($additionalButtons) {
                // Set hideEdit flag based on application status
                $user = auth()->user();
                $hideEdit = !in_array($application->status, ['profile_draft', 'profile_revise']) || !$user->hasRole('user');

                // Get additional buttons for this specific application
                $appButtons = $additionalButtons[$application->id] ?? [];

                return view('backend.includes.action_column', [
                    'module_name' => 'applications',
                    'data' => $application,
                    'additionalButtons' => $appButtons,
                    'additionalData' => [
                        'hideEdit' => $hideEdit, // Pass hideEdit flag to the view
                    ],
                ]);
            })
            ->rawColumns(['attachments', 'action']) // Ensure raw HTML is processed
            ->make(true);
    }

    public function beginResponse($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        DB::beginTransaction();
        try {
            // Validate input
            if (!is_numeric($id) || $id <= 0) {
                Alert::toast('Invalid application ID.', 'error')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->back();
            }

            $module_title = $this->module_title;
            $module_name = $this->module_name;
            $module_path = $this->module_path;
            $module_icon = $this->module_icon;
            $module_model = $this->module_model;
            $module_name_singular = Str::singular($module_name);

            // Fetch application with error handling
            $application = Application::find($id);
            if (!$application) {
                Log::error('Application not found: Invalid ID ' . $id);
                Alert::toast('Application not found.', 'error')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->back();
            }

            // Fetch the module-specific model
            $$module_name_singular = $module_model::find($id);
            if (!$$module_name_singular) {
                Log::error("$module_name_singular not found: Invalid ID " . $id);
                Alert::toast("$module_name_singular not found.", 'error')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->back();
            }

            // Authorization check
            $gate_response = Gate::inspect('reviewerviewbeginresponse', $$module_name_singular);
            if (!$gate_response->allowed()) {
                Auth::logout(); // Logout the user if unauthorized
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->back();
            }

            // Check if desk_id has a value
            $desk_id = $application->desk_id;
            $has_desk = !is_null($desk_id); // This variable is preserved

            // Get all desks with id and name
            $desks = Desk::select('id', 'name')->get();

            // Check for SSS and SER documents
            $sss_exists = ApplicationSSSSER::where('application_id', $id)
                ->where('type', 'sss_document')
                ->exists();

            $ser_exists = ApplicationSSSSER::where('application_id', $id)
                ->where('type', 'self_evaluation')
                ->exists();

            // Get the standard and calculate the status for DCT
            $standard = Standard::first(); // Adjust this to fetch the correct standard
            if (!$standard) {
                Log::error('Standard not found.');
                Alert::toast('Standard not found.', 'error')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->back();
            }

            //$totalQuestions = $standard->questions()->count();
            //$answeredQuestions = $standard->answeredQuestions($id);

            // Get program_id from application
            $program_id = $application->program_id;

            // Find DCT by program_id
            $dct = DCT::where('program_id', $program_id)->first();


            // Get all standards under this DCT
            $standards = Standard::where('dct_id', $dct->id)->get();

            // Initialize counters
            $totalQuestions = 0;
            $answeredQuestions = 0;

            // Loop through standards and count questions/answers
            foreach ($standards as $standard) {
                $totalQuestions += $standard->questions()->count();
                $answeredQuestions += $standard->answeredQuestions($id); // using application_id
            }


            if ($answeredQuestions == 0) {
                $dct_status = 'Not Started';
                $dct_status_class = 'bg-warning text-dark';
            } elseif ($answeredQuestions < $totalQuestions) {
                $dct_status = 'In Progress';
                $dct_status_class = 'bg-primary';
            } else {
                $dct_status = 'Completed';
                $dct_status_class = 'bg-success';
            }

            DB::commit();

            return view("$module_path.$module_name.beginresponse", compact(
                'id',
                'sss_exists',
                'ser_exists',
                'has_desk', // This variable is included
                'desks',
                'application',
                'dct_status',
                'dct_status_class'
            ));
        } catch (\Exception $e) {
            DB::rollBack();
            // Log the error for debugging
            Log::error('Error in beginResponse: ' . $e->getMessage());

            Alert::toast('An error occurred while loading the response page. Please try again.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
    }
    private function copyAnswersToHistory($application_id, $document_version)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        // Fetch the current answers
        $currentAnswers = Answer::where('application_id', $application_id)->get();

        // Move current answers to answer_history
        foreach ($currentAnswers as $answer) {
            AnswerHistory::create([
                'question_id' => $answer->question_id,
                'application_id' => $answer->application_id,
                'answer' => $answer->answer,
                'created_at' => $answer->created_at,
                'updated_at' => $answer->updated_at,
                'deleted_at' => $answer->deleted_at,
                'created_by' => $answer->created_by,
                'updated_by' => $answer->updated_by,
                'deleted_by' => $answer->deleted_by,
                'doc_version' => $document_version, // Use the provided document version
            ]);
        }

        // Optionally, delete the current answers from the answers table
        //Answer::where('application_id', $application_id)->delete();
    }


    public function updateApplicationStatus(Request $request, $application_id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        DB::beginTransaction();
        try {
            $application = Application::findOrFail($application_id);

            // Authorization check
            $gate_response = Gate::inspect('submitalldocuments', $application);
            if (!$gate_response->allowed()) {
                Auth::logout();
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->back();
            }

            // Check if this is a resubmission
            $isResubmission = ApplicationStatusHistory::where('application_id', $application->id)
                ->where('status', ApplicationStatusEnum::DOCS_SUB)
                ->exists();

            // Record the status change
            if ($isResubmission) {
                // Get the updated_at timestamp from the application
                $updatedAt = $application->updated_at;

                // Calculate the difference between today and the updated_at date
                $today = now();
                $workingDaysDifference = $today->diffInWeekdays($updatedAt);

                // Check if the difference is greater than 15 working days
                if ($workingDaysDifference > 15) {
                    // Calculate the expected end date (15 working days from updated_at)
                    $expectedEndDate = $updatedAt->addWeekdays(15)->format('Y-m-d');

                    // Modify the message to include overdue information
                    $overdueDays = $workingDaysDifference - 15;
                    $message = "The applicant has completed the revision. However, the submission is overdue by $overdueDays working days. It was expected to be completed by $expectedEndDate.";
                } else {
                    // If not overdue, use the default message
                    $message = "The applicant has completed the revision.";
                }

                // Record the status change with the updated message
                ApplicationStatusHistory::recordStatusChange(
                    $application,
                    ApplicationStatusEnum::DOCS_SUB,
                    $message
                );
            } else {
                ApplicationStatusHistory::recordStatusChange($application, ApplicationStatusEnum::DOCS_SUB);
            }

            // Set the notification message dynamically
            // Assuming you have the $application object available in your controller
            $instituteName = $application->institute->name; // Access the institute name
            $programName = $application->program->name; // Access the program name

            $notificationMessage = $isResubmission
                ? "The applicant from {$instituteName}** for the program {$programName} has resubmitted all required documents after revision. It is now ready for desk review (Re)."
                : "The applicant from {$instituteName}** for the program {$programName} has submitted all required documents for the application. It is now ready for desk review.";

            // Notification data
            $notificationData = [
                'title' => 'Documents Submitted',
                'message' => $notificationMessage,
                'module' => 'Applications',
                'type' => 'documents_submitted',
                'icon' => 'fas fa-file-upload',
                'urlBackend' => route('backend.applications.profileview', $application->id),
                'urlFrontend' => '',
                'application' => $application,
                'status' => ApplicationStatusEnum::DOCS_SUB,
            ];

            // Notify the Deputy Director and CEO
            $deputy = User::role('deputy director')
                ->where('status', 1) // Filter by status = 1
                ->latest() // Order by the latest created_at
                ->first(); // Fetch the first result

            $ceo = User::role('ceo')
                ->where('status', 1) // Filter by status = 1
                ->latest() // Order by the latest created_at
                ->first(); // Fetch the first result

            if ($deputy) {
                $deputy->notify(new GenericNotification(...$notificationData));
            }

            if ($ceo) {
                $ceo->notify(new GenericNotification(...$notificationData));
            }

            // Copy answers to history and update document version
            $this->copyAnswersToHistory($application->id, $application->doc_version);
            // $application->doc_version = $application->doc_version + 1;
            // $application->save(); // Save the changes to the database

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'All Application Data Submitted Successfully.',
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error in updateApplicationStatus method: ' . $e->getMessage());
            Alert::toast('An error occurred while updating the application status. Please try again.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
    }

    public function updateDesk(Request $request, $id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        DB::beginTransaction();
        try {
            $request->validate([
                'desk_id' => 'required|exists:desks,id'
            ]);

            $application = Application::findOrFail($id);

            // Authorization check
            $gate_response = Gate::inspect('assignApplicationToDesk', $application);
            if (!$gate_response->allowed()) {
                Auth::logout();
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect('/login')->with('unauthorized', $gate_response->message());
            }

            $previousDeskId = $application->desk_id;
            $application->update(['desk_id' => $request->desk_id]);

            DB::commit();

            Alert::toast($previousDeskId ? 'Desk reassigned successfully' : 'Desk assigned successfully', 'success')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();

            return redirect()->back();
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error in updateDesk method: ' . $e->getMessage());
            Alert::toast('An error occurred while updating the desk. Please try again.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
    }



    public function showStandards($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);
        $application = Application::findOrFail($id);

        // Step 1: Get `program_id` from the Application
        $program_id = $application->program_id;


        //Get Program Description
        $program = Program::find($program_id);
        $program_description = $program ? $program->description : 'Unknown Program';

        // Step 2: Find `DCTS` using `program_id`
        $dcts = DCT::where('program_id', $program_id)->first();

        // Step 3: Get all standards linked to `dct_id`, ordered by id DESC
        $standards = $dcts ? Standard::where('dct_id', $dcts->id)->orderBy('id', 'asc')->get() : collect();

        // Pass data to the view
        return view("$this->module_path.$this->module_name.standards", compact('id', 'standards', 'program_description', 'application'));
    }


    public function fillQuestions($application_id, $standard_id, $substandard_id = null, $indicator_id = null)
    {

        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        try {
            // Fetch the application
            $$module_name_singular = $module_model::findOrFail($application_id);

            // Authorization check
            $gate_response = Gate::inspect('questionresponseedit', $$module_name_singular);
            if (!$gate_response->allowed()) {
                Auth::logout(); // Logout the user
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect('/login')->with('unauthorized', $gate_response->message());
            }

            // Fetch the standard
            $standard = Standard::findOrFail($standard_id);

            // Fetch substandards
            $substandards = Substandard::where('standard_id', $standard_id)->get();

            // Determine the current substandard
            if (!$substandard_id && $substandards->isNotEmpty()) {
                $currentSubStandard = $substandards->first();
            } else {
                $currentSubStandard = $substandards->find($substandard_id);
            }

            if (!$currentSubStandard) {
                Alert::warning('No Substandards Found', 'This standard does not have any substandards defined.')
                    ->position('center')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->route("backend.$module_name.standards", ['id' => $application_id]);
            }

            // Fetch indicators
            $indicators = Indicator::where('substandard_id', $currentSubStandard->id)->get();

            // Determine the current indicator
            if (!$indicator_id && $indicators->isNotEmpty()) {
                $currentIndicator = $indicators->first();
            } else {
                $currentIndicator = $indicators->find($indicator_id);
            }

            if (!$currentIndicator) {
                return redirect()->route("backend.$module_name.standards", ['id' => $application_id])
                    ->with('error', 'No indicators found for this substandard.');
            }

            // Fetch questions
            $questions = Question::where('indicator_id', $currentIndicator->id)->get();

            // Fetch existing answers
            $answers = Answer::where('application_id', $application_id)
                ->whereIn('question_id', $questions->pluck('id'))
                ->pluck('answer', 'question_id');

            // Fetch required attachments
            $attachments = Attachement::whereIn('id', function ($query) use ($currentIndicator) {
                $query->select('attachment_id')
                    ->from('indicator_attachment')
                    ->where('indicator_id', $currentIndicator->id);
            })->get();

            // Add status and start_page for each attachment
            foreach ($attachments as $attachment) {
                $indicatorMedia = IndicatorMedia::where('application_id', $application_id)
                    ->where('attachment_id', $attachment->id)
                    ->first();

                $attachment->status = $indicatorMedia ? 'Completed' : 'Not Uploaded';
                $attachment->start_page = $indicatorMedia ? ($indicatorMedia->start_page ?? 1) : 1; // Default to 1 if not set
            }

            return view("$this->module_path.$this->module_name.fill_questions", compact(
                'standard',
                'substandards',
                'indicators',
                'questions',
                'application_id',
                'standard_id',
                'currentSubStandard',
                'currentIndicator',
                'answers',
                'attachments'
            ));
        } catch (\Exception $e) {
            Log::error('Error in fillQuestions method: ' . $e->getMessage());
            Alert::toast('An error occurred while fetching questions. Please try again.', 'error');
            return redirect()->back();
        }
    }

    public function submitAnswers(Request $request)
    {
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);

        DB::beginTransaction();
        try {
            // Fetch the application
            $$module_name_singular = $module_model::findOrFail($request->application_id);

            // Authorization check
            $gate_response = Gate::inspect('questionresponseedit', $$module_name_singular);
            if (!$gate_response->allowed()) {
                Auth::logout(); // Logout the user
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect('/login')->with('unauthorized', $gate_response->message());
            }

            // Validate the request
            $request->validate([
                'application_id' => 'required|exists:applications,id',
                'answers' => 'required|array',
                'answers.*.question_id' => 'required|exists:questions,id',
                'answers.*.answer' => 'nullable|string', // Allow null for answer
            ]);

            $application_id = $request->application_id;
            $indicator_id = $request->indicator_id;

            // Get all required MANDATORY attachments for the current indicator
            $requiredAttachments = Attachement::whereIn('id', function ($query) use ($indicator_id) {
                $query->select('attachment_id')
                    ->from('indicator_attachment')
                    ->where('indicator_id', $indicator_id);
            })
                ->where('is_required', 'Mandatory') // Only check mandatory attachments
                ->get();

            // Get all uploaded attachments for the current application
            $uploadedAttachments = IndicatorMedia::where('application_id', $application_id)
                ->pluck('attachment_id')
                ->toArray();

            // Check which required attachments are missing
            $missingAttachments = $requiredAttachments->filter(function ($attachment) use ($uploadedAttachments) {
                return !in_array($attachment->id, $uploadedAttachments);
            });

            // If there are missing attachments, show a warning
            if ($missingAttachments->isNotEmpty()) {
                $missingAttachmentNames = $missingAttachments->pluck('name')->implode(', ');
                Alert::warning('Missing Required Attachments', "The following mandatory attachments are missing: $missingAttachmentNames")
                    ->showConfirmButton()
                    ->buttonsStyling(true)
                    ->reverseButtons();
                return back()->withInput();
            }

            // Save answers
            foreach ($request->answers as $answerData) {
                $answer = $answerData['answer'];

                // Check if the answer contains only HTML tags or is empty
                if ($this->isEmptyAnswer($answer)) {
                    Alert::toast('Answer cannot be empty.', 'error');
                    return back()->withInput();
                }

                // Insert or update the answer
                Answer::updateOrCreate(
                    [
                        'question_id' => $answerData['question_id'],
                        'application_id' => $application_id
                    ],
                    [
                        'answer' => $answer,
                        'created_by' => auth()->id(),
                        'updated_by' => auth()->id(),
                    ]
                );
            }

            DB::commit();

            // Handle navigation and success
            $substandard_id = $request->substandard_id;
            $standard_id = $request->standard_id;
            $direction = $request->input('direction', 'next');

            $indicators = Indicator::where('substandard_id', $substandard_id)->orderBy('id')->get();

            $currentIndicatorIndex = $indicators->search(fn($indicator) => $indicator->id == $indicator_id);

            if ($direction === 'previous' && $currentIndicatorIndex > 0) {
                $previousIndicator = $indicators[$currentIndicatorIndex - 1];
                return redirect()->route("backend.{$this->module_name}.fillQuestions", [
                    'application_id' => $application_id,
                    'standard_id' => $standard_id,
                    'substandard_id' => $substandard_id,
                    'indicator_id' => $previousIndicator->id
                ]);
            }

            if ($currentIndicatorIndex !== false && isset($indicators[$currentIndicatorIndex + 1])) {
                $nextIndicator = $indicators[$currentIndicatorIndex + 1];
                return redirect()->route("backend.{$this->module_name}.fillQuestions", [
                    'application_id' => $application_id,
                    'standard_id' => $standard_id,
                    'substandard_id' => $substandard_id,
                    'indicator_id' => $nextIndicator->id
                ]);
            }

            $nextSubStandard = Substandard::where('standard_id', $standard_id)
                ->where('id', '>', $substandard_id)
                ->first();

            if ($nextSubStandard) {
                $nextIndicator = $nextSubStandard->indicators()->first();

                if ($nextIndicator) {
                    return redirect()->route("backend.{$this->module_name}.fillQuestions", [
                        'application_id' => $application_id,
                        'standard_id' => $standard_id,
                        'substandard_id' => $nextSubStandard->id,
                        'indicator_id' => $nextIndicator->id
                    ]);
                }
            }

            Alert::toast('All questions completed!', 'success');
            return redirect()->route("backend.{$this->module_name}.standards", [
                'id' => $application_id
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error in submitAnswers method: ' . $e->getMessage());
            Alert::toast('An error occurred while submitting answers. Please try again.', 'error');
            return redirect()->back();
        }
    }


    // Function to check if the answer is empty or contains only <br> tags
    private function isEmptyAnswer($answer)
    {
        if (empty($answer)) {
            return true;
        }

        // Remove all HTML tags
        $cleanedAnswer = strip_tags($answer);

        // Remove non-breaking spaces (&nbsp;) and regular spaces
        $cleanedAnswer = str_replace('&nbsp;', '', $cleanedAnswer);
        $cleanedAnswer = preg_replace('/\s+/', '', $cleanedAnswer);

        // Check if the cleaned answer is empty
        return empty($cleanedAnswer);
    }

 




    public function store(Request $request)
    {
        //security feature
        $key = 'application-submissions:' . $request->ip();
        $maxAttempts = 5;
        $decayMinutes = 1440; // 24 hours (in minutes)

        // Check if the user has exceeded the limit
        if (RateLimiter::tooManyAttempts($key, $maxAttempts)) {
            $seconds = RateLimiter::availableIn($key);
            return back()->withErrors([
                'limit' => 'You can only submit 5 applications per day. Please try again in '
                    . ceil($seconds / 3600) . ' hours.'
            ]);
        }

        // Increment the attempt count
        RateLimiter::hit($key, $decayMinutes);

        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);
        $module_action = 'Store';

        // Validate request
        $request->validate([
            'institute_id' => 'required',
            'campus_id' => 'required',
            'program_start_year' => 'nullable|integer|min:1900|max:' . date('Y'),
            'graduation_cycles' => 'required|integer|min:1',
            'students_graduated' => 'required|integer|min:0',
            'program_id' => 'required|exists:programs,id',
            'delegation_letter' => 'required|file|mimes:pdf|max:8048',
            'institute_ownership' => 'required|in:Public,Private', // Add this line
            'application_form' => 'required|file|mimes:pdf|max:8048',
        ]);



        // Handle Institute
        $instituteInput = $request->input('institute_id');
        $institute = is_numeric($instituteInput) ?
            Institute::findOrFail($instituteInput) :
            Institute::create(['name' => $instituteInput]);

        // Handle Campus
        $campusInput = $request->input('campus_id');
        $campus = is_numeric($campusInput) ?
            Campus::findOrFail($campusInput) :
            Campus::create(['name' => $campusInput]);

        // Check for existing record with the same criteria
        $existingRecord = $module_model::where([
            'program_id' => $request->input('program_id'),
            'institution_id' => $institute->id,
            'campus_id' => $campus->id,
        ])->latest()->first();

        if ($existingRecord) {
            $rejectedStatuses = [
                ApplicationStatusEnum::PROFILE_REJ,
                ApplicationStatusEnum::DESK_REJECT,
                ApplicationStatusEnum::REJ,
            ];

            $oneWeekAgo = Carbon::now()->subWeek();
            if (in_array($existingRecord->status, $rejectedStatuses)) {
                if ($existingRecord->updated_at->gt($oneWeekAgo)) {
                    return back()->with('info', 'Your application was previously rejected. Please take at least one week to revise and resubmit.');
                }
            } else {
                return back()->with('error', 'Your application is already in progress. You are not allowed to resubmit.');
            }
        }

        try {
            // Start a database transaction
            DB::beginTransaction();

            // Prepare the data array
            $data = [
                'application_type' => $request->input('application_type'),
                'institute_type' => $request->input('institute_type'),
                'institution_id' => $institute->id,
                'campus_id' => $campus->id,
                'program_start_year' => $request->input('program_start_year'),
                'graduation_cycles' => $request->input('graduation_cycles'),
                'students_graduated' => $request->input('students_graduated'),
                'institute_ownership' => $request->input('institute_ownership'), // Add this line
                'program_id' => $request->input('program_id'),
                'status' => 'Submitted',
            ];

            // Create the record
            $record = $module_model::create($data);

            // Generate application ID
            $application_id = "ETA" . date('Y') . $record->id;
            $record->name = $application_id;
            $record->save();

            // Attach files
            if ($request->hasFile('delegation_letter')) {
                $record->addMedia($request->file('delegation_letter'))
                    ->toMediaCollection('delegation_letters', 'private');
            }
            if ($request->hasFile('application_form')) {
                $record->addMedia($request->file('application_form'))
                    ->toMediaCollection('application_forms', 'private');
            }

            // Record status change
            ApplicationStatusHistory::recordStatusChange($record, ApplicationStatusEnum::DRAFT);

            // Send Notification to User with ID 1
            // $adminUser = User::find(1);
            // if ($adminUser) {
            //     $adminUser->notify(new NewApplicationSubmittedNotification($record));
            // }

            // Commit the transaction
            DB::commit();

            // Success message
            Alert::toast(Str::singular($module_title) . "' Added Successfully", 'success')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();

            logUserAccess($module_title . ' ' . $module_action . ' | Id: ' . $record->id);

            return redirect("admin/{$module_name}");
        } catch (\Exception $e) {
            // Roll back the transaction on error
            DB::rollBack();

            // Log error
            Log::error("Error storing application: " . $e->getMessage());

            return back()->with('error', 'Failed to submit the application. Please try again.');
        }
    }

    public function beginDeskReview($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->route('backend.dashboard');
        }
        try {
            // Validate the input to ensure it's a valid integer


            $module_title = $this->module_title;
            $module_name = $this->module_name;
            $module_path = $this->module_path;
            $module_icon = $this->module_icon;
            $module_model = $this->module_model;
            $module_name_singular = Str::singular($module_name);

            $application = Application::findOrFail($id);

            // Get the current review phase from the application
            $review_phase = $application->review_phase; // Assuming 'review_phase' is a column in the applications table
            $doc_version = $application->doc_version ?? 1; // Default to 1 if not set

            // Determine the heading based on the review phase
            $heading = match ($review_phase) {
                'desk_review' => $doc_version == 2 ? 'Desk Review (Revision)' : 'Desk Review',
                'toa_first_round' => 'First Round TOA Review',
                'toa_second_round' => 'Second Round Review (Site Visit Review)',
                default => 'Review',
            };


            // Check if the user is authorized to begin the desk review
            $gate_response = Gate::inspect('canviewbeginDeskReview', $application);

            if (!$gate_response->allowed()) {
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->back();
            }

            $desk_id = $application->desk_id;
            $has_desk = !is_null($desk_id);
            $desks = Desk::select('id', 'name')->get();

            $sss_exists = ApplicationSSSSER::where('application_id', $id)
                ->where('type', 'sss_document')
                ->exists();

            $ser_exists = ApplicationSSSSER::where('application_id', $id)
                ->where('type', 'self_evaluation')
                ->exists();

            // Check if SSS review exists in SssReview table
            $sss_review_exists = SssReview::where('application_id', $id)
                ->where('created_by', auth()->id())
                ->exists();

            // Check if SER review exists in SerReview table
            $ser_review_exists = SerReview::where('application_id', $id)
                ->where('created_by', auth()->id())
                ->exists();

            // Get review progress
            $standard = Standard::first(); // Adjust as needed to fetch the correct standard
            // Step 1: Get `program_id` from the Application
            $program_id = $application->program_id;

            // Step 2: Get `DCT` using `program_id`
            $dct = DCT::where('program_id', $program_id)->first();

            // Step 3: Get all Standards for this DCT
            $standards = $dct ? Standard::where('dct_id', $dct->id)->get() : collect();

            // Step 4: Aggregate indicators
            $total_indicators = 0;
            $reviewed_indicators = 0;

            foreach ($standards as $standard) {
                $total_indicators += $standard->totalIndicators();
                $reviewed_indicators += $standard->reviewedIndicators($id, auth()->id());
            }

            if ($total_indicators == 0) {
                $review_status = 'Not Started';
                $status_class = 'bg-warning text-dark';
            } elseif ($reviewed_indicators == 0) {
                $review_status = 'Not Started';
                $status_class = 'bg-warning text-dark';
            } elseif ($reviewed_indicators < $total_indicators) {
                $review_status = 'In Progress';
                $status_class = 'bg-primary';
            } else {
                $review_status = 'Completed';
                $status_class = 'bg-success';
            }

            $isChairperson = DeskReviewAssignment::where('chair_id', auth()->id())
                ->where('application_id', $id)
                ->exists();



            // Fetch the desk review assignment status
            $deskReviewAssignment = DeskReviewAssignment::where('application_id', $application->id)
                ->where('assessor_id', auth()->id())
                ->where('review_phase', $review_phase)
                ->whereNull('deleted_at')
                ->latest() // Orders by `created_at` in descending order
                ->first(); // Retrieves the latest record

            $deskReviewStatus = $deskReviewAssignment ? $deskReviewAssignment->status : null;

            // If $review_phase is not 'desk_review', set $sss_review_exists to true
            if ($review_phase !== 'desk_review') {
                $sss_review_exists = true;
                $ser_review_exists = true;
            }


            // Check Exit Report requirement
            $exit_report_required = false;
            $can_upload_exit_report = false;
            $can_re_upload_exit_report = false;
            $exit_report_exists = false;

            if ($application->doc_version > 3 && $review_phase === 'toa_second_round') {
                $exit_report_required = true;

                // Check if exit report exists in Application model's media collection
                $exit_report_exists = $application->getFirstMedia('exit_report') ? true : false;

                // Check if current user is assigned as a toa_second_round reviewer
                $is_current_reviewer = DeskReviewAssignment::where('application_id', $application->id)
                    ->where('assessor_id', auth()->id())
                    ->where('review_phase', 'toa_second_round')
                    ->whereNull('deleted_at')
                    ->exists();

                if ($is_current_reviewer && !$exit_report_exists) {
                    $can_upload_exit_report = true;
                }

                if ($is_current_reviewer && $exit_report_exists) {
                    $can_re_upload_exit_report = true;
                }
            }


            return view("$module_path.$module_name.begindeskreview", compact(
                'id',
                'sss_exists',
                'ser_exists',
                'sss_review_exists',
                'ser_review_exists',
                'has_desk',
                'desks',
                'isChairperson',
                'application',
                'review_status',
                'status_class',
                'deskReviewStatus',
                'review_phase',
                'heading',
                'exit_report_required',
                'exit_report_exists',
                'can_re_upload_exit_report',
                'can_upload_exit_report'
            ));
        } catch (\Exception $e) {
            // Log the error for debugging
            log::error('Error in beginDeskReview: ' . $e->getMessage());

            Alert::toast('An error occurred while loading the desk review page. Please try again.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->route('dashboard');
        }
    }
    public function showStandardsForDeskReview($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_name_singular = Str::singular($module_name);
        $application = Application::findOrFail($id);

        // Step 1: Get `program_id` from the Application
        $program_id = $application->program_id;


        //Get Program Description
        $program = Program::find($program_id);
        $program_description = $program ? $program->description : 'Unknown Program';

        // Step 2: Find `DCTS` using `program_id`
        $dcts = DCT::where('program_id', $program_id)->first();

        // Step 3: Get all standards linked to `dct_id`, ordered by id DESC
        $standards = $dcts ? Standard::where('dct_id', $dcts->id)->orderBy('id', 'asc')->get() : collect();

        // Pass data to the view
        return view("$this->module_path.$this->module_name.standards_for_desk_review", compact('id', 'standards', 'program_description'));
    }

    //decion made by chair to say acceoted or rejected
    // public function deskChairFinalDecision(Request $request)
    // {
    //     $request->validate([
    //         'application_id' => 'required|exists:applications,id',
    //         'desk_decision' => 'required|in:desk_review_revision_requested,desk_reject,desk_review_accepted,fully_accredited,provitionally_accredited,rejected',
    //     ]);

    //     $application = Application::findOrFail($request->application_id);
    //     $application->update(['desk_decision' => $request->desk_decision]);

    //     Alert::toast('Final decision updated successfully.', 'success');
    //     return redirect()->back();
    // }


    // public function deskChairFinalDecision(Request $request)
    // {
    //     $request->validate([
    //         'application_id' => 'required|exists:applications,id',
    //         'desk_decision' => 'required|in:desk_review_revision_requested,desk_reject,desk_review_accepted,fully_accredited,provitionally_accredited,rejected',
    //     ]);

    //     try {
    //         DB::transaction(function () use ($request) {
    //             $application = Application::with(['institute', 'program', 'campus'])->findOrFail($request->application_id);

    //             // Update desk decision first
    //             $application->desk_decision = $request->desk_decision;

    //             // Handle certificate creation for eligible applications
    //             if (
    //                 in_array($application->doc_version, [5, 6]) &&
    //                 $application->updated_at >= now()->subDay()
    //             ) {
    //                 if (in_array($request->desk_decision, ['fully_accredited', 'provitionally_accredited'])) {
    //                     // Determine validity period
    //                     $validYears = $request->desk_decision === 'fully_accredited' ? 5 : 3;

    //                     // Create certificate with all required IDs
    //                     $certificate = Certificate::create([
    //                         'application_id' => $application->id,
    //                         'institute_id' => $application->institution_id,
    //                         'program_id' => $application->program_id,
    //                         'campus_id' => $application->campus_id,
    //                         'certificate_number' => $application->name,
    //                         'institute_name' => $application->institute->name,
    //                         'institute_type' => $application->institute_type ?? 'HEI',
    //                         'campus_name' => optional($application->campus)->name,
    //                         'program_name' => $application->program->name,
    //                         'issued_date' => now(),
    //                         'valid_until' => now()->addYears($validYears),
    //                         'accreditation_status' => $this->mapToCertificateStatus($request->desk_decision),
    //                         'status' => 1, // Active
    //                     ]);

    //                     // Update application status with proper enum transformation
    //                     $application->review_phase = $this->transformReviewPhase($request->desk_decision);
    //                     $application->doc_version = 6;
    //                     ApplicationStatusHistory::recordStatusChange(
    //                         $application,
    //                         ApplicationStatusEnum::COMPLETED
    //                     );

    //                     // Generate PDF binary via the same method
    //                     $pdfBinary = $this->pdfPrintCertificate($application->id, true);

    //                     // Save to Spatie Media Library
    //                     $tempFile = storage_path('app/private/temp_certificate_' . $certificate->id . '.pdf');
    //                     file_put_contents($tempFile, $pdfBinary);

    //                     // Save to Spatie (private storage)
    //                     $certificate
    //                         ->addMedia($tempFile)
    //                         ->usingFileName('certificate_' . $certificate->id . '.pdf')
    //                         ->storingConversionsOnDisk('private')
    //                         ->toMediaCollection('certificate_pdf', 'private');

    //                     // Delete temp file if it exists
    //                     if (file_exists($tempFile)) {
    //                         unlink($tempFile);
    //                     }
    //                 }
    //             }

    //             if (in_array($request->desk_decision, ['rejected',])) {

    //                 $application->review_phase = $this->transformReviewPhase($request->desk_decision);
    //                 $application->doc_version = 6;
    //                 ApplicationStatusHistory::recordStatusChange(
    //                     $application,
    //                     ApplicationStatusEnum::COMPLETED
    //                 );
    //             }

    //             $application->save();
    //         });

    //         // Show success message
    //         if (in_array($request->desk_decision, ['fully_accredited', 'provitionally_accredited'])) {

    //             Alert::toast(
    //                 'Final Council decision uploaded successfully. Certificate generated successfully — you can check it in the downloadable menu.',
    //                 'success'
    //             )->position('top-end')->autoClose(9000)->timerProgressBar();
    //         } else if ($request->desk_decision === 'rejected') {
    //             Alert::toast(
    //                 'Final Council decision uploaded successfully. Application has been rejected.',
    //                 'success'
    //             )->position('top-end')->autoClose(9000)->timerProgressBar();
    //         } else {
    //             Alert::toast('Desk Decision was set successfully.', 'success')
    //                 ->position('top-end')
    //                 ->autoClose(5000)
    //                 ->timerProgressBar();
    //         }
    //     } catch (\Exception $e) {
    //         Alert::toast('An error occurred while processing your request. Please try again.', 'error');
    //         Log::error('Desk chair final decision error: ' . $e->getMessage());
    //         return redirect()->back()->withInput();
    //     }

    //     return redirect()->back();
    // }

    public function deskChairFinalDecision(Request $request)
    {
        $request->validate([
            'application_id' => 'required|exists:applications,id',
            'desk_decision' => 'required|in:desk_review_revision_requested,desk_reject,desk_review_accepted,fully_accredited,provitionally_accredited,rejected',
        ]);

        try {
            DB::transaction(function () use ($request) {
                $application = Application::with(['institute', 'program', 'campus'])->findOrFail($request->application_id);
                $instituteName = $application->institute->name;
                $programName = $application->program->name;

                // Store previous decision for comparison
                $previousDecision = $application->desk_decision;

                // Update desk decision first
                $application->desk_decision = $request->desk_decision;

                // Prepare notification variables
                $notificationTitle = '';
                $notificationMessage = '';
                $rolesToNotify = ['ceo', 'council member'];
                $statusEnum = null;

                // Only handle notifications for final decisions
                if (in_array($request->desk_decision, ['fully_accredited', 'provitionally_accredited', 'rejected'])) {
                    // Set status enum based on decision
                    $statusEnum = match ($request->desk_decision) {
                        'fully_accredited' => ApplicationStatusEnum::ACC,
                        'provitionally_accredited' => ApplicationStatusEnum::COND_ACC,
                        'rejected' => ApplicationStatusEnum::REJ,
                    };

                    // Set notification content
                    [$notificationTitle, $notificationMessage] = match ($request->desk_decision) {
                        'fully_accredited' => [
                            "Application Fully Accredited - {$instituteName} - {$programName}",
                            "The application has been fully accredited by the Council."
                        ],
                        'provitionally_accredited' => [
                            "Application Provisionally Accredited - {$instituteName} - {$programName}",
                            "The application has been provisionally accredited by the Council."
                        ],
                        'rejected' => [
                            "Application Rejected - {$instituteName} - {$programName}",
                            "The application has been rejected by the Council."
                        ],
                    };

                    // Handle certificate creation for accredited cases
                    if (in_array($request->desk_decision, ['fully_accredited', 'provitionally_accredited'])) {
                        $validYears = $request->desk_decision === 'fully_accredited' ? 5 : 3;

                        $certificate = Certificate::create([
                            'application_id' => $application->id,
                            'institute_id' => $application->institution_id,
                            'program_id' => $application->program_id,
                            'campus_id' => $application->campus_id,
                            'certificate_number' => $application->name,
                            'institute_name' => $application->institute->name,
                            'institute_type' => $application->institute_type ?? 'HEI',
                            'campus_name' => optional($application->campus)->name,
                            'program_name' => $application->program->name,
                            'issued_date' => now(),
                            'valid_until' => now()->addYears($validYears),
                            'accreditation_status' => $this->mapToCertificateStatus($request->desk_decision),
                            'status' => 1,
                        ]);

                        // Generate and save PDF
                        $pdfBinary = $this->pdfPrintCertificate($application->id, true);
                        $tempFile = storage_path('app/private/temp_certificate_' . $certificate->id . '.pdf');
                        file_put_contents($tempFile, $pdfBinary);
                        $certificate->addMedia($tempFile)
                            ->usingFileName('certificate_' . $certificate->id . '.pdf')
                            ->toMediaCollection('certificate_pdf', 'private');
                        if (file_exists($tempFile)) {
                            unlink($tempFile);
                        }
                    }

                    // Update application status
                    $application->review_phase = $this->transformReviewPhase($request->desk_decision);
                    $application->doc_version = 6;
                    ApplicationStatusHistory::recordStatusChange(
                        $application,
                        ApplicationStatusEnum::COMPLETED
                    );
                }

                $application->save();

                // Send notifications only for final decisions
                if ($statusEnum && $previousDecision !== $request->desk_decision) {
                    // Get users to notify (roles + creator)
                    $usersToNotify = User::whereHas('roles', function ($query) use ($rolesToNotify) {
                        $query->whereIn('name', $rolesToNotify);
                    })->get();

                    // Add the creator of the application
                    if ($creator = User::find($application->created_by)) {
                        $usersToNotify->push($creator);
                    }

                    // Prepare notification data
                    $notificationData = [
                        'title' => $notificationTitle,
                        'message' => $notificationMessage,
                        'module' => 'Applications',
                        'type' => 'council_decision',
                        'icon' => 'fas fa-gavel',
                        'urlBackend' => route('backend.applications.profileview', $application->id),
                        'urlFrontend' => '',
                        'application' => $application,
                        'status' => $statusEnum,
                    ];

                    // Send notifications
                    foreach ($usersToNotify as $user) {
                        $user->notify(new GenericNotification(...$notificationData));
                    }
                }
            });

            // Show success message
            if (in_array($request->desk_decision, ['fully_accredited', 'provitionally_accredited'])) {
                Alert::toast(
                    'Final Council decision uploaded successfully. Certificate generated successfully.',
                    'success'
                )->position('top-end')->autoClose(9000)->timerProgressBar();
            } else if ($request->desk_decision === 'rejected') {
                Alert::toast(
                    'Final Council decision uploaded successfully. Application has been rejected.',
                    'success'
                )->position('top-end')->autoClose(9000)->timerProgressBar();
            } else {
                Alert::toast('Desk Decision was set successfully.', 'success')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
            }
        } catch (\Exception $e) {
            Alert::toast('An error occurred while processing your request. Please try again.', 'error');
            Log::error('Desk chair final decision error: ' . $e->getMessage());
            return redirect()->back()->withInput();
        }

        return redirect()->back();
    }

    protected function mapToCertificateStatus(string $deskDecision): string
    {
        return match ($deskDecision) {
            'fully_accredited' => 'Full Accreditation',
            'provitionally_accredited' => 'Provisional Accreditation',
            default => $deskDecision
        };
    }

    protected function transformReviewPhase(string $deskDecision): string
    {
        return match ($deskDecision) {
            'fully_accredited' => 'accredited',
            'provitionally_accredited' => 'conditional_accredited',
            'desk_reject' => 'desk_reject',
            'rejected' => 'accreditation_rejected',
            'desk_review_accepted' => 'documents_to_council',
            'desk_review_revision_requested' => 'desk_revision',
            default => 'desk_review'
        };
    }

    public function fillReviews($application_id, $standard_id, $substandard_id = null, $indicator_id = null)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        try {
            // Validate the input to ensure it's a valid integer
            if (!is_numeric($application_id) || $application_id <= 0 || !is_numeric($standard_id) || $standard_id <= 0) {
                Alert::toast('Invalid application or standard ID.', 'error')
                    ->position('center')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->route('backend.dashboard');
            }

            // Retrieve the application
            $application = Application::findOrFail($application_id);

            // Get the current review phase from the application
            $review_phase = $application->review_phase; // Assuming 'review_phase' is a column in the applications table

            // Determine the label and field name based on the review phase
            $label = in_array($review_phase, ['desk_review', 'desk_revision']) ? 'Your Review' : 'Key Findings';
            $field_name = 'review'; // Always use the same field name for simplicity

            // Rest of the method remains the same...
            $module_title = $this->module_title;
            $module_name = $this->module_name;
            $module_path = $this->module_path;
            $module_icon = $this->module_icon;

            $standard = Standard::findOrFail($standard_id);
            $substandards = Substandard::where('standard_id', $standard_id)->get();

            if (!$substandard_id && $substandards->isNotEmpty()) {
                $currentSubStandard = $substandards->first();
            } else {
                $currentSubStandard = $substandards->find($substandard_id);
            }

            if (!$currentSubStandard) {
                Alert::warning('No Substandards Found', 'This standard does not have any substandards defined.')
                    ->position('center')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->route("backend.$module_name.showStandardsForDeskReview", ['id' => $application_id]);
            }

            $indicators = Indicator::where('substandard_id', $currentSubStandard->id)->get();

            if (!$indicator_id && $indicators->isNotEmpty()) {
                $currentIndicator = $indicators->first();
            } else {
                $currentIndicator = $indicators->find($indicator_id);
            }

            if (!$currentIndicator) {
                return redirect()->route("backend.$module_name.showStandardsForDeskReview", ['id' => $application_id])
                    ->with('error', 'No indicators found for this substandard.');
            }

            $questions = Question::where('indicator_id', $currentIndicator->id)->get();

            // Fetch existing answers
            $answers = Answer::where('application_id', $application_id)
                ->whereIn('question_id', $questions->pluck('id'))
                ->pluck('answer', 'question_id');

            // Fetch required attachments
            $attachments = Attachement::whereIn('id', function ($query) use ($currentIndicator) {
                $query->select('attachment_id')
                    ->from('indicator_attachment')
                    ->where('indicator_id', $currentIndicator->id);
            })->get();

            // Add status and start_page for each attachment
            foreach ($attachments as $attachment) {
                $indicatorMedia = IndicatorMedia::where('application_id', $application_id)
                    ->where('attachment_id', $attachment->id)
                    ->first();

                $attachment->status = $indicatorMedia ? 'Completed' : 'Not Uploaded';
                $attachment->start_page = $indicatorMedia ? ($indicatorMedia->start_page ?? 1) : 1; // Default to 1 if not set
            }

            // Fetch existing review for the current indicator, application, and logged-in user
            $ownReview = DeskReview::where('indicator_id', $currentIndicator->id)
                ->where('application_id', $application_id)
                ->where('reviewer_id', auth()->id())
                ->where('review_phase', $review_phase) // Filter by review phase
                ->first();

            // Check if the current user is a chairperson
            $isChairperson = DeskReviewAssignment::where('chair_id', auth()->id())
                ->where('application_id', $application_id)
                ->exists();

            // Fetch all reviews if the user is a chairperson, excluding their own review and only for completed desk review assignments
            $allReviews = [];
            if ($isChairperson) {
                $allReviews = DeskReview::where('application_id', $application_id)
                    ->where('indicator_id', $currentIndicator->id)
                    ->where('reviewer_id', '!=', auth()->id()) // Exclude the reviewer's own review
                    ->where('review_phase', $review_phase) // Filter by the current review phase
                    ->whereHas('deskReviewAssignment', function ($query) use ($review_phase) {
                        $query->where('status', 'Completed')
                            ->where('review_phase', $review_phase); // Filter by the current review type
                    })
                    ->with('reviewer') // Load the reviewer relationship
                    ->get();
            }
            
            

            // Determine if the current user can edit the review field
            $canEditReview = !($review_phase == 'toa_second_round' && !$isChairperson);

 
            return view("$this->module_path.$this->module_name.fill_reviews", compact(
                'standard',
                'substandards',
                'indicators',
                'questions',
                'application_id',
                'standard_id',
                'currentSubStandard',
                'currentIndicator',
                'canEditReview',
                'answers',
                'attachments',
                'ownReview', // Pass the reviewer's own review to the view
                'isChairperson', // Pass the chairperson status to the view
                'allReviews', // Pass all reviews to the view if the user is a chairperson
                'review_phase', // Pass the review phase to the view
                'label', // Pass the dynamic label to the view
                'field_name' // Pass the dynamic field name to the view
            ));
        } catch (\Exception $e) {
            // Log the error for debugging
            Log::error('Error in fillReviews: ' . $e->getMessage());

            Alert::toast('An error occurred while loading the review page. Please try again.', 'error')
                ->position('center')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->route('dashboard');
        }
    }

    public function submitDeskReview(Request $request)
    {
        
        DB::beginTransaction();
        try {
            // Validate the request
            $request->validate([
                'application_id' => 'required|exists:applications,id',
                'standard_id' => 'required|exists:standards,id',
                'substandard_id' => 'required|exists:substandards,id',
                'indicator_id' => 'required|exists:indicators,id',
                'rating_value' => 'nullable|integer|between:1,5', // Rating value for TOA reviews
                'review' => 'required|string', // Review comment can be nullable
            ]);

            // Check if the review is empty
            if ($this->isEmptyAnswer($request->review)) {
                Alert::toast('Review cannot be empty.', 'error')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return back()->withInput();
            }

            // Get the current logged-in user ID (reviewer_id)
            $reviewer_id = auth()->id();
            $application = Application::find($request->application_id);
            $currentReviewPhase = $application->review_phase;

            // Check if the current user is a chairperson
            $isChairperson = DeskReviewAssignment::where('chair_id', $reviewer_id)
                ->where('application_id', $request->application_id)
                ->exists();

            // Save or update the review comment in the deskreviews table
            DeskReview::updateOrCreate(
                [
                    'indicator_id' => $request->indicator_id,
                    'standard_id' => $request->standard_id,
                    'application_id' => $request->application_id,
                    'reviewer_id' => $reviewer_id,
                    'review_phase' => $currentReviewPhase, // Include review phase in the unique key
                ],
                [
                    'comment' => $request->review,
                    'reviewer_or_head' => $isChairperson ? 1 : 0, // Set reviewer_or_head based on chairperson status
                    'created_by' => $reviewer_id,
                    'updated_by' => $reviewer_id,
                    'rating_value' => $request->rating_value, // Save the rating value
                ]
            );

            // Handle navigation logic
            $application_id = $request->application_id;
            $indicator_id = $request->indicator_id;
            $substandard_id = $request->substandard_id;
            $standard_id = $request->standard_id;
            $direction = $request->input('direction', 'next');

            // Get all indicators for the current substandard
            $indicators = Indicator::where('substandard_id', $substandard_id)->orderBy('id')->get();

            // Find the current indicator index
            $currentIndicatorIndex = $indicators->search(fn($indicator) => $indicator->id == $indicator_id);

            // Handle "Previous" navigation
            if ($direction === 'previous' && $currentIndicatorIndex > 0) {
                $previousIndicator = $indicators[$currentIndicatorIndex - 1];
                DB::commit();
                return redirect()->route("backend.{$this->module_name}.fillReviews", [
                    'application_id' => $application_id,
                    'standard_id' => $standard_id,
                    'substandard_id' => $substandard_id,
                    'indicator_id' => $previousIndicator->id,
                ]);
            }

            // Handle "Next" navigation within the same substandard
            if ($currentIndicatorIndex !== false && isset($indicators[$currentIndicatorIndex + 1])) {
                $nextIndicator = $indicators[$currentIndicatorIndex + 1];
                DB::commit();
                return redirect()->route("backend.{$this->module_name}.fillReviews", [
                    'application_id' => $application_id,
                    'standard_id' => $standard_id,
                    'substandard_id' => $substandard_id,
                    'indicator_id' => $nextIndicator->id,
                ]);
            }

            // Handle "Next" navigation to the next substandard
            $nextSubStandard = Substandard::where('standard_id', $standard_id)
                ->where('id', '>', $substandard_id)
                ->first();

            if ($nextSubStandard) {
                $nextIndicator = $nextSubStandard->indicators()->first();

                if ($nextIndicator) {
                    DB::commit();
                    return redirect()->route("backend.{$this->module_name}.fillReviews", [
                        'application_id' => $application_id,
                        'standard_id' => $standard_id,
                        'substandard_id' => $nextSubStandard->id,
                        'indicator_id' => $nextIndicator->id,
                    ]);
                }
            }

            // If no more indicators or substandards, redirect to the standards page
            DB::commit();
            return redirect()->route("backend.{$this->module_name}.showStandardsForDeskReview", [
                'id' => $application_id,
            ])->with('success', 'All reviews completed!');
        } catch (\Exception $e) {
            DB::rollBack();
            // Log the error for debugging
            Log::error('Error in submitDeskReview: ' . $e->getMessage());

            Alert::toast('An error occurred while submitting the review. Please try again.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return back()->withInput();
        }
    }


    public function getSERReview($application_id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        try {
            $module_title = $this->module_title;
            $module_name = $this->module_name;
            $module_path = $this->module_path;
            $module_icon = $this->module_icon;
            $module_model = $this->module_model;
            $module_action = "Review";
            $module_name_singular = Str::singular($module_name);

            // Fetch the current user's role (reviewer or chairperson)
            $isChairperson = SssReview::where('application_id', $application_id)
                ->whereHas('deskReviewAssignment', function ($query) {
                    $query->where('chair_id', auth()->id());
                })
                ->exists();

            // Fetch existing response for the current user
            $response = SerReview::where('application_id', $application_id)
                ->where('created_by', auth()->id())
                ->first();

            // Fetch all reviewers' comments if the current user is a chairperson
            $reviewersComments = [];

            if ($isChairperson) {
                $reviewersComments = SerReview::where('ser_response.application_id', $application_id)
                    ->join('desk_review_assignment', function ($join) use ($application_id) {
                        $join->on('desk_review_assignment.application_id', '=', 'ser_response.application_id')
                            ->on('desk_review_assignment.assessor_id', '=', 'ser_response.created_by')
                            ->where('desk_review_assignment.status', 'Completed');
                    })
                    ->join('users as reviewer', 'desk_review_assignment.assessor_id', '=', 'reviewer.id')  // Join with the correct assessor
                    ->select('ser_response.*', 'reviewer.name as reviewer_name')  // Select the reviewer’s name
                    ->get();
            }

            // Get all questions
            $questions = SerReviewQuestionsEnumerator::getAllQuestions();

            return view("$module_path.$module_name.serreview", [
                'response' => $response,
                'questions' => $questions,
                'reviewersComments' => $reviewersComments, // Pass reviewers' comments to the view
                'isChairperson' => $isChairperson, // Pass chairperson flag to the view
                'application_id' => $application_id,
            ]);
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'An error occurred while fetching the review.');
        }
    }
    public function saveSERReview(Request $request, $application_id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        DB::beginTransaction();
        try {
            // Validate the application_id
            if (!is_numeric($application_id)) {
                Alert::toast('Invalid application ID.', 'error')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->back();
            }

            // Check if the application exists
            $application = Application::find($application_id);
            if (!$application) {
                Alert::toast('Application not found.', 'error')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->back();
            }

            // Validate the request
            $request->validate([
                'q1_yes_no' => 'nullable|in:0,1',
                'q1_comment' => 'nullable|string',
                'q2_yes_no' => 'nullable|in:0,1',
                'q2_comment' => 'nullable|string',
                'q3_yes_no' => 'nullable|in:0,1',
                'q3_comment' => 'nullable|string',
                'q4_yes_no' => 'nullable|in:0,1',
                'q4_comment' => 'nullable|string',
                'q5_yes_no' => 'nullable|in:0,1',
                'q5_comment' => 'nullable|string',
                'q6_yes_no' => 'nullable|in:0,1',
                'q6_comment' => 'nullable|string',
                'q7_yes_no' => 'nullable|in:0,1',
                'q7_comment' => 'nullable|string',
                'q8_yes_no' => 'nullable|in:0,1',
                'q8_comment' => 'nullable|string',
                'q9_yes_no' => 'nullable|in:0,1',
                'q9_comment' => 'nullable|string',
                'q10_yes_no' => 'nullable|in:0,1',
                'q10_comment' => 'nullable|string',
            ]);

            // Sanitize q10_comment to remove <script> and unsafe tags but allow basic formatting
            $allowedTags = '<b><i><u><strong><em><p><br><ul><ol><li>';
            $sanitizedQ10Comment = strip_tags($request->q10_comment, $allowedTags);

            // Get the authenticated user ID
            $user_id = auth()->id();

            // Check if the authenticated user is the chairperson for this application
            $isChairperson = DeskReviewAssignment::where('application_id', $application_id)
                ->where('chair_id', $user_id)
                ->exists();

            $review_phase = $application->review_phase;

            // Update or create the response
            SerReview::updateOrCreate(
                [
                    'application_id' => $application_id,
                    'created_by' => $user_id,
                    'review_phase' => $review_phase,
                ],
                [
                    'q1_yes_no' => $request->q1_yes_no,
                    'q1_comment' => $request->q1_comment,
                    'q2_yes_no' => $request->q2_yes_no,
                    'q2_comment' => $request->q2_comment,
                    'q3_yes_no' => $request->q3_yes_no,
                    'q3_comment' => $request->q3_comment,
                    'q4_yes_no' => $request->q4_yes_no,
                    'q4_comment' => $request->q4_comment,
                    'q5_yes_no' => $request->q5_yes_no,
                    'q5_comment' => $request->q5_comment,
                    'q6_yes_no' => $request->q6_yes_no,
                    'q6_comment' => $request->q6_comment,
                    'q7_yes_no' => $request->q7_yes_no,
                    'q7_comment' => $request->q7_comment,
                    'q8_yes_no' => $request->q8_yes_no,
                    'q8_comment' => $request->q8_comment,
                    'q9_yes_no' => $request->q9_yes_no,
                    'q9_comment' => $request->q9_comment,
                    'q10_yes_no' => $request->q10_yes_no,
                    'q10_comment' => $sanitizedQ10Comment, // Use sanitized comment here
                    'updated_by' => $user_id,
                    'updated_at' => now(),
                    'reviewer_or_head' => $isChairperson ? 1 : 0, // Set to 1 if Chairperson, otherwise 0
                ]
            );

            DB::commit();

            // Show success toast
            Alert::toast("Application SER review updated successfully.", 'success')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();

            // Redirect back with a success message
            return redirect()->back()->with('success', 'Review saved successfully!');
        } catch (\Exception $e) {
            DB::rollBack();
            // Log the error for debugging
            Log::error('Error in saveSERReview: ' . $e->getMessage());

            Alert::toast('An error occurred while saving the SER review. Please try again.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
    }

    public function getSSSReview($application_id)
    {

        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        try {
            $application = Application::find($application_id);

            $module_title = $this->module_title;
            $module_name = $this->module_name;
            $module_path = $this->module_path;
            $module_icon = $this->module_icon;
            $module_model = $this->module_model;
            $module_action = "Review";
            $module_name_singular = Str::singular($module_name);

            // Fetch the current user's role (reviewer or chairperson)
            $isChairperson = SssReview::where('application_id', $application_id)
                ->whereHas('deskReviewAssignment', function ($query) {
                    $query->where('chair_id', auth()->id());
                })
                ->exists();

            // Fetch existing response for the current user
            $response = SssReview::where('application_id', $application_id)
                ->where('created_by', auth()->id())
                ->where('review_phase', $application->review_phase)
                ->first();

            // Fetch all reviewers' comments if the current user is a chairperson
            $reviewersComments = [];

            if ($isChairperson) {
                $reviewersComments = SssReview::where('sss_response.application_id', $application_id)
                    ->join('desk_review_assignment', function ($join) use ($application_id) {
                        $join->on('desk_review_assignment.application_id', '=', 'sss_response.application_id')
                            ->on('desk_review_assignment.assessor_id', '=', 'sss_response.created_by')
                            ->where('desk_review_assignment.status', 'Completed');
                    })
                    ->join('users as reviewer', 'desk_review_assignment.assessor_id', '=', 'reviewer.id')  // Join with the correct assessor
                    ->select('sss_response.*', 'reviewer.name as reviewer_name')  // Select the reviewer’s name
                    ->get();
            }

            // Get all questions
            $questions = SssReviewQuestionsEnumerator::getAllQuestions();

            return view("$module_path.$module_name.sssreview", [
                'response' => $response,
                'questions' => $questions,
                'reviewersComments' => $reviewersComments, // Pass reviewers' comments to the view
                'isChairperson' => $isChairperson, // Pass chairperson flag to the view
                'application_id' => $application_id,
            ]);
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'An error occurred while fetching the review.');
        }
    }

    public function saveSSSReview(Request $request, $application_id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        DB::beginTransaction();
        try {
            // Validate the application_id
            if (!is_numeric($application_id)) {
                Alert::toast('Invalid application ID.', 'error')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->back();
            }

            // Check if the application exists
            $application = Application::find($application_id);
            if (!$application) {
                Alert::toast('Application not found.', 'error')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->back();
            }

            // Validate the request
            $request->validate([
                'q1_yes_no' => 'nullable|in:0,1',
                'q1_comment' => 'nullable|string',
                'q2_yes_no' => 'nullable|in:0,1',
                'q2_comment' => 'nullable|string',
                'q3_yes_no' => 'nullable|in:0,1',
                'q3_comment' => 'nullable|string',
                'q4_yes_no' => 'nullable|in:0,1',
                'q4_comment' => 'nullable|string',
                'q5_yes_no' => 'nullable|in:0,1',
                'q5_comment' => 'nullable|string',
                'q6_yes_no' => 'nullable|in:0,1',
                'q6_comment' => 'nullable|string',
            ]);

            // Sanitize q6_comment to remove <script> and unsafe tags but allow basic formatting
            $allowedTags = '<b><i><u><strong><em><p><br><ul><ol><li>';
            $sanitizedQ6Comment = strip_tags($request->q6_comment, $allowedTags);

            // Get the authenticated user ID
            $user_id = auth()->id();

            // Check if the authenticated user is the chairperson for this application
            $isChairperson = DeskReviewAssignment::where('application_id', $application_id)
                ->where('chair_id', $user_id)
                ->exists();
            $review_phase = $application->review_phase;
            // Update or create the response
            SssReview::updateOrCreate(
                [
                    'application_id' => $application_id,
                    'created_by' => $user_id,
                    'review_phase' => $review_phase,

                ],
                [
                    'q1_yes_no' => $request->q1_yes_no,
                    'q1_comment' => $request->q1_comment,
                    'q2_yes_no' => $request->q2_yes_no,
                    'q2_comment' => $request->q2_comment,
                    'q3_yes_no' => $request->q3_yes_no,
                    'q3_comment' => $request->q3_comment,
                    'q4_yes_no' => $request->q4_yes_no,
                    'q4_comment' => $request->q4_comment,
                    'q5_yes_no' => $request->q5_yes_no,
                    'q5_comment' => $request->q5_comment,
                    'q6_yes_no' => $request->q6_yes_no,
                    'q6_comment' => $sanitizedQ6Comment, // Use sanitized comment here
                    'updated_by' => $user_id,
                    'updated_at' => now(),
                    'reviewer_or_head' => $isChairperson ? 1 : 0, // Set to 1 if Chairperson, otherwise 0
                ]
            );

            DB::commit();

            // Show success toast
            Alert::toast("Application SSS review updated successfully.", 'success')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();

            // Redirect back with a success message
            return redirect()->back()->with('success', 'Review saved successfully!');
        } catch (\Exception $e) {
            DB::rollBack();
            // Log the error for debugging
            Log::error('Error in saveSSSReview: ' . $e->getMessage());

            Alert::toast('An error occurred while saving the SSS review. Please try again.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
    }
    public function deskheadSssReview($application_id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();

            return redirect()->route('backend.dashboard');
        }


        // Step 2: Fetch the application
        $application = Application::find($application_id);
        if ($application->review_phase != 'desk_review') {
            // If the application is not in the desk review phase, show an error message

            Alert::toast('This application is not in the desk review phase.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->route('backend.dashboard');
        }
        try {
            $module_title = $this->module_title;
            $module_name = $this->module_name;
            $module_path = $this->module_path;
            $module_icon = $this->module_icon;
            $module_model = $this->module_model;
            $module_action = "Review";
            $module_name_singular = Str::singular($module_name);



            // Fetch existing response for the current user
            $response = SssReview::where('application_id', $application_id)
                ->where('reviewer_or_head', 1)
                ->where('review_phase', $application->review_phase)
                ->first();

            // Assuming you have the application_id to fetch the review and updated_by column
            $lastUpdated = SssReview::where('application_id', $application_id)
                ->where('reviewer_or_head', 1)
                ->where('review_phase', $application->review_phase)
                ->orderBy('updated_at', 'desc')  // Get the most recent update
                ->first(); // Get the most recent review

            // Now, get the user who last updated it (based on updated_by)
            $lastUpdatedBy = $lastUpdated ? User::find($lastUpdated->updated_by) : null;
            // Get all questions
            $questions = SssReviewQuestionsEnumerator::getAllQuestions();

            return view("$module_path.$module_name.deskheadsssreview", [
                'response' => $response,
                'questions' => $questions,
                'lastUpdatedBy' => $lastUpdatedBy,
                'application_id' => $application_id,
            ]);
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'An error occurred while fetching the review.');
        }
    }

    public function saveDeskheadSssReview(Request $request, $application_id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        // Step 2: Fetch the application
        $application = Application::find($application_id);
        // Validate the request
        $request->validate([
            'q1_yes_no' => 'nullable|in:0,1',
            'q1_comment' => 'nullable|string',
            'q2_yes_no' => 'nullable|in:0,1',
            'q2_comment' => 'nullable|string',
            'q3_yes_no' => 'nullable|in:0,1',
            'q3_comment' => 'nullable|string',
            'q4_yes_no' => 'nullable|in:0,1',
            'q4_comment' => 'nullable|string',
            'q5_yes_no' => 'nullable|in:0,1',
            'q5_comment' => 'nullable|string',
            'q6_yes_no' => 'nullable|in:0,1',
            'q6_comment' => 'nullable|string',
        ]);

        // Sanitize q6_comment to remove <script> and unsafe tags but allow basic formatting
        $allowedTags = '<b><i><u><strong><em><p><br><ul><ol><li>';
        $sanitizedQ6Comment = strip_tags($request->q6_comment, $allowedTags);

        // Get the authenticated user ID
        $user_id = auth()->id();

        // Check if the authenticated user is the chairperson for this application


        // Find the existing review entry for the authenticated user
        // Fetch existing response for the current user
        $response = SssReview::where('application_id', $application_id)
            ->where('reviewer_or_head', 1)
            ->where('review_phase', $application->review_phase)
            ->first();


        if ($response) {

            // Update the existing record only for the current user
            $response->update([
                'q1_yes_no' => $request->q1_yes_no,
                'q1_comment' => $request->q1_comment,
                'q2_yes_no' => $request->q2_yes_no,
                'q2_comment' => $request->q2_comment,
                'q3_yes_no' => $request->q3_yes_no,
                'q3_comment' => $request->q3_comment,
                'q4_yes_no' => $request->q4_yes_no,
                'q4_comment' => $request->q4_comment,
                'q5_yes_no' => $request->q5_yes_no,
                'q5_comment' => $request->q5_comment,
                'q6_yes_no' => $request->q6_yes_no,
                'q6_comment' => $sanitizedQ6Comment, // Use sanitized comment here


            ]);
        } else {
            // Create a new entry if none exists for this user
            SssReview::create([
                'application_id' => $application_id,
                'created_by' => $user_id,
                'q1_yes_no' => $request->q1_yes_no,
                'q1_comment' => $request->q1_comment,
                'q2_yes_no' => $request->q2_yes_no,
                'q2_comment' => $request->q2_comment,
                'q3_yes_no' => $request->q3_yes_no,
                'q3_comment' => $request->q3_comment,
                'q4_yes_no' => $request->q4_yes_no,
                'q4_comment' => $request->q4_comment,
                'q5_yes_no' => $request->q5_yes_no,
                'q5_comment' => $request->q5_comment,
                'q6_yes_no' => $request->q6_yes_no,
                'q6_comment' => $sanitizedQ6Comment, // Use sanitized comment here
                'updated_by' => $user_id,
                'updated_at' => now(),
                'reviewer_or_head' => 1, // Set to 1 if Chairperson, otherwise 0
                'reviewer_phase' => $application->review_phase, // Set to 1 if Chairperson, otherwise 0
            ]);
        }

        // Show success toast
        Alert::toast("Application SSS review updated successfully.", 'success')
            ->position('top-end')
            ->autoClose(5000)
            ->timerProgressBar();

        // Redirect back with a success message
        return redirect()->back()->with('success', 'Review saved successfully!');
    }

    public function deskheadSerReview($application_id)
    {

        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        // Step 2: Fetch the application
        $application = Application::find($application_id);


        try {
            $module_title = $this->module_title;
            $module_name = $this->module_name;
            $module_path = $this->module_path;
            $module_icon = $this->module_icon;
            $module_model = $this->module_model;
            $module_action = "Review";
            $module_name_singular = Str::singular($module_name);



            // Fetch existing response for the current user
            $response = SerReview::where('application_id', $application_id)
                ->where('reviewer_or_head', 1)
                ->where('review_phase', $application->review_phase)
                ->first();

            // Assuming you have the application_id to fetch the review and updated_by column
            $lastUpdated = SerReview::where('application_id', $application_id)
                ->where('reviewer_or_head', 1)
                ->where('review_phase', $application->review_phase)
                ->orderBy('updated_at', 'desc')  // Get the most recent update
                ->first(); // Get the most recent review

            // Now, get the user who last updated it (based on updated_by)
            $lastUpdatedBy = $lastUpdated ? User::find($lastUpdated->updated_by) : null;
            // Get all questions
            $questions = SerReviewQuestionsEnumerator::getAllQuestions();

            return view("$module_path.$module_name.deskheadserreview", [
                'response' => $response,
                'questions' => $questions,
                'lastUpdatedBy' => $lastUpdatedBy,
                'application_id' => $application_id,
            ]);
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'An error occurred while fetching the review.');
        }
    }

    public function saveDeskheadSerReview(Request $request, $application_id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        // Step 2: Fetch the application
        $application = Application::find($application_id);

        // Validate the request
        $request->validate([
            'q1_yes_no' => 'nullable|in:0,1',
            'q1_comment' => 'nullable|string',
            'q2_yes_no' => 'nullable|in:0,1',
            'q2_comment' => 'nullable|string',
            'q3_yes_no' => 'nullable|in:0,1',
            'q3_comment' => 'nullable|string',
            'q4_yes_no' => 'nullable|in:0,1',
            'q4_comment' => 'nullable|string',
            'q5_yes_no' => 'nullable|in:0,1',
            'q5_comment' => 'nullable|string',
            'q6_yes_no' => 'nullable|in:0,1',
            'q6_comment' => 'nullable|string',
            'q7_yes_no' => 'nullable|in:0,1',
            'q7_comment' => 'nullable|string',
            'q8_yes_no' => 'nullable|in:0,1',
            'q8_comment' => 'nullable|string',
            'q9_yes_no' => 'nullable|in:0,1',
            'q9_comment' => 'nullable|string',
            'q10_yes_no' => 'nullable|in:0,1',
            'q10_comment' => 'nullable|string',
        ]);

        // Sanitize q6_comment to remove <script> and unsafe tags but allow basic formatting
        $allowedTags = '<b><i><u><strong><em><p><br><ul><ol><li>';
        $sanitizedQ10Comment = strip_tags($request->q10_comment, $allowedTags);

        // Get the authenticated user ID
        $user_id = auth()->id();

        // Check if the authenticated user is the chairperson for this application


        // Find the existing review entry for the authenticated user
        // Fetch existing response for the current user
        $response = SerReview::where('application_id', $application_id)
            ->where('reviewer_or_head', 1)
            ->where('review_phase', $application->review_phase)
            ->first();


        if ($response) {

            // Update the existing record only for the current user
            $response->update([
                'q1_yes_no' => $request->q1_yes_no,
                'q1_comment' => $request->q1_comment,
                'q2_yes_no' => $request->q2_yes_no,
                'q2_comment' => $request->q2_comment,
                'q3_yes_no' => $request->q3_yes_no,
                'q3_comment' => $request->q3_comment,
                'q4_yes_no' => $request->q4_yes_no,
                'q4_comment' => $request->q4_comment,
                'q5_yes_no' => $request->q5_yes_no,
                'q5_comment' => $request->q5_comment,
                'q6_yes_no' => $request->q6_yes_no,
                'q6_comment' => $request->q6_comment,
                'q7_yes_no' => $request->q7_yes_no,
                'q7_comment' => $request->q7_comment,
                'q8_yes_no' => $request->q8_yes_no,
                'q8_comment' => $request->q8_comment,
                'q9_yes_no' => $request->q9_yes_no,
                'q9_comment' => $request->q9_comment,
                'q10_yes_no' => $request->q10_yes_no,
                'q10_comment' => $sanitizedQ10Comment, // Use sanitized comment here

            ]);
        } else {
            // Create a new entry if none exists for this user
            SerReview::create([
                'application_id' => $application_id,
                'created_by' => $user_id,
                'q1_yes_no' => $request->q1_yes_no,
                'q1_comment' => $request->q1_comment,
                'q2_yes_no' => $request->q2_yes_no,
                'q2_comment' => $request->q2_comment,
                'q3_yes_no' => $request->q3_yes_no,
                'q3_comment' => $request->q3_comment,
                'q4_yes_no' => $request->q4_yes_no,
                'q4_comment' => $request->q4_comment,
                'q5_yes_no' => $request->q5_yes_no,
                'q5_comment' => $request->q5_comment,
                'q6_yes_no' => $request->q6_yes_no,
                'q6_comment' => $sanitizedQ10Comment, // Use sanitized comment here
                'updated_by' => $user_id,
                'updated_at' => now(),
                'reviewer_or_head' => 1, // Set to 1 if Chairperson, otherwise 0
                'reviewer_phase' => $application->review_phase,

            ]);
        }

        // Show success toast
        Alert::toast("Application SER review updated successfully.", 'success')
            ->position('top-end')
            ->autoClose(5000)
            ->timerProgressBar();

        // Redirect back with a success message
        return redirect()->back()->with('success', 'Review saved successfully!');
    }





    public function completeDeskReview($application_id)
    {

        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->route('backend.dashboard');
        }
        try {


            // Authenticate user
            $assessor_id = auth()->id();
            if (!$assessor_id) {
                return response()->json([
                    'success' => false,
                    'message' => 'Unauthorized access.',
                ], 401);
            }

            // Fetch the application
            $application = Application::find($application_id);

            if (!$application) {
                return response()->json([
                    'success' => false,
                    'message' => 'Application not found.',
                ], 404);
            }

            // Fetch the latest desk review assignment
            $deskReview = DeskReviewAssignment::where('application_id', $application_id)
                ->where('assessor_id', $assessor_id)
                ->where('review_phase', $application->review_phase)
                ->latest()
                ->first();

            $isChairperson = DeskReviewAssignment::where('chair_id', auth()->id())
                ->where('application_id', $application_id)
                ->exists();


            if (!$deskReview) {
                return response()->json([
                    'success' => false,
                    'message' => 'No pending desk review found for this user in the current phase.',
                ], 404);
            }

            // Calculate due date (15 days after the created_at DATE only)
            $due_date = \Carbon\Carbon::parse($deskReview->created_at->toDateString())->addDays(15);

            // Check if the task is overdue (compare only dates)
            $isOverdue = now()->toDateString() > $due_date->toDateString();

            // Update the status to 'Completed'
            $deskReview->status = 'Completed';
            $deskReview->save();



            // Update user statistics
            $user = User::find($assessor_id);
            if ($user) {
                $user->completeTask($isOverdue);
            }

            // Notify the Desk Head
            $application->load(['program', 'institute', 'campus']);
            $desk = $application->desk;

            if (!$desk) {
                Log::warning("Desk not found for application ID: {$application_id}");
                return response()->json([
                    'success' => false,
                    'message' => 'Desk not found for this application.',
                ], 404);
            }

            $deskHead = $desk->deskHead;
            if (!$deskHead) {
                Log::warning("Desk head not found for desk ID: {$desk->id}");
                return response()->json([
                    'success' => false,
                    'message' => 'Desk head not found.',
                ], 404);
            }

            // Customize notification based on review_phase
            $reviewerName = $user->name;
            $programName = $application->program->name ?? 'N/A';
            $instituteName = $application->institute->name ?? 'N/A';
            $campusName = $application->campus->name ?? 'N/A';
            $applicationName = "{$programName} - {$instituteName} ({$campusName})";

            $title = 'Review Submission Notification';
            $message = "Reviewer {$reviewerName} has submitted their review for the application {$applicationName}. Please review their submission.";

            switch ($application->review_phase) {
                case 'toa_first_round':
                    $title = 'Assessor completed First Round Review';
                    $message = "Reviewer {$reviewerName} has successfully completed the First Round Team of Assessor Review for the application {$applicationName}. Please check and proceed with the next steps.";
                    break;
                case 'toa_second_round':
                    $title = 'Assessor Completed Site Visit Review';
                    $message = "Reviewer {$reviewerName} has successfully completed the Site Visit Review for the application {$applicationName}. Please proceed with the next steps.";
                    break;
                default:
                    if ($application->doc_version == 2) {
                        $title = 'Revision Comment Completed';
                        $message = "Reviewer {$reviewerName} has completed the revision comments for the application {$applicationName}. Please review their submission.";
                    } else {
                        $title = 'Desk Review Completed';
                        $message = "Reviewer {$reviewerName} has completed the assessment for the application {$applicationName}.";
                    }
                    break;
            }

            // Send notification to Desk Head
            $deskHead->notify(new GenericNotification(
                $title,
                $message,
                'Applications',
                'review_submitted',
                'fas fa-check-circle',
                route('backend.applications.profileview', $application_id)
            ));

            return response()->json([
                'success' => true,
                'message' => 'Desk review marked as completed.',
            ]);
        } catch (\Exception $e) {
            // Log the error
            Log::error("Error completing desk review: " . $e->getMessage());

            return response()->json([
                'success' => false,
                'message' => 'An error occurred while processing your request.',
            ], 500);
        }
    }
 use Dompdf\Dompdf;
use Dompdf\Options;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use RealRashid\SweetAlert\Facades\Alert;
use Modules\Application\Models\Application;
use Modules\DCT\Models\DCT;

public function downloadDctNarrativeResponsePdf($applicationId)
{
    // Step 1: Validate the ID
    $validator = Validator::make(['application_id' => $applicationId], [
        'application_id' => 'required|integer|exists:applications,id',
    ]);

    if ($validator->fails()) {
        Alert::toast('Invalid application ID.', 'error')
            ->position('top-end')
            ->autoClose(5000)
            ->timerProgressBar();
        return redirect()->back();
    }

    // Step 2: Fetch application
    $application = Application::with(['program', 'institute'])->findOrFail($applicationId);
    $programId   = $application->program_id;

    // Step 3: Load DCT structure with answers
    $dct = DCT::with([
        'standards.substandards.indicators.questions.answers' => function ($query) use ($applicationId) {
            $query->where('application_id', $applicationId);
        }
    ])->where('program_id', $programId)->first();

    if (!$dct) {
        return back()->with('error', 'No DCT found for this program.');
    }

    // Step 4: Build PDF HTML
    $html = '<html><head>
    <style>
        body { font-family: Arial, sans-serif; font-size: 12px; }
        .cover-page { text-align: center; margin-top: 3cm; }
        .cover-title { font-size: 18pt; font-weight: bold; margin-bottom: 1.5cm; }
        .cover-subtitle { font-size: 14pt; margin-bottom: 2cm; }
        .institution-info { margin-bottom: 1cm; font-size: 12pt; }
        .instructions { margin-top: 3cm; font-style: italic; }
        .page-break { page-break-after: always; }
        h1 { text-align: center; margin-bottom: 20px; }
        h3 { margin-top: 25px; margin-bottom: 10px; }
        table { width: 100%; border-collapse: collapse; table-layout: fixed; }
        th { background-color: #f2f2f2; text-align: left; }
        td, th { border: 1px solid #ddd; padding: 8px; word-wrap: break-word; }
        .question { width: 30%; }
        .answer { width: 65%; }
        .number { width: 5%; text-align: center; }
    </style>
    </head><body>';

    // Cover Page
    $html .= '<div class="cover-page">
        <div class="cover-title">DCT Narrative Questions Response</div>
        <div class="institution-info">
            <strong>Institution:</strong> ' . e($application->institute->name) . '<br>
            <strong>Program:</strong> ' . e($application->program->name) . '
        </div>
        <div class="instructions">
            <p>Please use the word file version for your review comments.</p>
            <p>You may copy and paste your responses back into the system when complete.</p>
        </div>
    </div>
    <div class="page-break"></div>';

    // Main Content
    $html .= '<h1>Response to DCT Narrative Questions</h1>';

    foreach ($dct->standards as $standard) {
        foreach ($standard->substandards as $substandard) {
            foreach ($substandard->indicators as $indicator) {
                if ($indicator->questions->isEmpty()) continue;

                // Add indicator title
                $html .= '<h3>Indicator: ' . e($indicator->name) . '</h3>';

                // Create table
                $html .= '<table>';
                $html .= '<tr>
                            <th class="number">#</th>
                            <th class="question">Question</th>
                            <th class="answer">Answer</th>
                          </tr>';

                $i = 1;
                foreach ($indicator->questions as $question) {
                    $answer     = $question->answers->first();
                    $answerText = $answer ? $answer->answer : '—';

                    // Clean + format answer
                    $formattedAnswer = nl2br(e(wordwrap($answerText, 100, "\n", true)));

                    $html .= '<tr>';
                    $html .= '<td class="number">' . $i++ . '</td>';
                    $html .= '<td class="question">' . e($question->question_text) . '</td>';
                    $html .= '<td class="answer">' . $formattedAnswer . '</td>';
                    $html .= '</tr>';
                }

                $html .= '</table><br>';
            }
        }
    }

    $html .= '</body></html>';

    // Step 5: Configure DOMPDF
    $options = new Options();
    $options->set('isRemoteEnabled', true);
    $options->set('isHtml5ParserEnabled', true);

    $dompdf = new Dompdf($options);
    $dompdf->loadHtml($html);
    $dompdf->setPaper('A4', 'landscape');
    $dompdf->render();

    // Step 6: Safe filename (cleaned for Octane/RoadRunner)
    $safeName = Str::slug($application->institute->name . '_' . $application->program->name);
    $filename = 'DCT_Narrative_Response_' . $safeName . '_' . $applicationId . '.pdf';

    // Step 7: Return response instead of stream (Octane safe)
    return response($dompdf->output(), 200, [
        'Content-Type'        => 'application/pdf',
        'Content-Disposition' => "inline; filename=\"{$filename}\"",
    ]);
}

    /**
     * Completely strips ALL formatting and returns pure text
     */
    private function extractPureText($content)
    {
        if (empty($content)) {
            return '';
        }

        // 1. Remove ALL HTML tags
        $text = strip_tags($content);

        // 2. Decode HTML entities
        $text = html_entity_decode($text, ENT_QUOTES | ENT_HTML5, 'UTF-8');

        // 3. Normalize whitespace and line breaks
        $text = preg_replace('/\s+/', ' ', $text);
        $text = str_replace(["\r", "\n"], ' ', $text);

        // 4. Trim whitespace
        $text = trim($text);

        return $text;
    }





    public function downloadDctNarrativeResponseWord($applicationId)
    {

        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        $application = Application::with(['program', 'institute'])->findOrFail($applicationId);
        $programId = $application->program_id;

        $dct = DCT::with([
            'standards.substandards.indicators.questions',
        ])->where('program_id', $programId)->first();

        if (!$dct) {
            return back()->with('error', 'No DCT found for this program.');
        }

        $phpWord = new PhpWord();

        // Add cover page section
        $coverSection = $phpWord->addSection();

        // Cover page title
        $coverSection->addText(
            "DCT Narrative Questions Response",
            ['bold' => true, 'size' => 18, 'alignment' => 'center'],
            ['spaceAfter' => 300]
        );

        // Institution and program info
        $coverSection->addText(
            "Institution: " . $application->institute->name,
            ['size' => 12],
            ['spaceAfter' => 200]
        );

        $coverSection->addText(
            "Program: " . $application->program->name,
            ['size' => 12],
            ['spaceAfter' => 200]
        );

        // Instructions
        $coverSection->addText(
            "Instructions:",
            ['bold' => true, 'size' => 12],
            ['spaceAfter' => 100]
        );

        $coverSection->addText(
            "1. Please use this document for your review comments.",
            ['size' => 12],
            ['spaceAfter' => 50]
        );

        $coverSection->addText(
            "2. You may copy and paste your responses back into the system when complete.",
            ['size' => 12],
            ['spaceAfter' => 300]
        );

        // Add page break for main content
        $coverSection->addPageBreak();

        // Main content section
        $section = $phpWord->addSection();
        $section->addText(
            "Desk Review Question Template",
            ['bold' => true, 'size' => 14, 'alignment' => 'center']
        );
        $section->addTextBreak(1);

        foreach ($dct->standards as $standard) {
            foreach ($standard->substandards as $substandard) {
                foreach ($substandard->indicators as $indicator) {
                    if ($indicator->questions->isEmpty()) continue;

                    // Indicator Heading
                    $section->addText(
                        "Indicator: " . strip_tags($indicator->name),
                        ['bold' => true, 'size' => 12]
                    );
                    $section->addTextBreak(0.5);

                    // Table with Question and Comment
                    $table = $section->addTable([
                        'borderSize' => 6,
                        'borderColor' => '666666',
                        'alignment' => 'center'
                    ]);

                    $table->addRow();
                    $table->addCell(500)->addText('#', ['bold' => true]);
                    $table->addCell(9000)->addText('Question', ['bold' => true]);
                    $table->addCell(4000)->addText('Comment', ['bold' => true]);

                    $i = 1;
                    foreach ($indicator->questions as $question) {
                        $table->addRow();
                        $table->addCell(500)->addText($i++);
                        $table->addCell(9000)->addText(strip_tags($question->question_text ?? 'N/A'));
                        $table->addCell(4000)->addText(''); // Empty comment field
                    }

                    $section->addTextBreak(1);
                }
            }
        }

        // Save the Word file
        $filename = 'DCT_Narrative_Response_' . $applicationId . '.docx';
        $tempFile = tempnam(sys_get_temp_dir(), $filename);
        IOFactory::createWriter($phpWord, 'Word2007')->save($tempFile);

        return response()->download($tempFile, $filename)->deleteFileAfterSend(true);
    }
    public function downloadMyDeskReviewPdf($applicationId)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        // Get authenticated user ID
        $reviewerId = auth()->id();

        // Check if reviewer has completed desk review
        $deskReviewCompleted = DeskReviewAssignment::where('application_id', $applicationId)
            ->where('assessor_id', $reviewerId)
            ->where('review_phase', 'desk_review')
            ->where('status', 'Completed')
            ->exists();

        if (!$deskReviewCompleted) {
            Alert::toast('You have not completed the desk review for this application.', 'error');
            return redirect()->back();
        }

        $application = Application::findOrFail($applicationId);
        $reviewerName = auth()->user()->name;

        // Fetch the submission date
        $submissionDate = ApplicationStatusHistory::where('application_id', $applicationId)
            ->where('status', ApplicationStatusEnum::PROFILE_ACC)
            ->value('created_at');

        $formattedSubmissionDate = $submissionDate ? $submissionDate->format('F j, Y') : 'a specific date';

        // Fetch only this reviewer's desk reviews
        $dctReviews = DeskReview::where('application_id', $applicationId)
            ->where('reviewer_id', $reviewerId)
            ->where('indicator_id', '!=', 0)
            ->where('review_type', 'dct')
            ->where('review_phase', 'desk_review')
            ->with(['indicator', 'standard'])
            ->get();

        if ($dctReviews->isEmpty()) {
            Alert::toast('No desk reviews found for your account.', 'warning');
            return redirect()->back();
        }

        // Generate HTML content for the PDF
        $html = '<style>
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #000; padding: 5px; text-align: left; }
        th { background-color: #CCCCCC; font-weight: bold; }
        .standard-cell { background-color: #FFFFCC; font-weight: bold; }
        .page-break { page-break-after: always; }
        .center { text-align: center; }
        .header-logo {
            text-align: center;
            margin-bottom: 20px;
        }
        .header-logo img {
            height: 150px;
        }
        .watermark {
            position: fixed;
            opacity: 0.1;
            font-size: 40px;
            width: 100%;
            text-align: center;
            z-index: -1000;
            transform: rotate(-45deg);
            transform-origin: 50% 50%;
            top: 50%;
            left: 0;
            color: #000000;
            font-weight: bold;
        }
    </style>';

        // Add logo
        $logoPath = public_path('img/logo-square.png');
        $logoBase64 = base64_encode(file_get_contents($logoPath));
        $logoSrc = 'data:image/png;base64,' . $logoBase64;

        // Cover Page
        $html .= '<div style="text-align: center; margin-bottom: 20px;"><img src="' . $logoSrc . '" style="height: 150px;"></div>';
        $html .= '<h1 class="center">Education and Training Authority</h1>';
        $html .= '<h2 class="center">My Desk Review Report</h2>';
        $html .= '<h3 class="center">For ' . $application->program->name . '</h3>';
        $html .= '<h4 class="center">Reviewer: ' . $reviewerName . '</h4>';
        $html .= '<div class="page-break"></div>';

        // Introduction
        $html .= '<p><strong>Application Details:</strong></p>';
        $html .= '<p>Institution: ' . $application->institute->name . '</p>';
        $html .= '<p>Program: ' . $application->program->name . '</p>';
        $html .= '<p>Reference Number: ' . $application->reference_number . '</p>';
        $html .= '<p>Submission Date: ' . $formattedSubmissionDate . '</p>';
        $html .= '<div class="page-break"></div>';

        // DCT Review Section
        $html .= '<h3 class="center">Data Collection Tool (DCT) Review</h3>';
        $html .= '<table>
        <thead>
            <tr>
                <th style="width: 25%">Standard Name</th>
                <th style="width: 25%">Indicator Name</th>
                <th style="width: 50%">Review Comments</th>
            </tr>
        </thead>
        <tbody>';

        // Group by standard and sort
        $groupedByStandard = $dctReviews->sortBy('standard_id')->groupBy('standard_id');

        foreach ($groupedByStandard as $standardId => $reviewsByStandard) {
            $standardName = $reviewsByStandard->first()->standard?->name ?? 'Unknown Standard';

            // Group by indicator and sort
            $groupedByIndicator = $reviewsByStandard->sortBy('indicator_id')->groupBy('indicator_id');

            foreach ($groupedByIndicator as $indicatorId => $indicatorReviews) {
                $indicatorName = $indicatorReviews->first()->indicator?->name ?? 'Unknown Indicator';

                $html .= '<tr>';
                $html .= '<td class="standard-cell"><strong>' . $standardName . '</strong></td>';
                $html .= '<td>' . $indicatorName . '</td>';
                $html .= '<td>';

                foreach ($indicatorReviews as $review) {
                    $html .= '<p>' . ($review->comment ?? 'No comment') . '</p>';
                    if ($review !== $indicatorReviews->last()) {
                        $html .= '<hr style="border-top: 1px dashed #ccc; margin: 5px 0;">';
                    }
                }

                $html .= '</td>';
                $html .= '</tr>';
            }
        }

        $html .= '</tbody></table>';
        $html .= '<div class="page-break"></div>';


        // Add watermark
        $html .= '<div class="watermark">REVIEWER COPY - ' . strtoupper($reviewerName) . '</div>';

        // Generate PDF
        $options = new Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true);

        $dompdf = new Dompdf($options);
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'landscape');
        $dompdf->render();

        $filename = 'my_desk_review_' . $applicationId . '_' . $reviewerId . '.pdf';
        return $dompdf->stream($filename);
    }
    public function downloadDeskReviewinPdf($applicationId)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        $application = Application::findOrFail($applicationId);

        // Fetch the submission date from ApplicationStatusHistory
        $submissionDate = ApplicationStatusHistory::where('application_id', $applicationId)
            ->where('status', ApplicationStatusEnum::PROFILE_ACC)
            ->value('created_at');

        $formattedSubmissionDate = $submissionDate ? $submissionDate->format('F j, Y') : 'a specific date';

        $dctReviews = DeskReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0)
            ->where('review_type', 'dct')
            ->where('review_phase', 'desk_review')
            ->with(['indicator', 'reviewer', 'standard'])
            ->get();

        $includeDeskHeadReview = strtolower($application->status) === strtolower("FINALIZED_BY_DESK");
        $dctHeadReviews = $includeDeskHeadReview
            ? DeskheadReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0)
            ->where('review_type', 'dct')
            ->where('review_phase', 'desk_review')
            ->with(['indicator', 'reviewer', 'standard'])
            ->get()
            : collect();

        $sssHeadReviews = SssReview::where('application_id', $applicationId)
            ->where('reviewer_or_head', 1)
            ->first();

        $serHeadReviews = SerReview::where('application_id', $applicationId)
            ->where('reviewer_or_head', 1)
            ->first();

        if ($dctReviews->isEmpty() && $dctHeadReviews->isEmpty() && !$sssHeadReviews && !$serHeadReviews) {
            Alert::toast('No desk reviews found. Please come back again.!', 'warning');
            return redirect()->back();
        }

        // Start PDF HTML
        $html = '<style>
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #000; padding: 5px; text-align: left; }
        th { background-color: #CCCCCC; font-weight: bold; }
        .standard-cell { background-color: #FFFFCC; font-weight: bold; }
        .page-break { page-break-after: always; }
    </style>';

        $html .= '<h1 style="text-align: center;">Education and Training Authority</h1>';
        $html .= '<h2 style="text-align: center;">Accreditation Desk Review Result Report for ' . $application->program->name . '</h2>';
        $html .= '<div class="page-break"></div>';

        $html .= '<p><strong>To:</strong> ' . $application->institute->name . '</p>';
        $html .= '<p><strong>Subject:</strong> Feedback on the Application for Accreditation of the ' . $application->program->name . '</p>';
        $html .= '<br>';
        $html .= '<p>On ' . $formattedSubmissionDate . ', ' . $application->institute->name . ' submitted an application to the Education and Training Authority (ETA) for the accreditation of its undergraduate ' . $application->program->name . ' program (reference number ' . $application->reference_number . '). Following this, the ETA Desk Review Team conducted a preliminary evaluation based on the submitted application, which included the Application Letter, Data Collection Tool (DCT), Student Satisfaction Survey (SSS), Internal Self-Assessment Report, and supporting documents.</p>';
        $html .= '<p>Before forwarding the documents to the Team of Assessors (ToA) for further evaluation, the Desk Review Team has provided feedback on certain aspects of the ' . $application->program->name . ' program application. To ensure alignment with ETA\'s standards and guidelines, we have enclosed a summary of the Desk Review findings, which highlights areas requiring your attention.</p>';
        $html .= '<p>Please review this summary and return the updated documents to ETA within 15 working days. This will enable eligibility confirmation and facilitate the next steps in the evaluation process for accreditation decision.</p>';
        $html .= '<p>Best regards,</p>';
        $html .= '<p>CC:</p>';
        $html .= '<ul>
        <li>Director General</li>
        <li>Accreditation and Standardization Deputy Director General</li>
        <li>CEO for Accreditation</li>
        <li>ETA</li>
      </ul>';
        $html .= '<div class="page-break"></div>';

        // ✅ Fixed DCT Section Grouping
        // ✅ Fixed DCT Section: Group by standard_id and sort properly
        if (!$dctReviews->isEmpty()) {
            $html .= '<h3 style="text-align: center;">Desk Review Comments (DCT)</h3>';
            $html .= '<table>
    <thead>
        <tr>
            <th style="width: 25%">Standard Name</th>
            <th style="width: 25%">Indicator Name</th>
            <th style="width: 50%">Desk Review Comments</th>
        </tr>
    </thead>
    <tbody>';

            // Step 1: Group by standard_id and sort by standard_id
            $groupedByStandard = $dctReviews->groupBy('standard_id')->sortKeys();

            foreach ($groupedByStandard as $standardId => $reviewsByStandard) {
                $standardName = $reviewsByStandard->first()->standard?->name ?? 'Unknown Standard';

                // Step 2: Group by indicator inside each standard and sort
                $groupedByIndicator = $reviewsByStandard->groupBy('indicator_id')->sortKeys();

                foreach ($groupedByIndicator as $indicatorId => $indicatorReviews) {
                    $indicatorName = $indicatorReviews->first()->indicator?->name ?? 'Unknown Indicator';

                    $html .= '<tr>';
                    $html .= '<td class="standard-cell"><strong>' . $standardName . '</strong></td>';
                    $html .= '<td>' . $indicatorName . '</td>';
                    $html .= '<td>';
                    $firstReview = true;
                    foreach ($indicatorReviews as $review) {
                        $reviewerName = $review->reviewer?->name ?? "Unknown Reviewer";
                        if (!$firstReview) {
                            $html .= '<br><br>';
                        }
                        $html .= '<strong>' . $reviewerName . ':</strong> ' . strip_tags($review->comment);
                        $firstReview = false;
                    }
                    $html .= '</td>';
                    $html .= '</tr>';
                }
            }

            $html .= '</tbody></table>';
            $html .= '<div class="page-break"></div>';
        }


        // SSS Section
        if ($sssHeadReviews) {
            $html .= '<h3 style="text-align: center;">Student Satisfaction Survey (SSS) Comments</h3>';
            $html .= '<table>
            <thead>
                <tr>
                    <th>#</th>
                    <th>Question</th>
                    <th>Response</th>
                    <th>Comment</th>
                </tr>
            </thead>
            <tbody>';

            $sssQuestions = SssReviewQuestionsEnumerator::getAllQuestions();
            $rowNumber = 1;
            foreach ($sssQuestions as $questionId => $questionText) {
                if ($questionId == 6) continue;
                $yesNoField = "q{$questionId}_yes_no";
                $commentField = "q{$questionId}_comment";
                $response = $sssHeadReviews->$yesNoField ? 'Yes' : 'No';
                $comment = $sssHeadReviews->$commentField ?? 'No comment';
                $html .= "<tr><td>$rowNumber</td><td>$questionText</td><td>$response</td><td>$comment</td></tr>";
                $rowNumber++;
            }
            $html .= '</tbody></table>';

            if (!empty($sssHeadReviews->q6_comment)) {
                $html .= '<h4>General Comments on Student Satisfaction Survey</h4>';
                $html .= '<p>' . $sssHeadReviews->q6_comment . '</p>';
            }
            $html .= '<div class="page-break"></div>';
        }

        // SER Section
        if ($serHeadReviews) {
            $html .= '<h3 style="text-align: center;">Self Evaluation Report (SER) Comments</h3>';
            $html .= '<table>
            <thead>
                <tr>
                    <th>#</th>
                    <th>Question</th>
                    <th>Response</th>
                    <th>Comment</th>
                </tr>
            </thead>
            <tbody>';

            $serQuestions = SerReviewQuestionsEnumerator::getAllQuestions();
            $rowNumber = 1;
            foreach ($serQuestions as $questionId => $questionText) {
                if ($questionId == 10) continue;
                $yesNoField = "q{$questionId}_yes_no";
                $commentField = "q{$questionId}_comment";
                $response = $serHeadReviews->$yesNoField ? 'Yes' : 'No';
                $comment = $serHeadReviews->$commentField ?? 'No comment';
                $html .= "<tr><td>$rowNumber</td><td>$questionText</td><td>$response</td><td>$comment</td></tr>";
                $rowNumber++;
            }
            $html .= '</tbody></table>';

            if (!empty($serHeadReviews->q10_comment)) {
                $html .= '<h4>General Comments on Self Evaluation Report</h4>';
                $html .= '<p>' . $serHeadReviews->q10_comment . '</p>';
            }
        }

        // Generate PDF
        $options = new Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true);

        $dompdf = new Dompdf($options);
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'landscape');
        $dompdf->render();

        $filename = 'desk_review_' . $applicationId . '.pdf';
        return $dompdf->stream($filename);
    }



    public function pdfPrintCertificate($applicationId, $returnBinary = false)
    {
        // Step 1: Validate the Application ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        // Step 2: Get certificate linked to this application
        $certificate = Certificate::where('application_id', $applicationId)->first();

        if (!$certificate) {
            Alert::toast('No certificate found for this application.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        // Load logo
        $logoPath = public_path('img/logo-square.png');
        $logoBase64 = base64_encode(file_get_contents($logoPath));
        $logoSrc = 'data:image/png;base64,' . $logoBase64;

        $directorGeneral = User::role('deputy director')
            ->where('status', 1)
            ->latest('updated_at')
            ->first();
        $directorName = $directorGeneral ? $directorGeneral->name : 'Deputy Director General';

        $signaturePath = public_path('img/signature.png');
        $signatureBase64 = base64_encode(file_get_contents($signaturePath));
        $signatureSrc = 'data:image/png;base64,' . $signatureBase64;


        // Step 3: Build HTML
        $html = '
    <style>
        @page { margin: 0; }
        body {
            margin: 0;
            padding: 0;
            font-family: "Times New Roman", serif;
            background-color: #f4f8f9;
        }
        .certificate-container {
            width: 970px;
            height: 690px;
            padding: 40px 50px;
            border: 8px solid #ed6923;
            outline: 16px solid #36bac0;
            background: #fff;
            position: relative;
            margin: auto;
            box-sizing: border-box;
        }
        .header { text-align: center; margin-bottom: 5px; }
        .header img { height: 180px; margin-bottom: 8px; }
        .main-title {
            font-size: 30px;
            font-weight: bold;
            color: #37517e;
            text-transform: uppercase;
        }
        .watermark {
            position: absolute;
            opacity: 0.04;
            font-size: 110px;
            width: 100%;
            text-align: center;
            transform: rotate(-30deg);
            top: 35%;
            left: 0;
            color: #37517e;
            font-weight: bold;
            z-index: 0;
        }
        .info-bar {
            font-size: 12px;
            color: #666;
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        .content { text-align: center; position: relative; z-index: 2; padding: 0 30px; }
        .certify-text { font-size: 18px; margin-bottom: 10px; }
        .institute-name {
            font-size: 26px;
            font-weight: bold;
            color: #37517e;
            margin: 12px 0;
        }
        .program-line {
            font-size: 20px;
            font-weight: bold;
            color: #ed6923;
            margin: 15px 0;
            padding: 8px 15px;
            background-color: rgba(54, 186, 192, 0.07);
            border-radius: 4px;
            display: inline-block;
        }
        .valid-until {
            font-size: 16px;
            font-weight: bold;
            color: #37517e;
            margin-top: 14px;
        }
        .signature-block { margin-top: 30px; text-align: center; }
        .signature-line { border-top: 1px solid #37517e; width: 240px; margin: 0 auto 4px; }
        .signature-name { font-weight: bold; font-size: 15px; color: #37517e; }
        .signature-title { font-style: italic; font-size: 13px; color: #ed6923; }
        .seal { width: 70px; opacity: 0.85; margin-bottom: 8px; }
        .verification-note {
            position: absolute;
            bottom: 15px;
            width: 100%;
            text-align: center;
            font-size: 12px;
            color: #666;
        }
    </style>
    ';

        $html .= '
    <div class="certificate-container">
        <div class="watermark">' . strtoupper($certificate->accreditation_status) . '</div>

        <div class="info-bar">
            <div>Issued: ' . \Carbon\Carbon::parse($certificate->issued_date)->format('F j, Y') . '</div>
            <div>Certificate No: ' . $certificate->certificate_number . '</div>
        </div>

        <div class="header">
            <img src="' . $logoSrc . '">
            <div class="main-title">Certificate of Accreditation</div>
        </div>

        <div class="content">
            <p class="certify-text">This is to certify that</p>
            <div class="institute-name">' . $certificate->institute_name .
            ($certificate->campus_name ? ' (' . $certificate->campus_name . ')' : '') . '</div>
            <p>has successfully fulfilled all the requirements and standards for</p>
            <div class="program-line">' . $certificate->program_name . '</div>
            <p>and is hereby granted <strong style="color:#ed6923;">' . $certificate->accreditation_status . '</strong> by the FDRE Education and Training Authority.</p>
            <div class="valid-until">Valid Until: ' . \Carbon\Carbon::parse($certificate->valid_until)->format('F j, Y') . '</div>
        </div>

        <div class="signature-block">
        <img src="' . $signatureSrc . '" class="seal">
            <div class="signature-line"></div>
    <div class="signature-name">' . $directorName . '</div>
            <div class="signature-title">Director General, Education and Training Authority</div>
        </div>

        <div class="verification-note">
            Verification ID: ' . strtoupper(uniqid()) . ' — You can also verify this certificate at the official FDRE ETA website: <strong>www.eta.gov.et</strong>
        </div>
    </div>
    ';

        // Generate PDF
        $options = new Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true);

        $dompdf = new Dompdf($options);
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'landscape');
        $dompdf->render();

        if ($returnBinary) {
            return $dompdf->output(); // For internal storage
        }

        $filename = 'accreditation_certificate_' . str_replace(' ', '_', $certificate->institute_name) . '.pdf';
        return $dompdf->stream($filename, ['Attachment' => false]);
    }



    public function downloadAssessorsOwnDeskReview($applicationId)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }


        $application = Application::findOrFail($applicationId);
        $user = auth()->user();

        // Fetch only the current assessor's reviews
        $dctReviews = DeskReview::where('application_id', $applicationId)
            ->where('reviewer_id', $user->id)
            ->where('indicator_id', '!=', 0)
            ->where('review_type', 'dct')
            ->where('review_phase', 'desk_review')
            ->with(['indicator', 'reviewer', 'standard'])
            ->get();

        if ($dctReviews->isEmpty()) {
            Alert::toast('No desk review exists for this application.', 'warning');
            return redirect()->back();
        }

        // Generate HTML content similar to your existing PDF generation
        $html = '<style>...</style>';

        // Add content specific to the assessor's review
        $html .= '<h2>Your Desk Review for ' . $application->program->name . '</h2>';

        // Add the reviews table
        $html .= '<table>...</table>';

        // Generate PDF
        $options = new Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true);

        $dompdf = new Dompdf($options);
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'landscape');
        $dompdf->render();

        $filename = 'my_review_' . $applicationId . '.pdf';
        return $dompdf->stream($filename);
    }
    public function downloadChairPersonDeskReviewinPdf($applicationId)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        $application = Application::findOrFail($applicationId);

        // Fetch the submission date from ApplicationStatusHistory
        $submissionDate = ApplicationStatusHistory::where('application_id', $applicationId)
            ->where('status', ApplicationStatusEnum::PROFILE_ACC)
            ->value('created_at');

        // Format the date dynamically
        $formattedSubmissionDate = $submissionDate ? $submissionDate->format('F j, Y') : 'a specific date';

        // Get all chairperson IDs for this application
        $chairpersonIds = DeskReviewAssignment::where('application_id', $applicationId)
            ->whereNotNull('chair_id')
            ->pluck('chair_id')
            ->toArray();

        // If no chairperson found, use reviewer_or_head = 1 as fallback
        if (empty($chairpersonIds)) {
            $chairpersonIds = DeskReview::where('application_id', $applicationId)
                ->where('reviewer_or_head', 1)
                ->pluck('reviewer_id')
                ->unique()
                ->toArray();
        }

        // Fetch desk reviews for DCT - only chairperson comments
        $dctReviews = DeskReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0) // Ignore indicator_id = 0
            ->where('review_type', 'dct') // Only DCT reviews
            ->where('review_phase', 'desk_review') // Only desk reviews
            ->where(function ($query) use ($chairpersonIds) {
                $query->whereIn('reviewer_id', $chairpersonIds)
                    ->orWhere('reviewer_or_head', 1); // Fallback condition
            })
            ->with(['indicator', 'reviewer', 'standard']) // Load related models
            ->get();

        // Fetch desk head reviews if application status is FINALIZED_BY_DESK - only chairperson comments
        $includeDeskHeadReview = strtolower($application->status) === strtolower("FINALIZED_BY_DESK");
        $dctHeadReviews = $includeDeskHeadReview
            ? DeskheadReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0) // Ignore indicator_id = 0
            ->where('review_type', 'dct') // Only DCT reviews
            ->where('review_phase', 'desk_review') // Only desk reviews
            ->where(function ($query) use ($chairpersonIds) {
                $query->whereIn('reviewer_id', $chairpersonIds)
                    ->orWhere('reviewer_or_head', 1); // Fallback condition
            })
            ->with(['indicator', 'reviewer', 'standard']) // Load related models
            ->get()
            : collect();

        // Fetch SSS and SER reviews - only chairperson comments
        $sssHeadReviews = SssReview::where('application_id', $applicationId)
            ->where('reviewer_or_head', 1)
            ->first();

        $serHeadReviews = SerReview::where('application_id', $applicationId)
            ->where('reviewer_or_head', 1)
            ->first();

        if ($dctReviews->isEmpty() && $dctHeadReviews->isEmpty() && !$sssHeadReviews && !$serHeadReviews) {
            Alert::toast('No desk reviews found. Please come back again.!', 'warning');
            return redirect()->back();
        }

        // Generate HTML content for the PDF
        $html = '<style>
                table { width: 100%; border-collapse: collapse; }
                th, td { border: 1px solid #000; padding: 5px; text-align: left; }
                th { background-color: #CCCCCC; font-weight: bold; }
                .page-break { page-break-after: always; }
                .header-logo {
            text-align: center;
            margin-bottom: 20px;
        }
        .header-logo img {
            height: 150px;
        }
                .watermark {
                    position: fixed;
                    opacity: 0.1;
                    font-size: 40px;
                    width: 100%;
                    text-align: center;
                    z-index: -1000;
                    transform: rotate(-45deg);
                    transform-origin: 50% 50%;
                    top: 50%;
                    left: 0;
                    color: #000000;
                    font-weight: bold;
                }
            </style>';

        // Cover Page
        $html .= '<div style="text-align: center; margin-bottom: 20px;">';
        $html .= '<img src="' . url('img/logo-square.png') . '" style="height: 200px; margin-bottom: 20px;">';
        $html .= '</div>';
        $html .= '<h1 style="text-align: center;">Education and Training Authority</h1>';
        $html .= '<h2 style="text-align: center;">Accreditation Desk Review Result Report for ' . $application->program->name . '</h2>';
        $html .= '<div class="page-break"></div>';

        // Formal Letter Content - KEPT ORIGINAL TEXT
        $html .= '<p><strong>To:</strong> ' . $application->institute->name . '</p>';
        $html .= '<p><strong>Subject:</strong> Feedback on the Application for Accreditation of the ' . $application->program->name . '</p>';
        $html .= '<br>';
        $html .= '<p>On ' . $formattedSubmissionDate . ', ' . $application->institute->name . ' submitted an application to the Education and Training Authority (ETA) for the accreditation of its undergraduate ' . $application->program->name . ' program (reference number ' . $application->reference_number . '). Following this, the ETA Desk Review Team conducted a preliminary evaluation based on the submitted application, which included the Application Letter, Data Collection Tool (DCT), Student Satisfaction Survey (SSS), Internal Self-Assessment Report, and supporting documents.</p>';
        $html .= '<p>Before forwarding the documents to the Team of Assessors (ToA) for further evaluation, the Desk Review Team has provided feedback on certain aspects of the ' . $application->program->name . ' program application. To ensure alignment with ETA\'s standards and guidelines, we have enclosed a summary of the Desk Review findings, which highlights areas requiring your attention.</p>';
        $html .= '<p>Please review this summary and return the updated documents to ETA within 15 working days. This will enable eligibility confirmation and facilitate the next steps in the evaluation process for accreditation decision.</p>';
        $html .= '<p>Best regards,</p>';
        $html .= '<p>CC:</p>';
        $html .= '<ul>
                <li>Director General</li>
                <li>Accreditation and Standardization Deputy Director General</li>
                <li>CEO for Accreditation</li>
                <li>ETA</li>
              </ul>';
        $html .= '<div class="page-break"></div>';

        // DCT Section - Only changed the query logic, not the display text
        if (!$dctReviews->isEmpty()) {
            $html .= '<h3 style="text-align: center;">Desk Review Comments (DCT)</h3>';
            $html .= '<table>
                    <thead>
                        <tr>
                            <th>Standard Name</th>
                            <th>Indicator Name</th>
                            <th>Desk Review Comments</th>
                        </tr>
                    </thead>
                    <tbody>';

            $groupedDctReviews = $dctReviews->groupBy('standard_id');
            foreach ($groupedDctReviews as $standardId => $reviews) {
                $standardName = $reviews->first()->standard?->name ?? "Unknown Standard";
                $indicators = $reviews->groupBy('indicator_id');

                $firstStandardRow = true;
                foreach ($indicators as $indicatorId => $indicatorReviews) {
                    $indicatorName = $indicatorReviews->first()->indicator?->name ?? "Unknown Indicator";

                    $html .= '<tr>';
                    if ($firstStandardRow) {
                        $html .= '<td rowspan="' . count($indicators) . '"><strong>' . $standardName . '</strong></td>';
                        $firstStandardRow = false;
                    }

                    $html .= '<td>' . $indicatorName . '</td>';
                    $html .= '<td>';
                    foreach ($indicatorReviews as $review) {
                        $html .= strip_tags($review->comment);
                    }
                    $html .= '</td>';
                    $html .= '</tr>';
                }
            }
            $html .= '</tbody></table>';
            $html .= '<div class="page-break"></div>';
        }

        // SSS Section - Only changed the query logic, not the display text
        if ($sssHeadReviews) {
            $html .= '<h3 style="text-align: center;">Student Satisfaction Survey (SSS) Comments</h3>';
            $html .= '<table>
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Question</th>
                            <th>Response</th>
                            <th>Comment</th>
                        </tr>
                    </thead>
                    <tbody>';

            $sssQuestions = SssReviewQuestionsEnumerator::getAllQuestions();
            $rowNumber = 1;
            foreach ($sssQuestions as $questionId => $questionText) {
                if ($questionId == 6) continue; // Skip Question 6 (General Comments)

                $yesNoField = "q{$questionId}_yes_no";
                $commentField = "q{$questionId}_comment";

                $response = $sssHeadReviews->$yesNoField ? 'Yes' : 'No';
                $comment = $sssHeadReviews->$commentField ?? 'No comment';

                $html .= '<tr>';
                $html .= '<td>' . $rowNumber . '</td>';
                $html .= '<td>' . $questionText . '</td>';
                $html .= '<td>' . $response . '</td>';
                $html .= '<td>' . $comment . '</td>';
                $html .= '</tr>';

                $rowNumber++;
            }
            $html .= '</tbody></table>';

            if (!empty($sssHeadReviews->q6_comment)) {
                $html .= '<h4>General Comments on Student Satisfaction Survey</h4>';
                $html .= '<p>' . $sssHeadReviews->q6_comment . '</p>';
            }
            $html .= '<div class="page-break"></div>';
        }

        // SER Section - Only changed the query logic, not the display text
        if ($serHeadReviews) {
            $html .= '<h3 style="text-align: center;">Self Evaluation Report (SER) Comments</h3>';
            $html .= '<table>
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Question</th>
                            <th>Response</th>
                            <th>Comment</th>
                        </tr>
                    </thead>
                    <tbody>';

            $serQuestions = SerReviewQuestionsEnumerator::getAllQuestions();
            $rowNumber = 1;
            foreach ($serQuestions as $questionId => $questionText) {
                if ($questionId == 10) continue; // Skip Question 10 (General Comments)

                $yesNoField = "q{$questionId}_yes_no";
                $commentField = "q{$questionId}_comment";

                $response = $serHeadReviews->$yesNoField ? 'Yes' : 'No';
                $comment = $serHeadReviews->$commentField ?? 'No comment';

                $html .= '<tr>';
                $html .= '<td>' . $rowNumber . '</td>';
                $html .= '<td>' . $questionText . '</td>';
                $html .= '<td>' . $response . '</td>';
                $html .= '<td>' . $comment . '</td>';
                $html .= '</tr>';

                $rowNumber++;
            }
            $html .= '</tbody></table>';

            if (!empty($serHeadReviews->q10_comment)) {
                $html .= '<h4>General Comments on Self Evaluation Report</h4>';
                $html .= '<p>' . $serHeadReviews->q10_comment . '</p>';
            }
        }

        $html .= '<div class="watermark">FDRE EDUCATION & TRAINING AUTHORITY</div>';

        // Generate PDF
        $options = new Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true);

        $dompdf = new Dompdf($options);
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'landscape');
        $dompdf->render();

        $filename = 'desk_review_' . $applicationId . '.pdf';
        return $dompdf->stream($filename);
    }

    public function downloadToaAllRoundinPdf($applicationId)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        $application = Application::with('institute', 'program')->findOrFail($applicationId);

        // Add logo
        $logoPath = public_path('img/logo-square.png');
        $logoBase64 = base64_encode(file_get_contents($logoPath));
        $logoSrc = 'data:image/png;base64,' . $logoBase64;

        // Get the weighting percentages from mainsettings
        $documentReviewWeight = Mainsetting::get('percentage_of_toa_document_review') ?? 50;
        $siteVisitWeight = Mainsetting::get('percentage_of_site_visit_review') ?? 50;

        // Generate HTML content for the PDF
        $html = '<style>
    table { width: 100%; border-collapse: collapse; }
    th, td { border: 1px solid #000; padding: 5px; text-align: center; }
    th { background-color: #CCCCCC; font-weight: bold; }
    .page-break { page-break-after: always; }
    .center { text-align: center; }
    .bold { font-weight: bold; }
    .vertical-align-top { vertical-align: top; }
    .header-logo {
            text-align: center;
            margin-bottom: 20px;
        }
        .header-logo img {
            height: 150px;
        }
    .watermark {
        position: fixed;
        opacity: 0.1;
        font-size: 40px;
        width: 100%;
        text-align: center;
        z-index: -1000;
        transform: rotate(-45deg);
        transform-origin: 50% 50%;
        top: 50%;
        left: 0;
        color: #000000;
        font-weight: bold;
    }
    .weight-info {
        font-style: italic;
        color: #555;
        margin-bottom: 15px;
    }
    .institute-info {
        margin-bottom: 10px;
        font-size: 18px;
    }
    </style>';


        // Cover Page with Institute Name
        $html .= '<div style="text-align: center; margin-bottom: 20px;"><img src="' . $logoSrc . '" style="height: 150px;"></div>';
        $html .= '<h1 class="center">Education and Training Authority</h1>';
        $html .= '<div class="institute-info center">Institution: ' . $application->institute->name . '</div>';
        $html .= '<h2 class="center">Final Accreditation Review Report for ' . $application->program->name . '</h2>';
        $html .= '<div class="weight-info center">Using weighted average: Document Review = ' . $documentReviewWeight . '%, Site Visit = ' . $siteVisitWeight . '%</div>';
        $html .= '<div class="page-break"></div>';

        // Get all reviewers who participated in either round, ordered by name last commented before Nekemte
        // $reviewers = User::whereHas('deskReviews', function ($query) use ($applicationId) {
        //     $query->where('application_id', $applicationId)
        //         ->whereIn('review_phase', ['toa_first_round', 'toa_second_round']);
        // })->orderBy('name')->get();

        // Get all reviewers who participated in either round with completed assignments, ordered by name
        $reviewers = User::whereHas('deskReviews', function ($query) use ($applicationId) {
            $query->where('application_id', $applicationId)
                ->whereIn('review_phase', ['toa_first_round', 'toa_second_round'])
                ->whereHas('deskReviewAssignmentByRound', function ($q) {
                    $q->where('status', 'Completed');
                });
        })->orderBy('name')->get();


        // Initialize array to store all reviewers' data for final summary
        $allReviewersData = [];
        $allStandards = collect(); // Will store all standards with their IDs for proper sorting

        foreach ($reviewers as $reviewer) {
            $reviewerName = $reviewer->name ?? "Unknown Reviewer";

            // Get first round data ordered by standard_id commented nekemte both
            // $firstRoundReviews = DeskReview::where('application_id', $applicationId)
            //     ->where('indicator_id', '!=', 0)
            //     ->where('review_phase', 'toa_first_round')
            //     ->where('reviewer_id', $reviewer->id)
            //     ->with(['indicator.substandard', 'standard'])
            //     ->orderBy('standard_id')
            //     ->get();

            // // Get second round data ordered by standard_id
            // $secondRoundReviews = DeskReview::where('application_id', $applicationId)
            //     ->where('indicator_id', '!=', 0)
            //     ->where('review_phase', 'toa_second_round')
            //     ->where('reviewer_id', $reviewer->id)
            //     ->with(['indicator.substandard', 'standard'])
            //     ->orderBy('standard_id')
            //     ->get();

            // Get first round data ordered by standard_id - only completed assignments
            $firstRoundReviews = DeskReview::where('application_id', $applicationId)
                ->where('indicator_id', '!=', 0)
                ->where('review_phase', 'toa_first_round')
                ->where('reviewer_id', $reviewer->id)
                ->whereHas('deskReviewAssignmentByRound', function ($query) {
                    $query->where('status', 'Completed');
                })
                ->with(['indicator.substandard', 'standard'])
                ->orderBy('standard_id')
                ->get();

            // Get second round data ordered by standard_id - only completed assignments
            $secondRoundReviews = DeskReview::where('application_id', $applicationId)
                ->where('indicator_id', '!=', 0)
                ->where('review_phase', 'toa_second_round')
                ->where('reviewer_id', $reviewer->id)
                ->whereHas('deskReviewAssignmentByRound', function ($query) {
                    $query->where('status', 'Completed');
                })
                ->with(['indicator.substandard', 'standard'])
                ->orderBy('standard_id')
                ->get();


            // Process round data
            $firstRoundData = $this->processRoundData($firstRoundReviews);
            $secondRoundData = $this->processRoundData($secondRoundReviews);

            // Collect all standards with their IDs for proper sorting
            $firstRoundReviews->each(function ($review) use (&$allStandards) {
                if ($review->standard) {
                    $allStandards[$review->standard->id] = $review->standard->name;
                }
            });
            $secondRoundReviews->each(function ($review) use (&$allStandards) {
                if ($review->standard) {
                    $allStandards[$review->standard->id] = $review->standard->name;
                }
            });

            // Combine data for this reviewer
            $reviewerData = [
                'name' => $reviewerName,
                'firstRound' => $firstRoundData,
                'secondRound' => $secondRoundData
            ];

            $allReviewersData[] = $reviewerData;

            // Create table for this reviewer
            $html .= '<h3 class="center">' . $reviewerName . '</h3>';
            $html .= '<table>
        <thead>
            <tr>
                <th rowspan="2">Standards</th>
                <th colspan="2">Document Review</th>
                <th colspan="2">Site Visit</th>
                <th rowspan="2">Weighted Average</th>
                <th rowspan="2">Weighted % Achieved</th>
            </tr>
            <tr>
                <th>Rating Result</th>
                <th>% Achieved</th>
                <th>Rating Result</th>
                <th>% Achieved</th>
            </tr>
        </thead>
        <tbody>';

            $totalFirstRating = 0;
            $totalFirstPercentage = 0;
            $totalSecondRating = 0;
            $totalSecondPercentage = 0;
            $totalWeightedAverage = 0;
            $totalWeightedPercentage = 0;
            $standardCount = 0;

            // Sort standards by their ID before displaying
            foreach ($allStandards->sortKeys() as $standardId => $standardName) {
                $firstRound = $firstRoundData[$standardName] ?? ['aggregatedValue' => 0, 'percentage' => 0];
                $secondRound = $secondRoundData[$standardName] ?? ['aggregatedValue' => 0, 'percentage' => 0];

                // Calculate weighted averages
                $weightedAverage = ($firstRound['aggregatedValue'] * $documentReviewWeight + $secondRound['aggregatedValue'] * $siteVisitWeight) / 100;
                $weightedPercentage = ($firstRound['percentage'] * $documentReviewWeight + $secondRound['percentage'] * $siteVisitWeight) / 100;

                $html .= '<tr>
                <td>' . $standardName . '</td>
                <td>' . round($firstRound['aggregatedValue'], 2) . '</td>
                <td>' . round($firstRound['percentage'], 2) . '%</td>
                <td>' . round($secondRound['aggregatedValue'], 2) . '</td>
                <td>' . round($secondRound['percentage'], 2) . '%</td>
                <td>' . round($weightedAverage, 2) . '</td>
                <td>' . round($weightedPercentage, 2) . '%</td>
            </tr>';

                $totalFirstRating += $firstRound['aggregatedValue'];
                $totalFirstPercentage += $firstRound['percentage'];
                $totalSecondRating += $secondRound['aggregatedValue'];
                $totalSecondPercentage += $secondRound['percentage'];
                $totalWeightedAverage += $weightedAverage;
                $totalWeightedPercentage += $weightedPercentage;
                $standardCount++;
            }

            // Add total row
            $html .= '<tr class="bold">
            <td>Total</td>
            <td>' . round($totalFirstRating, 2) . '</td>
            <td>' . round($totalFirstPercentage / max($standardCount, 1), 2) . '%</td>
            <td>' . round($totalSecondRating, 2) . '</td>
            <td>' . round($totalSecondPercentage / max($standardCount, 1), 2) . '%</td>
            <td>' . round($totalWeightedAverage, 2) . '</td>
            <td>' . round($totalWeightedPercentage / max($standardCount, 1), 2) . '%</td>
        </tr>';

            $html .= '</tbody></table>';
            $html .= '<div class="page-break"></div>';
        }

        // Final Summary Page - Standards sorted by ID
        $html .= '<h3 class="center">Key Parameters Overview Summary Table</h3>';
        $html .= '<table>
    <thead>
        <tr>
            <th rowspan="2">Standards</th>
            <th colspan="2">Document Review</th>
            <th colspan="2">Site Visit</th>
            <th colspan="2">Final Weighted Result</th>
        </tr>
        <tr>
            <th>Rating result</th>
            <th>% Achieved</th>
            <th>Rating result</th>
            <th>% Achieved</th>
            <th>Rating result</th>
            <th>% Achieved</th>
        </tr>
    </thead>
    <tbody>';

        $grandTotalFirstRating = 0;
        $grandTotalSecondRating = 0;
        $grandTotalWeighted = 0;
        $grandTotalWeightedPercentage = 0;
        $grandStandardCount = 0;

        // Process standards in order of their IDs
        foreach ($allStandards->sortKeys() as $standardId => $standardName) {
            $firstRoundRatings = [];
            $firstRoundPercentages = [];
            $secondRoundRatings = [];
            $secondRoundPercentages = [];
            $weightedAverages = [];
            $weightedPercentages = [];

            foreach ($allReviewersData as $reviewerData) {
                if (isset($reviewerData['firstRound'][$standardName])) {
                    $firstRoundRatings[] = $reviewerData['firstRound'][$standardName]['aggregatedValue'];
                    $firstRoundPercentages[] = $reviewerData['firstRound'][$standardName]['percentage'];
                }
                if (isset($reviewerData['secondRound'][$standardName])) {
                    $secondRoundRatings[] = $reviewerData['secondRound'][$standardName]['aggregatedValue'];
                    $secondRoundPercentages[] = $reviewerData['secondRound'][$standardName]['percentage'];

                    // Calculate weighted values for each reviewer
                    $frValue = $reviewerData['firstRound'][$standardName]['aggregatedValue'] ?? 0;
                    $frPercent = $reviewerData['firstRound'][$standardName]['percentage'] ?? 0;
                    $srValue = $reviewerData['secondRound'][$standardName]['aggregatedValue'] ?? 0;
                    $srPercent = $reviewerData['secondRound'][$standardName]['percentage'] ?? 0;

                    $weightedAverages[] = ($frValue * $documentReviewWeight + $srValue * $siteVisitWeight) / 100;
                    $weightedPercentages[] = ($frPercent * $documentReviewWeight + $srPercent * $siteVisitWeight) / 100;
                }
            }

            $avgFirstRating = count($firstRoundRatings) > 0 ? array_sum($firstRoundRatings) / count($firstRoundRatings) : 0;
            $avgFirstPercentage = count($firstRoundPercentages) > 0 ? array_sum($firstRoundPercentages) / count($firstRoundPercentages) : 0;
            $avgSecondRating = count($secondRoundRatings) > 0 ? array_sum($secondRoundRatings) / count($secondRoundRatings) : 0;
            $avgSecondPercentage = count($secondRoundPercentages) > 0 ? array_sum($secondRoundPercentages) / count($secondRoundPercentages) : 0;
            $avgWeighted = count($weightedAverages) > 0 ? array_sum($weightedAverages) / count($weightedAverages) : 0;
            $avgWeightedPercentage = count($weightedPercentages) > 0 ? array_sum($weightedPercentages) / count($weightedPercentages) : 0;

            $html .= '<tr>
            <td>' . $standardName . '</td>
            <td>' . round($avgFirstRating, 2) . '</td>
            <td>' . round($avgFirstPercentage, 2) . '%</td>
            <td>' . round($avgSecondRating, 2) . '</td>
            <td>' . round($avgSecondPercentage, 2) . '%</td>
            <td>' . round($avgWeighted, 2) . '</td>
            <td>' . round($avgWeightedPercentage, 2) . '%</td>
        </tr>';

            $grandTotalFirstRating += $avgFirstRating;
            $grandTotalSecondRating += $avgSecondRating;
            $grandTotalWeighted += $avgWeighted;
            $grandTotalWeightedPercentage += $avgWeightedPercentage;
            $grandStandardCount++;
        }

        // Calculate overall weighted average percentage
        $overallWeightedPercentage = $grandStandardCount > 0 ? $grandTotalWeightedPercentage / $grandStandardCount : 0;

        // Add total row
        $html .= '<tr class="bold">
        <td>Total</td>
        <td>' . round($grandTotalFirstRating, 2) . '</td>
        <td></td>
        <td>' . round($grandTotalSecondRating, 2) . '</td>
        <td></td>
        <td>' . round($grandTotalWeighted, 2) . '</td>
        <td>' . round($overallWeightedPercentage, 2) . '%</td>
    </tr>';

        $html .= '</tbody></table>';

        // Final decision section
        $html .= '<div class="page-break"></div>';
        $html .= '<h3 class="center">Evaluation Summary</h3>';
        $html .= '<p>The accreditation review process for ' . $application->program->name . ' at ' . $application->institute->name . ' has been completed through rigorous evaluation of both document review and site visit phases.</p>';
        $html .= '<p>Based on the weighted average scores across all standards and assessors, the program has achieved an overall score of ' . round($grandTotalWeighted, 2) . ' with a weighted percentage achievement of ' . round($overallWeightedPercentage, 2) . '%. This comprehensive evaluation considered:</p>';
        $html .= '<ul>
        <li>Document Review (weighted at ' . $documentReviewWeight . '%)</li>
        <li>Site Visit Assessment (weighted at ' . $siteVisitWeight . '%)</li>
    </ul>';
        $html .= '<p>The evaluation team has thoroughly examined all aspects of the program against the established standards. This report, along with all supporting documentation, is now submitted to the Accreditation Council for their final decision regarding the program\'s accreditation status.</p>';
        $html .= '<p>The Council will review these findings in accordance with the accreditation guidelines and policies to make their determination.</p>';

        // Add watermark before closing
        $html .= '<div class="watermark">FDRE EDUCATION & TRAINING AUTHORITY</div>';

        // Generate PDF
        $options = new Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true);

        $dompdf = new Dompdf($options);
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'landscape');
        $dompdf->render();

        // Output the PDF
        $filename = 'toa_final_accreditation_report_' . $applicationId . '.pdf';
        return $dompdf->stream($filename);
    }

    // Helper function to process round data
    private function processRoundData($reviews)
    {
        $data = [];

        // Group by standard
        $groupedByStandard = $reviews->groupBy('standard_id');

        foreach ($groupedByStandard as $standardId => $standardReviews) {
            $standard = $standardReviews->first()->standard;
            $standardName = $standard?->name ?? "Unknown Standard";
            $standardWeight = $standard?->weights ?? 1;

            $assessmentValue = $standardReviews->sum('rating_value');
            $totalIndicators = $standardReviews->count();
            $maxPossibleValue = $totalIndicators * 5;
            $aggregatedValue = $maxPossibleValue > 0 ? ($assessmentValue / $maxPossibleValue) * $standardWeight : 0;
            $percentageAchieved = $standardWeight > 0 ? ($aggregatedValue / $standardWeight) * 100 : 0;

            $data[$standardName] = [
                'aggregatedValue' => $aggregatedValue,
                'percentage' => $percentageAchieved,
                'weight' => $standardWeight
            ];
        }

        return $data;
    }
    public function downloadMyAssessmentReport($applicationId)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        // Get authenticated user ID
        $reviewerId = auth()->id();

        // Check if reviewer has completed both rounds
        $firstRoundCompleted = DeskReviewAssignment::where('application_id', $applicationId)
            ->where('assessor_id', $reviewerId)
            ->where('review_phase', 'toa_first_round')
            ->where('status', 'Completed')
            ->exists();

        $secondRoundCompleted = DeskReviewAssignment::where('application_id', $applicationId)
            ->where('assessor_id', $reviewerId)
            ->where('review_phase', 'toa_second_round')
            ->where('status', 'Completed')
            ->exists();

        if (!$firstRoundCompleted && !$secondRoundCompleted) {
            Alert::toast('You have not completed any review rounds for this application.', 'error');
            return redirect()->back();
        }

        $application = Application::findOrFail($applicationId);
        $reviewerName = auth()->user()->name;

        // Generate HTML content for the PDF
        $html = '<style>
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #000; padding: 5px; text-align: left; }
        th { background-color: #CCCCCC; font-weight: bold; }
        .page-break { page-break-after: always; }
        .center { text-align: center; }
        .bold { font-weight: bold; }
        .formula { font-style: italic; color: #555; margin: 5px 0; }
        .highlight { background-color: #FFF2CC; }
        .deviation-high { color: #FF0000; font-weight: bold; }
        .header-logo {
            text-align: center;
            margin-bottom: 20px;
        }
        .header-logo img {
            height: 150px;
        }
        .watermark {
            position: fixed;
            opacity: 0.1;
            font-size: 40px;
            width: 100%;
            text-align: center;
            z-index: -1000;
            transform: rotate(-45deg);
            transform-origin: 50% 50%;
            top: 50%;
            left: 0;
            color: #000000;
            font-weight: bold;
        }
    </style>';

        // Add logo
        $logoPath = public_path('img/logo-square.png');
        $logoBase64 = base64_encode(file_get_contents($logoPath));
        $logoSrc = 'data:image/png;base64,' . $logoBase64;

        // Cover Page
        $html .= '<div class="header-logo"><img src="' . $logoSrc . '" alt="ETA Logo"></div>';
        $html .= '<h1 class="center">Education and Training Authority</h1>';
        $html .= '<h2 class="center">My Assessment Report for ' . $application->program->name . '</h2>';
        $html .= '<h3 class="center">Reviewer: ' . $reviewerName . '</h3>';
        $html .= '<div class="page-break"></div>';

        // Function to generate review section
        $generateReviewSection = function ($reviewPhase, $roundName) use ($applicationId, $reviewerId) {
            $reviews = DeskReview::where('application_id', $applicationId)
                ->where('reviewer_id', $reviewerId)
                ->where('indicator_id', '!=', 0)
                ->where('review_phase', $reviewPhase)
                ->with(['indicator.substandard', 'standard'])
                ->get();

            if ($reviews->isEmpty()) {
                return null;
            }

            $html = '<h3 class="center">' . $roundName . ' Assessment</h3>';

            // Sort and group reviews by standard
            $groupedByStandard = $reviews->sortBy('standard_id')->groupBy('standard_id');
            $summaryData = [];

            foreach ($groupedByStandard as $standardId => $standardReviews) {
                $standard = $standardReviews->first()->standard;
                $standardName = $standard?->name ?? "Unknown Standard";
                $standardWeight = $standard?->weights ?? 1;

                $html .= '<h4>' . $standardName . '</h4>';
                $html .= '<table>
                <thead>
                    <tr>
                        <th>Standard Name</th>
                        <th>Standard for Rating</th>
                        <th>Rating Value</th>
                        <th>Key Findings</th>
                    </tr>
                </thead>
                <tbody>';

                // Group by substandard and sort
                $groupedBySubstandard = $standardReviews->sortBy(function ($review) {
                    return $review->indicator->substandard_id ?? 0;
                })->groupBy(function ($review) {
                    return $review->indicator->substandard_id ?? 'no_substandard';
                });

                foreach ($groupedBySubstandard as $substandardId => $substandardReviews) {
                    $substandardName = $substandardReviews->first()->indicator->substandard?->name ?? "No Substandard";
                    $html .= '<tr class="bold">
                    <td>' . $standardName . '</td>
                    <td colspan="3">' . $substandardName . '</td>
                </tr>';

                    // Sort indicators by indicator_id
                    foreach ($substandardReviews->sortBy('indicator_id') as $review) {
                        $html .= '<tr>
                        <td></td>
                        <td>' . ($review->indicator?->name ?? "Unknown Indicator") . '</td>
                        <td>' . ($review->rating_value ?? "N/A") . '</td>
                        <td>' . ($review->comment ?? "No comment") . '</td>
                    </tr>';
                    }
                }

                // Calculate weighted values
                $assessmentValue = $standardReviews->sum('rating_value');
                $totalIndicators = $standardReviews->count();
                $maxPossibleValue = $totalIndicators * 5;
                $aggregatedValue = $maxPossibleValue > 0 ? ($assessmentValue / $maxPossibleValue) * $standardWeight : 0;
                $percentageAchieved = $standardWeight > 0 ? ($aggregatedValue / $standardWeight) * 100 : 0;

                $html .= '<tr class="bold">
                <td colspan="4">
                    <div class="formula">Calculation Formula:</div>
                    Assessment Value: ' . $assessmentValue . ' (Sum of ratings)<br>
                    Aggregated Value: (' . $assessmentValue . ' ÷ ' . $maxPossibleValue . ') × ' . $standardWeight . ' = ' . round($aggregatedValue, 2) . '
                </td>
            </tr>';

                $html .= '</tbody></table><div class="page-break"></div>';

                $summaryData[] = [
                    'standardName' => $standardName,
                    'aggregatedValue' => $aggregatedValue,
                    'percentageAchieved' => $percentageAchieved,
                    'weight' => $standardWeight
                ];
            }

            // Summary table
            $html .= '<h3 class="center">' . $roundName . ' Summary</h3>';
            $html .= '<table>
            <thead>
                <tr>
                    <th>Standard</th>
                    <th>Aggregated Value</th>
                    <th>% Achieved</th>
                </tr>
            </thead>
            <tbody>';

            $totalWeightedAggregated = 0;
            $totalWeight = 0;
            $totalPercentage = 0;

            foreach ($summaryData as $summary) {
                $html .= '<tr>
                <td>' . $summary['standardName'] . '</td>
                <td>' . round($summary['aggregatedValue'], 2) . '</td>
                <td>' . round($summary['percentageAchieved'], 2) . '%</td>
            </tr>';

                $totalWeightedAggregated += $summary['aggregatedValue'];
                $totalWeight += $summary['weight'];
                $totalPercentage += $summary['percentageAchieved'] * $summary['weight'];
            }

            $overallPercentage = $totalWeight > 0 ? $totalPercentage / $totalWeight : 0;

            $html .= '<tr class="bold">
            <td>Total</td>
            <td>' . round($totalWeightedAggregated, 2) . '</td>
            <td>' . round($overallPercentage, 2) . '%</td>
        </tr>';

            $html .= '</tbody></table><div class="page-break"></div>';

            return $html;
        };

        // Add first round if completed
        if ($firstRoundCompleted) {
            $firstRoundHtml = $generateReviewSection('toa_first_round', 'First Round');
            if ($firstRoundHtml) {
                $html .= $firstRoundHtml;
            }
        }

        // Add second round if completed
        if ($secondRoundCompleted) {
            $secondRoundHtml = $generateReviewSection('toa_second_round', 'Second Round');
            if ($secondRoundHtml) {
                $html .= $secondRoundHtml;
            }
        }

        // Add watermark
        $html .= '<div class="watermark">CONFIDENTIAL - REVIEWER COPY</div>';

        // Generate PDF
        $options = new Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true);

        $dompdf = new Dompdf($options);
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'landscape');
        $dompdf->render();

        // Output the PDF
        $filename = 'my_assessment_report_' . $applicationId . '.pdf';
        return $dompdf->stream($filename);
    }
    public function downloadToaFirstRoundinPdf($applicationId)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        $application = Application::findOrFail($applicationId);

        // Fetch the submission date from ApplicationStatusHistory
        $submissionDate = ApplicationStatusHistory::where('application_id', $applicationId)
            ->where('status', ApplicationStatusEnum::PROFILE_ACC)
            ->value('created_at');

        // Format the date dynamically
        $formattedSubmissionDate = $submissionDate ? $submissionDate->format('F j, Y') : 'a specific date';


        //old
        /*
// Fetch site visit reviews for TOA First Round
$toaReviews = DeskReview::where('application_id', $applicationId)
    ->where('indicator_id', '!=', 0)
    ->where('review_phase', 'toa_first_round')
    ->with(['indicator.substandard', 'reviewer', 'standard']) ->get();
*/

        $reviewPhase = 'toa_first_round';

        $toaReviews = DeskReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0)
            ->where('review_phase', $reviewPhase)
            ->whereHas('deskReviewAssignmentByRound', function ($query) use ($reviewPhase) {
                $query->where('review_phase', $reviewPhase)
                    ->where('status', 'Completed');
            })
            ->with(['indicator.substandard', 'reviewer', 'standard'])
            ->get();




        if ($toaReviews->isEmpty()) {
            Alert::toast('No completed first round reviews found for this application. Please come back again!', 'warning');
            return redirect()->back();
        }

        // Generate HTML content for the PDF
        $html = '<style>
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #000; padding: 5px; text-align: left; }
        th { background-color: #CCCCCC; font-weight: bold; }
        .page-break { page-break-after: always; }
        .center { text-align: center; }
        .bold { font-weight: bold; }
        .formula { font-style: italic; color: #555; margin: 5px 0; }
        .highlight { background-color: #FFF2CC; }
        .deviation-high { color: #FF0000; font-weight: bold; }
         .header-logo {
        text-align: center;
        margin-bottom: 20px;
    }
    .header-logo img {
        height: 150px;
    }
        .watermark {
            position: fixed;
            opacity: 0.1;
            font-size: 40px;
            width: 100%;
            text-align: center;
            z-index: -1000;
            transform: rotate(-45deg);
            transform-origin: 50% 50%;
            top: 50%;
            left: 0;
            color: #000000;
            font-weight: bold;
        }
    </style>';

        $logoPath = public_path('img/logo-square.png');
        $logoBase64 = base64_encode(file_get_contents($logoPath));
        $logoSrc = 'data:image/png;base64,' . $logoBase64;


        // Cover Page
        // Cover Page with Logo
        $html .= '<div class="header-logo"><img src="' . $logoSrc . '" alt="ETA Logo"></div>';
        $html .= '<h1 class="center">Education and Training Authority</h1>';
        $html .= '<h2 class="center">First Round Review Assessment Report for ' . $application->program->name . '</h2>';
        $html .= '<div class="page-break"></div>';

        // Group reviews by reviewer
        $groupedByReviewer = $toaReviews->groupBy('reviewer_id');
        $allAssessorsSummaryData = [];
        $allStandardsData = [];

        foreach ($groupedByReviewer as $reviewerId => $reviews) {
            $reviewerName = $reviews->first()->reviewer?->name ?? "Unknown Reviewer";
            $html .= '<h3 class="center">' . $reviewerName . '</h3>';

            // Group reviews by standard
            $groupedByStandard = $reviews->sortBy('standard_id')->groupBy('standard_id');
            $summaryData = [];

            foreach ($groupedByStandard as $standardId => $standardReviews) {
                $standard = $standardReviews->first()->standard;
                $standardName = $standard?->name ?? "Unknown Standard";
                $standardWeight = $standard?->weights ?? 1;

                $html .= '<h4>' . $standardName . '</h4>';
                $html .= '<table>
            <thead>
                <tr>
                    <th>Standard Name</th>
                    <th>Standard for Rating</th>
                    <th>Rating Value</th>
                    <th>Key Findings</th>
                </tr>
            </thead>
            <tbody>';

                // Group by substandard
                // Group by substandard and sort by substandard_id
                $groupedBySubstandard = $standardReviews->sortBy(function ($review) {
                    return $review->indicator->substandard_id ?? 0;
                })->groupBy(function ($review) {
                    return $review->indicator->substandard_id ?? 'no_substandard';
                });


                foreach ($groupedBySubstandard as $substandardId => $substandardReviews) {
                    $substandardName = $substandardReviews->first()->indicator->substandard?->name ?? "No Substandard";
                    $html .= '<tr class="bold">
                    <td>' . $standardName . '</td>
                    <td colspan="3">' . $substandardName . '</td>
                </tr>';

                    // Sort indicators by indicator_id within each substandard
                    $sortedIndicators = $substandardReviews->sortBy(function ($review) {
                        return $review->indicator_id;
                    });

                    foreach ($sortedIndicators as $review) {
                        $html .= '<tr>
                        <td></td>
                        <td>' . ($review->indicator?->name ?? "Unknown Indicator") . '</td>
                        <td>' . ($review->rating_value ?? "N/A") . '</td>
                        <td>' . ($review->comment ?? "No comment") . '</td>
                    </tr>';
                    }
                }

                // Calculate weighted values
                $assessmentValue = $standardReviews->sum('rating_value');
                $totalIndicators = $standardReviews->count();
                $maxPossibleValue = $totalIndicators * 5;
                $aggregatedValue = $maxPossibleValue > 0 ? ($assessmentValue / $maxPossibleValue) * $standardWeight : 0;
                $percentageAchieved = $standardWeight > 0 ? ($aggregatedValue / $standardWeight) * 100 : 0;

                // Show simplified calculation formula
                $html .= '<tr class="bold">
                    <td colspan="4">
                        <div class="formula">Calculation Formula:</div>
                        Assessment Value: ' . $assessmentValue . ' (Sum of ratings)<br>
                        Aggregated Value: (' . $assessmentValue . ' ÷ ' . $maxPossibleValue . ') × ' . $standardWeight . ' = ' . round($aggregatedValue, 2) . '
                    </td>
                </tr>';

                $html .= '</tbody></table><div class="page-break"></div>';

                $summaryData[] = [
                    'standardName' => $standardName,
                    'standardId' => $standardId,
                    'assessmentValue' => $assessmentValue,
                    'aggregatedValue' => $aggregatedValue,
                    'percentageAchieved' => $percentageAchieved,
                    'weight' => $standardWeight,
                    'maxPossibleValue' => $maxPossibleValue
                ];

                // Store raw scores for comparison
                if (!isset($allStandardsData[$standardId])) {
                    $allStandardsData[$standardId] = [
                        'name' => $standardName,
                        'weight' => $standardWeight,
                        'scores' => []
                    ];
                }
                $allStandardsData[$standardId]['scores'][] = $assessmentValue;
            }

            // Key Parameters Overview Summary Table
            $html .= '<h3 class="center">First Round Key Parameters Summary for ' . $reviewerName . '</h3>';
            $html .= '<table>
            <thead>
                <tr>
                    <th>Standard</th>
                    <th>Aggregated Value</th>
                    <th>% Achieved</th>
                </tr>
            </thead>
            <tbody>';

            $totalWeightedAggregated = 0;
            $totalWeight = 0;
            $totalPercentage = 0;

            foreach ($summaryData as $summary) {
                $html .= '<tr>
                    <td>' . $summary['standardName'] . '</td>
                    <td>' . round($summary['aggregatedValue'], 2) . '</td>
                    <td>' . round($summary['percentageAchieved'], 2) . '%</td>
                </tr>';

                $totalWeightedAggregated += $summary['aggregatedValue'];
                $totalWeight += $summary['weight'];
                $totalPercentage += $summary['percentageAchieved'] * $summary['weight'];
            }

            $overallPercentage = $totalWeight > 0 ? $totalPercentage / $totalWeight : 0;

            $html .= '<tr class="bold">
                <td>Total</td>
                <td>' . round($totalWeightedAggregated, 2) . '</td>
                <td>' . round($overallPercentage, 2) . '%</td>
            </tr>';

            $html .= '</tbody></table><div class="page-break"></div>';
            $allAssessorsSummaryData[] = $summaryData;
        }

        // Reviewer Comparison Table
        if (count($groupedByReviewer) > 1) {
            $html .= '<h3 class="center">Statistical Analysis of Assessor Ratings</h3>';
            $html .= '<p class="center small-text">The comparison includes standard deviation and variance to assess the degree of agreement among reviewers across evaluation criteria.</p>';
            $html .= '<table class="highlight">
            <thead>
                <tr>
                    <th>Standard</th>';

            // Add reviewer headers
            $reviewerCount = 1;
            foreach ($groupedByReviewer as $reviewerId => $reviews) {
                $html .= '<th>Rev#' . $reviewerCount . '</th>';
                $reviewerCount++;
            }

            $html .= '<th>Average</th>
                    <th>Std Dev</th>
                    <th>Variance</th>
                </tr>
            </thead>
            <tbody>';

            foreach ($allStandardsData as $standardId => $standardData) {
                $scores = $standardData['scores'];
                $average = array_sum($scores) / count($scores);

                // Calculate standard deviation and variance
                $variance = 0.0;
                foreach ($scores as $score) {
                    $variance += pow($score - $average, 2);
                }
                $variance = $variance / count($scores);
                $stdDev = sqrt($variance);

                // Determine if deviation is high (more than 20% of average)
                $deviationClass = ($stdDev > ($average * 0.2)) ? 'deviation-high' : '';

                $html .= '<tr>
                    <td>' . $standardData['name'] . '</td>';

                foreach ($scores as $score) {
                    $html .= '<td>' . $score . '</td>';
                }

                // Fill empty columns if less reviewers
                for ($i = count($scores); $i < count($groupedByReviewer); $i++) {
                    $html .= '<td>-</td>';
                }

                $html .= '<td>' . round($average, 2) . '</td>
                    <td class="' . $deviationClass . '">' . round($stdDev, 2) . '</td>
                    <td class="' . $deviationClass . '">' . round($variance, 2) . '</td>
                </tr>';
            }

            $html .= '</tbody></table><div class="page-break"></div>';
        }

        // Final Summary Page
        $html .= '<h3 class="center">Average First Round Results by All Assessors</h3>';
        $html .= '<table>
        <thead>
            <tr>
                <th>Standard</th>
                <th>Avg Aggregated Value</th>
                <th>Avg % Achieved</th>
            </tr>
        </thead>
        <tbody>';

        $allStandards = collect($allAssessorsSummaryData)
            ->flatten(1)
            ->unique('standardName')
            ->pluck('standardName');

        $finalTotalWeightedAggregated = 0;
        $finalTotalPercentage = 0;
        $finalTotalWeight = 0;

        foreach ($allStandards as $standard) {
            $standardData = collect($allAssessorsSummaryData)
                ->flatten(1)
                ->where('standardName', $standard);

            $avgAggregated = $standardData->avg('aggregatedValue');
            $avgPercentage = $standardData->avg('percentageAchieved');
            $weight = $standardData->first()['weight'] ?? 1;

            $html .= '<tr>
                <td>' . $standard . '</td>
                <td>' . round($avgAggregated, 2) . '</td>
                <td>' . round($avgPercentage, 2) . '%</td>
            </tr>';

            $finalTotalWeightedAggregated += $avgAggregated;
            $finalTotalPercentage += $avgPercentage * $weight;
            $finalTotalWeight += $weight;
        }

        $finalOverallPercentage = $finalTotalWeight > 0 ? $finalTotalPercentage / $finalTotalWeight : 0;

        $html .= '<tr class="bold">
            <td>Total</td>
            <td>' . round($finalTotalWeightedAggregated, 2) . '</td>
            <td>' . round($finalOverallPercentage, 2) . '%</td>
        </tr>';

        $html .= '</tbody></table>';

        // Add watermark before closing
        $html .= '<div class="watermark">FDRE EDUCATION & TRAINING AUTHORITY</div>';

        // Generate PDF
        $options = new Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true);

        $dompdf = new Dompdf($options);
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'landscape');
        $dompdf->render();

        // Output the PDF with corrected filename
        $filename = 'toa_first_round_review_' . $applicationId . '.pdf';
        return $dompdf->stream($filename);
    }

    public function downloadToaSecondRoundinPdf($applicationId)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        $application = Application::findOrFail($applicationId);

        // Fetch the submission date from ApplicationStatusHistory
        $submissionDate = ApplicationStatusHistory::where('application_id', $applicationId)
            ->where('status', ApplicationStatusEnum::PROFILE_ACC)
            ->value('created_at');

        // Format the date dynamically
        $formattedSubmissionDate = $submissionDate ? $submissionDate->format('F j, Y') : 'a specific date';

        // Fetch site visit reviews for TOA Second Round
        /* $toaReviews = DeskReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0)
            ->where('review_phase', 'toa_second_round')
            ->with(['indicator.substandard', 'reviewer', 'standard'])
            ->get();*/



        $reviewPhase = 'toa_second_round';

        $toaReviews = DeskReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0)
            ->where('review_phase', $reviewPhase)
            ->whereHas('deskReviewAssignmentByRound', function ($query) use ($reviewPhase) {
                $query->where('review_phase', $reviewPhase)
                    ->where('status', 'Completed');
            })
            ->with(['indicator.substandard', 'reviewer', 'standard'])
            ->get();

        if ($toaReviews->isEmpty()) {
            Alert::toast('No second round reviews found. Please come back again!', 'warning');
            return redirect()->back();
        }
        $logoPath = public_path('img/logo-square.png');
        $logoBase64 = base64_encode(file_get_contents($logoPath));
        $logoSrc = 'data:image/png;base64,' . $logoBase64;

        // Generate HTML content for the PDF
        $html = '<style>
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #000; padding: 5px; text-align: left; }
        th { background-color: #CCCCCC; font-weight: bold; }
        .page-break { page-break-after: always; }
        .center { text-align: center; }
        .bold { font-weight: bold; }
        .formula { font-style: italic; color: #555; margin: 5px 0; }
        .highlight { background-color: #FFF2CC; }
        .deviation-high { color: #FF0000; font-weight: bold; }
        .header-logo {
        text-align: center;
        margin-bottom: 20px;
    }
    .header-logo img {
        height: 150px;
    }
        .watermark {
            position: fixed;
            opacity: 0.1;
            font-size: 40px;
            width: 100%;
            text-align: center;
            z-index: -1000;
            transform: rotate(-45deg);
            transform-origin: 50% 50%;
            top: 50%;
            left: 0;
            color: #000000;
            font-weight: bold;
        }
    </style>';

        // Cover Page
        $html .= '<div class="header-logo"><img src="' . $logoSrc . '" alt="ETA Logo"></div>';
        $html .= '<h1 class="center">Education and Training Authority</h1>';
        $html .= '<h2 class="center">Second Round Review Assessment Report for ' . $application->program->name . '</h2>';
        $html .= '<div class="page-break"></div>';

        // Group reviews by reviewer
        $groupedByReviewer = $toaReviews->groupBy('reviewer_id');
        $allAssessorsSummaryData = [];
        $allStandardsData = [];

        foreach ($groupedByReviewer as $reviewerId => $reviews) {
            $reviewerName = $reviews->first()->reviewer?->name ?? "Unknown Reviewer";
            $html .= '<h3 class="center">' . $reviewerName . '</h3>';

            // Group reviews by standard
            $groupedByStandard = $reviews->sortBy('standard_id')->groupBy('standard_id');
            $summaryData = [];

            foreach ($groupedByStandard as $standardId => $standardReviews) {
                $standard = $standardReviews->first()->standard;
                $standardName = $standard?->name ?? "Unknown Standard";
                $standardWeight = $standard?->weights ?? 1;

                $html .= '<h4>' . $standardName . '</h4>';
                $html .= '<table>
                <thead>
                    <tr>
                        <th>Standard Name</th>
                        <th>Standard for Rating</th>
                        <th>Rating Value</th>
                        <th>Key Findings</th>
                    </tr>
                </thead>
                <tbody>';

                // Group by substandard and sort by substandard_id
                $groupedBySubstandard = $standardReviews->sortBy(function ($review) {
                    return $review->indicator->substandard_id ?? 0;
                })->groupBy(function ($review) {
                    return $review->indicator->substandard_id ?? 'no_substandard';
                });

                foreach ($groupedBySubstandard as $substandardId => $substandardReviews) {
                    $substandardName = $substandardReviews->first()->indicator->substandard?->name ?? "No Substandard";
                    $html .= '<tr class="bold">
                    <td>' . $standardName . '</td>
                    <td colspan="3">' . $substandardName . '</td>
                </tr>';

                    // Sort indicators by indicator_id within each substandard
                    $sortedIndicators = $substandardReviews->sortBy('indicator_id');

                    foreach ($sortedIndicators as $review) {
                        $html .= '<tr>
                        <td></td>
                        <td>' . ($review->indicator?->name ?? "Unknown Indicator") . '</td>
                        <td>' . ($review->rating_value ?? "N/A") . '</td>
                        <td>' . ($review->comment ?? "No comment") . '</td>
                    </tr>';
                    }
                }
                // Calculate weighted values
                $assessmentValue = $standardReviews->sum('rating_value');
                $totalIndicators = $standardReviews->count();
                $maxPossibleValue = $totalIndicators * 5;
                $aggregatedValue = $maxPossibleValue > 0 ? ($assessmentValue / $maxPossibleValue) * $standardWeight : 0;
                $percentageAchieved = $standardWeight > 0 ? ($aggregatedValue / $standardWeight) * 100 : 0;

                // Show simplified calculation formula
                $html .= '<tr class="bold">
                    <td colspan="4">
                        <div class="formula">Calculation Formula:</div>
                        Assessment Value: ' . $assessmentValue . ' (Sum of ratings)<br>
                        Aggregated Value: (' . $assessmentValue . ' ÷ ' . $maxPossibleValue . ') × ' . $standardWeight . ' = ' . round($aggregatedValue, 2) . '
                    </td>
                </tr>';

                $html .= '</tbody></table><div class="page-break"></div>';

                $summaryData[] = [
                    'standardName' => $standardName,
                    'standardId' => $standardId,
                    'assessmentValue' => $assessmentValue,
                    'aggregatedValue' => $aggregatedValue,
                    'percentageAchieved' => $percentageAchieved,
                    'weight' => $standardWeight,
                    'maxPossibleValue' => $maxPossibleValue
                ];

                // Store raw scores for comparison
                if (!isset($allStandardsData[$standardId])) {
                    $allStandardsData[$standardId] = [
                        'name' => $standardName,
                        'weight' => $standardWeight,
                        'scores' => []
                    ];
                }
                $allStandardsData[$standardId]['scores'][] = $assessmentValue;
            }

            // Key Parameters Overview Summary Table
            $html .= '<h3 class="center">Second Round Key Parameters Summary for ' . $reviewerName . '</h3>';
            $html .= '<table>
            <thead>
                <tr>
                    <th>Standard</th>
                    <th>Aggregated Value</th>
                    <th>% Achieved</th>
                </tr>
            </thead>
            <tbody>';

            $totalWeightedAggregated = 0;
            $totalWeight = 0;
            $totalPercentage = 0;

            foreach ($summaryData as $summary) {
                $html .= '<tr>
                    <td>' . $summary['standardName'] . '</td>
                    <td>' . round($summary['aggregatedValue'], 2) . '</td>
                    <td>' . round($summary['percentageAchieved'], 2) . '%</td>
                </tr>';

                $totalWeightedAggregated += $summary['aggregatedValue'];
                $totalWeight += $summary['weight'];
                $totalPercentage += $summary['percentageAchieved'] * $summary['weight'];
            }

            $overallPercentage = $totalWeight > 0 ? $totalPercentage / $totalWeight : 0;

            $html .= '<tr class="bold">
                <td>Total</td>
                <td>' . round($totalWeightedAggregated, 2) . '</td>
                <td>' . round($overallPercentage, 2) . '%</td>
            </tr>';

            $html .= '</tbody></table><div class="page-break"></div>';
            $allAssessorsSummaryData[] = $summaryData;
        }

        // Reviewer Comparison Table
        if (count($groupedByReviewer) > 1) {
            $html .= '<h3 class="center">Statistical Analysis of Assessors Ratings</h3>';
            $html .= '<p class="center small-text">The comparison includes standard deviation and variance to assess the degree of agreement among reviewers across evaluation criteria.</p>';
            $html .= '<table class="highlight">
            <thead>
                <tr>
                    <th>Standard</th>';

            // Add reviewer headers
            $reviewerCount = 1;
            foreach ($groupedByReviewer as $reviewerId => $reviews) {
                $html .= '<th>Rev#' . $reviewerCount . '</th>';
                $reviewerCount++;
            }

            $html .= '<th>Average</th>
                    <th>Std Dev</th>
                    <th>Variance</th>
                </tr>
            </thead>
            <tbody>';

            foreach ($allStandardsData as $standardId => $standardData) {
                $scores = $standardData['scores'];
                $average = array_sum($scores) / count($scores);

                // Calculate standard deviation and variance
                $variance = 0.0;
                foreach ($scores as $score) {
                    $variance += pow($score - $average, 2);
                }
                $variance = $variance / count($scores);
                $stdDev = sqrt($variance);

                // Determine if deviation is high (more than 20% of average)
                $deviationClass = ($stdDev > ($average * 0.2)) ? 'deviation-high' : '';

                $html .= '<tr>
                    <td>' . $standardData['name'] . '</td>';

                foreach ($scores as $score) {
                    $html .= '<td>' . $score . '</td>';
                }

                // Fill empty columns if less reviewers
                for ($i = count($scores); $i < count($groupedByReviewer); $i++) {
                    $html .= '<td>-</td>';
                }

                $html .= '<td>' . round($average, 2) . '</td>
                    <td class="' . $deviationClass . '">' . round($stdDev, 2) . '</td>
                    <td class="' . $deviationClass . '">' . round($variance, 2) . '</td>
                </tr>';
            }

            $html .= '</tbody></table><div class="page-break"></div>';
        }

        // Final Summary Page
        $html .= '<h3 class="center">Average Site Visit Results by All Assessors</h3>';
        $html .= '<table>
        <thead>
            <tr>
                <th>Standard</th>
                <th>Avg Aggregated Value</th>
                <th>Avg % Achieved</th>
            </tr>
        </thead>
        <tbody>';

        $allStandards = collect($allAssessorsSummaryData)
            ->flatten(1)
            ->unique('standardName')
            ->pluck('standardName');

        $finalTotalWeightedAggregated = 0;
        $finalTotalPercentage = 0;
        $finalTotalWeight = 0;

        foreach ($allStandards as $standard) {
            $standardData = collect($allAssessorsSummaryData)
                ->flatten(1)
                ->where('standardName', $standard);

            $avgAggregated = $standardData->avg('aggregatedValue');
            $avgPercentage = $standardData->avg('percentageAchieved');
            $weight = $standardData->first()['weight'] ?? 1;

            $html .= '<tr>
                <td>' . $standard . '</td>
                <td>' . round($avgAggregated, 2) . '</td>
                <td>' . round($avgPercentage, 2) . '%</td>
            </tr>';

            $finalTotalWeightedAggregated += $avgAggregated;
            $finalTotalPercentage += $avgPercentage * $weight;
            $finalTotalWeight += $weight;
        }

        $finalOverallPercentage = $finalTotalWeight > 0 ? $finalTotalPercentage / $finalTotalWeight : 0;

        $html .= '<tr class="bold">
            <td>Total</td>
            <td>' . round($finalTotalWeightedAggregated, 2) . '</td>
            <td>' . round($finalOverallPercentage, 2) . '%</td>
        </tr>';

        $html .= '</tbody></table>';
        // Add watermark before closing
        $html .= '<div class="watermark">FDRE EDUCATION & TRAINING AUTHORITY</div>';
        // Generate PDF
        $options = new Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true);

        $dompdf = new Dompdf($options);
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'landscape');
        $dompdf->render();

        // Output the PDF with corrected filename
        $filename = 'toa_second_round_review_' . $applicationId . '.pdf';
        return $dompdf->stream($filename);
    }










    public function downloadDeskReview($applicationId)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        $application = Application::findOrFail($applicationId);

        // Fetch the submission date from ApplicationStatusHistory
        $submissionDate = ApplicationStatusHistory::where('application_id', $applicationId)
            ->where('status', ApplicationStatusEnum::PROFILE_ACC)
            ->value('created_at');

        // Format the date dynamically
        $formattedSubmissionDate = $submissionDate ? $submissionDate->format('F j, Y') : 'a specific date';

        // Fetch desk reviews for DCT
        $dctReviews = DeskReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0) // Ignore indicator_id = 0
            ->where('review_type', 'dct') // Only DCT reviews
            ->with(['indicator', 'reviewer', 'standard']) // Load related models
            ->get();

        // Fetch desk head reviews if application status is FINALIZED_BY_DESK
        $includeDeskHeadReview = strtolower($application->status) === strtolower("FINALIZED_BY_DESK");
        $dctHeadReviews = $includeDeskHeadReview
            ? DeskheadReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0) // Ignore indicator_id = 0
            ->where('review_type', 'dct') // Only DCT reviews
            ->with(['indicator', 'reviewer', 'standard']) // Load related models
            ->get()
            : collect();

        // Fetch SSS and SER reviews
        $sssHeadReviews = SssReview::where('application_id', $applicationId)
            ->where('reviewer_or_head', 1)
            ->first();

        $serHeadReviews = SerReview::where('application_id', $applicationId)
            ->where('reviewer_or_head', 1)
            ->first();

        if ($dctReviews->isEmpty() && $dctHeadReviews->isEmpty() && !$sssHeadReviews && !$serHeadReviews) {
            Alert::toast('No desk reviews found. Please come back again.!', 'warning');
            return redirect()->back(); // Redirect back to the previous page
        }

        // Create PHPWord document
        $phpWord = new PhpWord();

        // Add Cover Page
        $coverSection = $phpWord->addSection();
        $coverSection->addTextBreak(2);
        $coverSection->addText(
            'Education and Training Authority',
            ['bold' => true, 'size' => 18],
            ['alignment' => Jc::CENTER]
        );
        $coverSection->addTextBreak(1);
        $coverSection->addText(
            'Accreditation Desk Review Result Report for ' . $application->program->name,
            ['bold' => true, 'size' => 16],
            ['alignment' => Jc::CENTER]
        );
        $coverSection->addTextBreak(3);

        // Add Formal Letter Page
        $letterSection = $phpWord->addSection();
        $letterSection->addText('To: ' . $application->institute->name, ['bold' => true]);
        $letterSection->addTextBreak(1);
        $letterSection->addText('Subject: Feedback on the Application for Accreditation of the ' . $application->program->name, ['bold' => true]);
        $letterSection->addTextBreak(2);

        // Dynamic and professional letter content
        $letterContent = "On " . $formattedSubmissionDate . ", " . $application->institute->name . " submitted an application to the Education and Training Authority (ETA) for the accreditation of its undergraduate " . $application->program->name . " program (reference number " . $application->reference_number . "). Following this, the ETA Desk Review Team conducted a preliminary evaluation based on the submitted application, which included the Application Letter, Data Collection Tool (DCT), Student Satisfaction Survey (SSS), Internal Self-Assessment Report, and supporting documents.<w:br/><w:br/>";
        $letterContent .= "Before forwarding the documents to the Team of Assessors (ToA) for further evaluation, the Desk Review Team has provided feedback on certain aspects of the " . $application->program->name . " program application. To ensure alignment with ETA's standards and guidelines, we have enclosed a summary of the Desk Review findings, which highlights areas requiring your attention.<w:br/><w:br/>";
        $letterContent .= "Please review this summary and return the updated documents to ETA within 15 working days. This will enable eligibility confirmation and facilitate the next steps in the evaluation process for accreditation decision.<w:br/><w:br/><w:br/><w:br/><w:br/><w:br/>";
        $letterContent .= "Best regards,<w:br/><w:br/><w:br/>";
        $letterContent .= "CC:<w:br/>";
        $letterSection->addText($letterContent);
        $letterSection->addListItem('Director General', 0);
        $letterSection->addListItem('Accreditation and Standardization Deputy Director General', 0);
        $letterSection->addListItem('CEO for Accreditation', 0);
        $letterSection->addListItem('ETA', 0);
        $letterSection->addTextBreak(2);

        // Add DCT Section
        // Add DCT Section - Fixed version
        if (!$dctReviews->isEmpty()) {
            $dctSection = $phpWord->addSection(['orientation' => 'landscape']);
            $dctSection->addText('Desk Review Comments (DCT)', ['bold' => true, 'size' => 16], ['alignment' => Jc::CENTER]);

            $phpWord->addTableStyle('DeskReviewTable', [
                'borderSize'  => 6,
                'borderColor' => '000000',
                'cellMargin'  => 80,
            ]);

            $table = $dctSection->addTable('DeskReviewTable');
            $table->addRow();
            $table->addCell(4000, ['bgColor' => 'CCCCCC'])->addText('Standard Name', ['bold' => true]);
            $table->addCell(4000, ['bgColor' => 'CCCCCC'])->addText('Indicator Name', ['bold' => true]);
            $table->addCell(8000, ['bgColor' => 'CCCCCC'])->addText('Desk Review Comments', ['bold' => true]);

            // First group by standard_id and sort
            $groupedByStandard = $dctReviews->groupBy('standard_id')->sortKeys();

            foreach ($groupedByStandard as $standardId => $reviewsByStandard) {
                $standardName = $reviewsByStandard->first()->standard?->name ?? 'Unknown Standard';

                // Then group by indicator inside each standard and sort
                $groupedByIndicator = $reviewsByStandard->groupBy('indicator_id')->sortKeys();

                foreach ($groupedByIndicator as $indicatorId => $indicatorReviews) {
                    $indicatorName = $indicatorReviews->first()->indicator?->name ?? 'Unknown Indicator';

                    $table->addRow();
                    $table->addCell(4000, ['bgColor' => 'FFFFCC'])->addText($standardName, ['bold' => true]);
                    $table->addCell(4000)->addText($indicatorName);

                    $commentCell = $table->addCell(8000);
                    $firstReview = true;

                    foreach ($indicatorReviews as $review) {
                        $reviewerName = $review->reviewer?->name ?? "Unknown Reviewer";
                        if (!$firstReview) {
                            $commentCell->addTextBreak();
                        }
                        $commentCell->addText("**$reviewerName:**", ['bold' => true]);
                        $htmlContent = $review->comment;
                        $plainText = Html2Text::convert($htmlContent, ['ignore_errors' => true]);
                        $commentCell->addText($plainText);
                        $firstReview = false;
                    }
                }
            }
        }

        // Add SSS Section
        if ($sssHeadReviews) {
            $sssSection = $phpWord->addSection(['orientation' => 'landscape']);
            $sssSection->addText('Student Satisfaction Survey (SSS) Comments', ['bold' => true, 'size' => 16], ['alignment' => Jc::CENTER]);

            $phpWord->addTableStyle('SSSTable', [
                'borderSize'  => 6,
                'borderColor' => '000000',
                'cellMargin'  => 80,
            ]);

            $table = $sssSection->addTable('SSSTable');
            $table->addRow();
            $table->addCell(1000, ['bgColor' => 'CCCCCC'])->addText('#', ['bold' => true]); // Auto-increment column
            $table->addCell(4000, ['bgColor' => 'CCCCCC'])->addText('Question', ['bold' => true]);
            $table->addCell(3000, ['bgColor' => 'CCCCCC'])->addText('Response', ['bold' => true]);
            $table->addCell(7000, ['bgColor' => 'CCCCCC'])->addText('Comment', ['bold' => true]);

            // Fetch SSS questions from enumerator
            $sssQuestions = SssReviewQuestionsEnumerator::getAllQuestions();

            $rowNumber = 1; // Auto-increment counter
            foreach ($sssQuestions as $questionId => $questionText) {
                // Skip Question 6 (General Comments)
                if ($questionId == 6) {
                    continue;
                }

                $yesNoField = "q{$questionId}_yes_no";
                $commentField = "q{$questionId}_comment";

                $response = $sssHeadReviews->$yesNoField ? 'Yes' : 'No';
                $comment = $sssHeadReviews->$commentField ?? 'No comment';

                $table->addRow();
                $table->addCell(1000)->addText($rowNumber); // Auto-increment number
                $table->addCell(4000)->addText($questionText);
                $table->addCell(3000)->addText($response);
                $table->addCell(7000)->addText($comment);

                $rowNumber++; // Increment counter
            }

            // Add General Comments for SSS
            if (!empty($sssHeadReviews->q6_comment)) {
                $sssSection->addTextBreak(2);
                $sssSection->addText('General Comments on Student Satisfaction Survey', ['bold' => true, 'size' => 14]);
                $sssSection->addText($sssHeadReviews->q6_comment);
            }
        }

        // Add SER Section
        if ($serHeadReviews) {
            $serSection = $phpWord->addSection(['orientation' => 'landscape']);
            $serSection->addText('Self Evaluation Report (SER) Comments', ['bold' => true, 'size' => 16], ['alignment' => Jc::CENTER]);

            $phpWord->addTableStyle('SERTable', [
                'borderSize'  => 6,
                'borderColor' => '000000',
                'cellMargin'  => 80,
            ]);

            $table = $serSection->addTable('SERTable');
            $table->addRow();
            $table->addCell(1000, ['bgColor' => 'CCCCCC'])->addText('#', ['bold' => true]); // Auto-increment column
            $table->addCell(4000, ['bgColor' => 'CCCCCC'])->addText('Question', ['bold' => true]);
            $table->addCell(3000, ['bgColor' => 'CCCCCC'])->addText('Response', ['bold' => true]);
            $table->addCell(7000, ['bgColor' => 'CCCCCC'])->addText('Comment', ['bold' => true]);

            // Fetch SER questions from enumerator
            $serQuestions = SerReviewQuestionsEnumerator::getAllQuestions();

            $rowNumber = 1; // Auto-increment counter
            foreach ($serQuestions as $questionId => $questionText) {
                // Skip Question 10 (General Comments)
                if ($questionId == 10) {
                    continue;
                }

                $yesNoField = "q{$questionId}_yes_no";
                $commentField = "q{$questionId}_comment";

                $response = $serHeadReviews->$yesNoField ? 'Yes' : 'No';
                $comment = $serHeadReviews->$commentField ?? 'No comment';

                $table->addRow();
                $table->addCell(1000)->addText($rowNumber); // Auto-increment number
                $table->addCell(4000)->addText($questionText);
                $table->addCell(3000)->addText($response);
                $table->addCell(7000)->addText($comment);

                $rowNumber++; // Increment counter
            }

            // Add General Comments for SER
            if (!empty($serHeadReviews->q10_comment)) {
                $serSection->addTextBreak(2);
                $serSection->addText('General Comments on Self Evaluation Report', ['bold' => true, 'size' => 14]);
                $serSection->addText($serHeadReviews->q10_comment);
            }
        }

        // Save document
        $filename = 'desk_review_' . $applicationId . '.docx';
        $tempFile = tempnam(sys_get_temp_dir(), $filename);
        $phpWord->save($tempFile, 'Word2007');

        return response()->download($tempFile, $filename)->deleteFileAfterSend(true);
    }

    public function downloadSummarizedDeskReviewinPdf($applicationId)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        $application = Application::findOrFail($applicationId);
        $logoUrl = url('img/logo-square.png'); // Your logo path


        $logoPath = public_path('img/logo-square.png');
        $logoBase64 = base64_encode(file_get_contents($logoPath));
        $logoSrc = 'data:image/png;base64,' . $logoBase64;



        // Fetch the submission date from ApplicationStatusHistory
        $submissionDate = ApplicationStatusHistory::where('application_id', $applicationId)
            ->where('status', ApplicationStatusEnum::PROFILE_ACC)
            ->value('created_at');

        $formattedSubmissionDate = $submissionDate ? $submissionDate->format('F j, Y') : 'a specific date';

        // Get the chairperson ID for this application
        $chairpersonAssignment = DeskReviewAssignment::where('application_id', $applicationId)
            ->whereNotNull('chair_id')
            ->first();

        if (!$chairpersonAssignment) {
            Alert::toast('No chairperson assigned for this application.', 'warning');
            return redirect()->back();
        }

        $chairpersonId = $chairpersonAssignment->chair_id;

        // Only fetch reviews by the chairperson
        $dctReviews = DeskReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0)
            ->where('review_type', 'dct')
            ->where('review_phase', 'desk_review')
            ->where('created_by', $chairpersonId) // Using created_by to match chairperson
            ->with(['indicator', 'standard'])
            ->get();

        $includeDeskHeadReview = strtolower($application->status) === strtolower("FINALIZED_BY_DESK");
        $dctHeadReviews = $includeDeskHeadReview
            ? DeskheadReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0)
            ->where('review_type', 'dct')
            ->where('review_phase', 'desk_review')
            ->where('created_by', $chairpersonId) // Using created_by to match chairperson
            ->with(['indicator', 'standard'])
            ->get()
            : collect();

        // For SSS and SER, we'll filter for head reviews (reviewer_or_head = 1)
        $sssHeadReviews = SssReview::where('application_id', $applicationId)
            ->where('reviewer_or_head', 1)
            ->where('created_by', $chairpersonId) // Ensure it's the chairperson's review
            ->first();

        $serHeadReviews = SerReview::where('application_id', $applicationId)
            ->where('reviewer_or_head', 1)
            ->where('created_by', $chairpersonId) // Ensure it's the chairperson's review
            ->first();

        if ($dctReviews->isEmpty() && $dctHeadReviews->isEmpty() && !$sssHeadReviews && !$serHeadReviews) {
            Alert::toast('No chairperson reviews found for this application.', 'warning');
            return redirect()->back();
        }

        // Start PDF HTML
        // Start PDF HTML
        $html = '<style>
    table { width: 100%; border-collapse: collapse; }
    th, td { border: 1px solid #000; padding: 5px; text-align: left; }
    th { background-color: #CCCCCC; font-weight: bold; }
    .standard-cell { background-color: #FFFFCC; font-weight: bold; }
    .page-break { page-break-after: always; }
    .header-logo {
        text-align: center;
        margin-bottom: 20px;
    }
    .header-logo img {
        height: 150px;
    }
    .watermark {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) rotate(-30deg);
        opacity: 0.1;
        z-index: -1;
        text-align: center;
    }
    .watermark img {
        height: 300px; /* Larger size for watermark */
    }
    </style>';

        // Cover page with main logo
        $html .= '<div class="header-logo"><img src="' . $logoSrc . '" alt="ETA Logo"></div>';
        $html .= '<h1 style="text-align: center;">Education and Training Authority</h1>';
        $html .= '<h2 style="text-align: center;">Summarized Desk Review Result Report for ' . $application->program->name . '</h2>';

        // Centered watermark for all pages
        $html .= '<div class="watermark"><img src="' . $logoSrc . '" alt="ETA Watermark"></div>';


        $html .= '<div class="page-break"></div>';
        $html .= '<p><strong>To:</strong> ' . $application->institute->name . '</p>';
        $html .= '<p><strong>Subject:</strong> Feedback on the Application for Accreditation of the ' . $application->program->name . '</p>';
        $html .= '<br>';
        $html .= '<p>On ' . $formattedSubmissionDate . ', ' . $application->institute->name . ' submitted an application to the Education and Training Authority (ETA) for the accreditation of its undergraduate ' . $application->program->name . ' program (reference number ' . $application->reference_number . '). Following this, the ETA Desk Review Team conducted a preliminary evaluation based on the submitted application, which included the Application Letter, Data Collection Tool (DCT), Student Satisfaction Survey (SSS), Internal Self-Assessment Report, and supporting documents.</p>';
        $html .= '<p>This document summarizes the chairperson\'s review comments on certain aspects of the ' . $application->program->name . ' program application. To ensure alignment with ETA\'s standards and guidelines, we have enclosed a summary of the Desk Review findings, which highlights areas requiring your attention.</p>';
        $html .= '<p>Please review this summary and return the updated documents to ETA within 15 working days. This will enable eligibility confirmation and facilitate the next steps in the evaluation process for accreditation decision.</p>';
        $html .= '<p>Best regards,</p>';
        $html .= '<p>CC:</p>';
        $html .= '<ul>
    <li>Director General</li>
    <li>Accreditation and Standardization Deputy Director General</li>
    <li>CEO for Accreditation</li>
    <li>ETA</li>
    </ul>';
        $html .= '<div class="page-break"></div>';

        // DCT Section - Only chairperson's comments
        if (!$dctReviews->isEmpty()) {
            $html .= '<h3 style="text-align: center;">Desk Review Comments (DCT)</h3>';
            $html .= '<table>
        <thead>
            <tr>
                <th style="width: 25%">Standard Name</th>
                <th style="width: 25%">Indicator Name</th>
                <th style="width: 50%">Comments</th>
            </tr>
        </thead>
        <tbody>';

            // Group by standard_id and sort by standard_id
            $groupedByStandard = $dctReviews->groupBy('standard_id')->sortKeys();

            foreach ($groupedByStandard as $standardId => $reviewsByStandard) {
                $standardName = $reviewsByStandard->first()->standard?->name ?? 'Unknown Standard';

                // Group by indicator inside each standard and sort
                $groupedByIndicator = $reviewsByStandard->groupBy('indicator_id')->sortKeys();

                foreach ($groupedByIndicator as $indicatorId => $indicatorReviews) {
                    $indicatorName = $indicatorReviews->first()->indicator?->name ?? 'Unknown Indicator';

                    $html .= '<tr>';
                    $html .= '<td class="standard-cell"><strong>' . $standardName . '</strong></td>';
                    $html .= '<td>' . $indicatorName . '</td>';
                    $html .= '<td>';

                    // Only show the comment (no reviewer name)
                    foreach ($indicatorReviews as $review) {
                        $html .= strip_tags($review->comment);
                    }

                    $html .= '</td>';
                    $html .= '</tr>';
                }
            }

            $html .= '</tbody></table>';
            $html .= '<div class="page-break"></div>';
        }

        // SSS Section - Only chairperson's comments
        if ($sssHeadReviews) {
            $html .= '<h3 style="text-align: center;">Student Satisfaction Survey (SSS) Comments</h3>';
            $html .= '<table>
        <thead>
            <tr>
                <th>#</th>
                <th>Question</th>
                <th>Response</th>
                <th>Comment</th>
            </tr>
        </thead>
        <tbody>';

            $sssQuestions = SssReviewQuestionsEnumerator::getAllQuestions();
            $rowNumber = 1;
            foreach ($sssQuestions as $questionId => $questionText) {
                if ($questionId == 6) continue;
                $yesNoField = "q{$questionId}_yes_no";
                $commentField = "q{$questionId}_comment";
                $response = $sssHeadReviews->$yesNoField ? 'Yes' : 'No';
                $comment = $sssHeadReviews->$commentField ?? 'No comment';
                $html .= "<tr><td>$rowNumber</td><td>$questionText</td><td>$response</td><td>$comment</td></tr>";
                $rowNumber++;
            }
            $html .= '</tbody></table>';

            if (!empty($sssHeadReviews->q6_comment)) {
                $html .= '<h4>General Comments on Student Satisfaction Survey</h4>';
                $html .= '<p>' . $sssHeadReviews->q6_comment . '</p>';
            }
            $html .= '<div class="page-break"></div>';
        }

        // SER Section - Only chairperson's comments
        if ($serHeadReviews) {
            $html .= '<h3 style="text-align: center;">Self Evaluation Report (SER) Comments</h3>';
            $html .= '<table>
        <thead>
            <tr>
                <th>#</th>
                <th>Question</th>
                <th>Response</th>
                <th>Comment</th>
            </tr>
        </thead>
        <tbody>';

            $serQuestions = SerReviewQuestionsEnumerator::getAllQuestions();
            $rowNumber = 1;
            foreach ($serQuestions as $questionId => $questionText) {
                if ($questionId == 10) continue;
                $yesNoField = "q{$questionId}_yes_no";
                $commentField = "q{$questionId}_comment";
                $response = $serHeadReviews->$yesNoField ? 'Yes' : 'No';
                $comment = $serHeadReviews->$commentField ?? 'No comment';
                $html .= "<tr><td>$rowNumber</td><td>$questionText</td><td>$response</td><td>$comment</td></tr>";
                $rowNumber++;
            }
            $html .= '</tbody></table>';

            if (!empty($serHeadReviews->q10_comment)) {
                $html .= '<h4>General Comments on Self Evaluation Report</h4>';
                $html .= '<p>' . $serHeadReviews->q10_comment . '</p>';
            }
        }

        // Generate PDF
        $options = new Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true);

        $dompdf = new Dompdf($options);
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'landscape');
        $dompdf->render();

        // Create filename with institute and program names
        $instituteName = Str::slug($application->institute->name);
        $programName = Str::slug($application->program->name);
        $filename = 'desk_review_' . $instituteName . '_' . $programName . '.pdf';
        return $dompdf->stream($filename);
    }


    public function downloadDeskReview2($applicationId)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        $application = Application::findOrFail($applicationId);
        // Fetch the submission date from ApplicationStatusHistory
        $submissionDate = ApplicationStatusHistory::where('application_id', $applicationId)
            ->where('status', ApplicationStatusEnum::PROFILE_ACC)
            ->value('created_at');

        // Format the date dynamically
        $formattedSubmissionDate = $submissionDate ? $submissionDate->format('F j, Y') : 'a specific date';

        // Fetch desk reviews for DCT
        $dctReviews = DeskReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0) // Ignore indicator_id = 0
            ->where('review_type', 'dct') // Only DCT reviews
            ->with(['indicator', 'reviewer', 'standard']) // Load related models
            ->get();

        // Fetch desk reviews for SSS
        $sssReviews = DeskReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0) // Ignore indicator_id = 0
            ->where('review_type', 'sss') // Only SSS reviews
            ->with(['indicator', 'reviewer', 'standard']) // Load related models
            ->get();

        // Fetch desk reviews for SER
        $serReviews = DeskReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0) // Ignore indicator_id = 0
            ->where('review_type', 'ser') // Only SER reviews
            ->with(['indicator', 'reviewer', 'standard']) // Load related models
            ->get();

        // Fetch desk head reviews if application status is FINALIZED_BY_DESK
        $includeDeskHeadReview = strtolower($application->status) === strtolower("FINALIZED_BY_DESK");
        $dctHeadReviews = $includeDeskHeadReview
            ? DeskheadReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0) // Ignore indicator_id = 0
            ->where('review_type', 'dct') // Only DCT reviews
            ->with(['indicator', 'reviewer', 'standard']) // Load related models
            ->get()
            : collect();

        $sssHeadReviews = $includeDeskHeadReview
            ? DeskheadReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0) // Ignore indicator_id = 0
            ->where('review_type', 'sss') // Only SSS reviews
            ->with(['indicator', 'reviewer', 'standard']) // Load related models
            ->get()
            : collect();

        $serHeadReviews = $includeDeskHeadReview
            ? DeskheadReview::where('application_id', $applicationId)
            ->where('indicator_id', '!=', 0) // Ignore indicator_id = 0
            ->where('review_type', 'ser') // Only SER reviews
            ->with(['indicator', 'reviewer', 'standard']) // Load related models
            ->get()
            : collect();

        if ($dctReviews->isEmpty() && $sssReviews->isEmpty() && $serReviews->isEmpty() && $dctHeadReviews->isEmpty() && $sssHeadReviews->isEmpty() && $serHeadReviews->isEmpty()) {
            Alert::toast('No desk reviews found. Please come back again.!', 'warning');
            return redirect()->back(); // Redirect back to the previous page
        }

        // Create PHPWord document
        $phpWord = new PhpWord();

        // Add Cover Page (unchanged)
        $coverSection = $phpWord->addSection();
        $coverSection->addTextBreak(2);
        $coverSection->addText(
            'Education and Training Authority',
            ['bold' => true, 'size' => 18],
            ['alignment' => Jc::CENTER]
        );
        $coverSection->addTextBreak(1);
        $coverSection->addText(
            'Accreditation Desk Review Result Report for ' . $application->program->name,
            ['bold' => true, 'size' => 16],
            ['alignment' => Jc::CENTER]
        );
        $coverSection->addTextBreak(3);

        // Add Formal Letter Page (updated)
        $letterSection = $phpWord->addSection();
        $letterSection->addText('To: ' . $application->institute->name, ['bold' => true]);
        $letterSection->addTextBreak(1);
        $letterSection->addText('Subject: Feedback on the Application for Accreditation of the ' . $application->program->name, ['bold' => true]);
        $letterSection->addTextBreak(2);

        // Dynamic and professional letter content
        $letterContent = "On " . $formattedSubmissionDate . ", " . $application->institute->name . " submitted an application to the Education and Training Authority (ETA) for the accreditation of its undergraduate " . $application->program->name . " program (reference number " . $application->reference_number . "). Following this, the ETA Desk Review Team conducted a preliminary evaluation based on the submitted application, which included the Application Letter, Data Collection Tool (DCT), Student Satisfaction Survey (SSS), Internal Self-Assessment Report, and supporting documents.<w:br/><w:br/>";
        $letterContent .= "Before forwarding the documents to the Team of Assessors (ToA) for further evaluation, the Desk Review Team has provided feedback on certain aspects of the " . $application->program->name . " program application. To ensure alignment with ETA's standards and guidelines, we have enclosed a summary of the Desk Review findings, which highlights areas requiring your attention.<w:br/><w:br/>";
        $letterContent .= "Please review this summary and return the updated documents to ETA within 15 working days. This will enable eligibility confirmation and facilitate the next steps in the evaluation process for accreditation decision.<w:br/><w:br/><w:br/><w:br/><w:br/><w:br/>";
        $letterContent .= "Best regards,<w:br/><w:br/><w:br/>";
        $letterContent .= "CC:<w:br/>";
        $letterSection->addText($letterContent);
        $letterSection->addListItem('Director General', 0);
        $letterSection->addListItem('Accreditation and Standardization Deputy Director General', 0);
        $letterSection->addListItem('CEO for Accreditation', 0);
        $letterSection->addListItem('ETA', 0);
        $letterSection->addTextBreak(2);

        // Add DCT Section (unchanged)
        if (!$dctReviews->isEmpty()) {
            $dctSection = $phpWord->addSection(['orientation' => 'landscape']);
            $dctSection->addText('Desk Review Comments (DCT)', ['bold' => true, 'size' => 16], ['alignment' => Jc::CENTER]);

            $phpWord->addTableStyle('DeskReviewTable', [
                'borderSize'  => 6,
                'borderColor' => '000000',
                'cellMargin'  => 80,
            ]);

            $table = $dctSection->addTable('DeskReviewTable');
            $table->addRow();
            $table->addCell(4000, ['bgColor' => 'CCCCCC'])->addText('Standard Name', ['bold' => true]);
            $table->addCell(4000, ['bgColor' => 'CCCCCC'])->addText('Indicator Name', ['bold' => true]);
            $table->addCell(8000, ['bgColor' => 'CCCCCC'])->addText('Desk Review Comments', ['bold' => true]);

            $groupedDctReviews = $dctReviews->groupBy('standard_id');
            foreach ($groupedDctReviews as $standardId => $reviews) {
                $standardName = $reviews->first()->standard?->name ?? "Unknown Standard";
                $indicators = $reviews->groupBy('indicator_id');

                $firstStandardRow = true;
                foreach ($indicators as $indicatorId => $indicatorReviews) {
                    $indicatorName = $indicatorReviews->first()->indicator?->name ?? "Unknown Indicator";

                    $table->addRow();
                    if ($firstStandardRow) {
                        $table->addCell(4000, ['vMerge' => 'restart', 'bgColor' => 'FFFFCC'])
                            ->addText($standardName, ['bold' => true]);
                        $firstStandardRow = false;
                    } else {
                        $table->addCell(4000, ['vMerge' => 'continue']);
                    }

                    $table->addCell(4000)->addText($indicatorName);
                    $commentCell = $table->addCell(8000);
                    $firstReview = true;

                    foreach ($indicatorReviews as $review) {
                        $reviewerName = $review->reviewer?->name ?? "Unknown Reviewer";
                        if (!$firstReview) {
                            $commentCell->addTextBreak();
                        }
                        $commentCell->addText("**$reviewerName:**", ['bold' => true]);
                        $htmlContent = $review->comment;
                        $plainText = Html2Text::convert($htmlContent, ['ignore_errors' => true]);
                        $commentCell->addText($plainText);
                        $firstReview = false;
                    }
                }
            }
        }

        // Add SSS Section
        if (!$sssReviews->isEmpty()) {
            $sssSection = $phpWord->addSection(['orientation' => 'landscape']);
            $sssSection->addText('Student Satisfaction Survey (SSS) Comments', ['bold' => true, 'size' => 16], ['alignment' => Jc::CENTER]);

            foreach ($sssReviews as $review) {
                $reviewerName = $review->reviewer?->name ?? "Unknown Reviewer";
                $sssSection->addText("**$reviewerName:**", ['bold' => true]);
                $htmlContent = $review->comment;
                $plainText = Html2Text::convert($htmlContent, ['ignore_errors' => true]);
                $sssSection->addText($plainText);
                $sssSection->addTextBreak(1); // Add space between reviews
            }
        }

        // Add SER Section
        if (!$serReviews->isEmpty()) {
            $serSection = $phpWord->addSection();
            $serSection->addText('Self Evaluation Report (SER) Comments', ['bold' => true, 'size' => 16], ['alignment' => Jc::CENTER]);

            foreach ($serReviews as $review) {
                $reviewerName = $review->reviewer?->name ?? "Unknown Reviewer";
                $serSection->addText("**$reviewerName:**", ['bold' => true]);
                $htmlContent = $review->comment;
                $plainText = Html2Text::convert($htmlContent, ['ignore_errors' => true]);
                $serSection->addText($plainText);
                $serSection->addTextBreak(1); // Add space between reviews
            }
        }

        // Add Desk Head Review Section if application status is FINALIZED_BY_DESK
        if ($includeDeskHeadReview) {
            $deskHeadSection = $phpWord->addSection();
            $deskHeadSection->addText('Finalized Desk Head Reviews', ['bold' => true, 'size' => 16], ['alignment' => Jc::CENTER]);
            $deskHeadSection->addTextBreak(1);

            // Add DCT Head Reviews
            if (!$dctHeadReviews->isEmpty()) {
                $dctHeadSection = $phpWord->addSection(['orientation' => 'landscape']);
                $dctHeadSection->addText('Finalized Desk Head Reviews (DCT)', ['bold' => true, 'size' => 16], ['alignment' => Jc::CENTER]);

                $phpWord->addTableStyle('DeskHeadReviewTable', [
                    'borderSize'  => 6,
                    'borderColor' => '000000',
                    'cellMargin'  => 80,
                ]);

                $table = $dctHeadSection->addTable('DeskHeadReviewTable');
                $table->addRow();
                $table->addCell(4000, ['bgColor' => 'CCCCCC'])->addText('Standard Name', ['bold' => true]);
                $table->addCell(4000, ['bgColor' => 'CCCCCC'])->addText('Indicator Name', ['bold' => true]);
                $table->addCell(8000, ['bgColor' => 'CCCCCC'])->addText('Desk Head Review Comments', ['bold' => true]);

                $groupedDctHeadReviews = $dctHeadReviews->groupBy('standard_id');
                foreach ($groupedDctHeadReviews as $standardId => $reviews) {
                    $standardName = $reviews->first()->standard?->name ?? "Unknown Standard";
                    $indicators = $reviews->groupBy('indicator_id');

                    $firstStandardRow = true;
                    foreach ($indicators as $indicatorId => $indicatorReviews) {
                        $indicatorName = $indicatorReviews->first()->indicator?->name ?? "Unknown Indicator";

                        $table->addRow();
                        if ($firstStandardRow) {
                            $table->addCell(4000, ['vMerge' => 'restart', 'bgColor' => 'FFFFCC'])
                                ->addText($standardName, ['bold' => true]);
                            $firstStandardRow = false;
                        } else {
                            $table->addCell(4000, ['vMerge' => 'continue']);
                        }

                        $table->addCell(4000)->addText($indicatorName);
                        $commentCell = $table->addCell(8000);
                        $firstReview = true;

                        foreach ($indicatorReviews as $review) {
                            $reviewerName = $review->reviewer?->name ?? "Unknown Reviewer";
                            if (!$firstReview) {
                                $commentCell->addTextBreak();
                            }
                            $commentCell->addText("**$reviewerName:**", ['bold' => true]);
                            $htmlContent = $review->comment;
                            $plainText = Html2Text::convert($htmlContent, ['ignore_errors' => true]);
                            $commentCell->addText($plainText);
                            $firstReview = false;
                        }
                    }
                }
            }

            // Add SSS Head Reviews
            if (!$sssHeadReviews->isEmpty()) {
                $sssHeadSection = $phpWord->addSection(['orientation' => 'landscape']);
                $sssHeadSection->addText('Finalized Desk Head Reviews (SSS)', ['bold' => true, 'size' => 16], ['alignment' => Jc::CENTER]);

                foreach ($sssHeadReviews as $review) {
                    $reviewerName = $review->reviewer?->name ?? "Unknown Reviewer";
                    $sssHeadSection->addText("**$reviewerName:**", ['bold' => true]);
                    $htmlContent = $review->comment;
                    $plainText = Html2Text::convert($htmlContent, ['ignore_errors' => true]);
                    $sssHeadSection->addText($plainText);
                    $sssHeadSection->addTextBreak(1); // Add space between reviews
                }
            }

            // Add SER Head Reviews
            if (!$serHeadReviews->isEmpty()) {
                $serHeadSection = $phpWord->addSection();
                $serHeadSection->addText('Finalized Desk Head Reviews (SER)', ['bold' => true, 'size' => 16], ['alignment' => Jc::CENTER]);

                foreach ($serHeadReviews as $review) {
                    $reviewerName = $review->reviewer?->name ?? "Unknown Reviewer";
                    $serHeadSection->addText("**$reviewerName:**", ['bold' => true]);
                    $htmlContent = $review->comment;
                    $plainText = Html2Text::convert($htmlContent, ['ignore_errors' => true]);
                    $serHeadSection->addText($plainText);
                    $serHeadSection->addTextBreak(1); // Add space between reviews
                }
            }
        }

        // Save document
        $filename = 'desk_review_' . $applicationId . '.docx';
        $tempFile = tempnam(sys_get_temp_dir(), $filename);
        $phpWord->save($tempFile, 'Word2007');

        return response()->download($tempFile, $filename)->deleteFileAfterSend(true);
    }



    //end of deskreview

    //start specific for Deputy profile review
    public function profileview($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_action = "View";
        $module_name_singular = Str::singular($module_name);

        try {
            // Fetch the application with related data
            $application = Application::with(['institute', 'campus', 'program', 'statusHistory'])
                ->findOrFail($id);

            // Authorization check
            $application_check = Application::findOrFail($id);

            $gate_response = Gate::inspect('showUserSpecific', $application_check);
            if (!$gate_response->allowed()) {
                Auth::logout(); // Logout the user
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect('/login')->with('unauthorized', $gate_response->message());
            }

            // Fetch desks
            $desks = Desk::select('id', 'name')->get();

            // Get media files
            $delegation_letter = $application->getFirstMedia('delegation_letters');
            $application_form = $application->getFirstMedia('application_forms');

            return view("$module_path.$module_name.profile_review", compact(
                'module_name',
                'module_title',
                'module_icon',
                'module_action',
                'application',
                'desks',
                'module_name_singular',
                "{$module_name_singular}",
                'delegation_letter',
                'application_form'
            ));
        } catch (\Exception $e) {
            Log::error('Error in profileview method: ' . $e->getMessage());
            Alert::toast('An error occurred while fetching the application. Please try again.', 'error');
            return redirect()->back();
        }
    }


    public function profiledecision(Request $request, $id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        $module_title = $this->module_title;
        $module_name = $this->module_name;
        $module_path = $this->module_path;
        $module_icon = $this->module_icon;
        $module_model = $this->module_model;
        $module_action = "View";
        $module_name_singular = Str::singular($module_name);

        DB::beginTransaction();
        try {
            // Fetch the application
            $application = Application::findOrFail($id);
            $instituteName = $application->institute->name; // Access the institute name
            $programName = $application->program->name; // Access the program name
            // Authorization check
            $gate_response = Gate::inspect('updateProfileStatus', $application);
            if (!$gate_response->allowed()) {
                Alert::toast($gate_response->message(), 'warning')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->back();
            }

            // Validate the request
            $request->validate([
                'comments' => 'nullable|string',
                'action' => 'required|in:PROFILE_ACC,PROFILE_REV,PROFILE_REJ,DOCS_CEO,DOCS_DESK,DESK_CEO,DESK_DEP,TOA_R1_ACC,TOA_R2_DESK',
            ]);

            // Dynamically access the enum value
            $statusEnum = constant(ApplicationStatusEnum::class . '::' . $request->action);
            if ($request->action === 'DOCS_DESK') {
                if (is_null($application->desk_id)) {
                    Alert::toast('You must assign a  desk, handling unit first.', 'error')
                        ->position('top-end')
                        ->autoClose(5000)
                        ->timerProgressBar();
                    return redirect()->back();
                }

                $desk = $application->desk;
                if ($desk) {
                    $deskHead = $desk->deskHead;
                    if ($deskHead->status != 1) {
                        Alert::toast('Please assign an active desk head for this desk.', 'error')
                            ->position('top-end')
                            ->autoClose(5000)
                            ->timerProgressBar();
                        return redirect()->route('backend.desks.deskmanage');
                    }
                } else {
                    // No desk head assigned
                    Alert::toast('Please assign a desk head for this desk.', 'error')
                        ->position('top-end')
                        ->autoClose(5000)
                        ->timerProgressBar();
                    return redirect()->route('backend.desks.deskmanage');
                }
                if ($application->desk_decision === "Not Decided") {
                    $application->review_phase = 'desk_review';
                    $application->save();
                } elseif ($application->desk_decision === "desk_revision_requested") {
                    $application->review_phase = 'desk_review';
                    $application->save();
                } elseif ($application->desk_decision === "desk_reject") {
                    $application->review_phase = 'desk_reject';
                    $application->save();
                }
            }


            // Determine if the application is a revision
            $isRevision = ($application->status === "profile_revise" || $application->doc_version == 2);

            // Record status change
            $ceo = User::role('ceo');

            // if ($application->review_phase === 'toa_first_round' && $ceo && $application->status === 'desk_review_to_ceo') {
            //     $application->review_phase = 'toa_second_round';
            //     $application->save();
            // }
            if (!in_array($request->action, ['DOCS_DESK', 'DOCS_CEO'])) {
                ApplicationStatusHistory::recordStatusChange($application, $statusEnum);
            }


            //TOA_R1_ACC

            // Notify the user who created the application
            $applicant = User::find($application->created_by);
            if ($applicant) {
                $applicant->notify(new ProfileDecisionNotification(
                    $application,
                    $request->action,
                    $statusEnum->description()
                ));
            }

            // Notify CEO or Desk based on the action
            if ($request->action === 'DOCS_CEO') {

                $ceo = User::role('ceo')
                    ->where('status', 1) // Filter by status = 1
                    ->latest() // Order by the latest created_at
                    ->first(); // Fetch the first result
                if ($ceo) {
                    if ($application->review_phase == 'profile_stage' && $application->status == 'documents_submitted') {
                        $application->review_phase = 'desk_review';
                        $application->save();
                    }

                    $title = $isRevision
                        ? "Revised Application from {$instituteName} for {$programName} Forwarded to CEO"
                        : "Application from {$instituteName} for {$programName} Forwarded to CEO";

                    $message = $isRevision
                        ? "The revised application from **{$instituteName}** for the program **{$programName}** has been forwarded to you for your action."
                        : "The application from **{$instituteName}** for the program **{$programName}** has been forwarded to you for action.";

                    $ceo->notify(new GenericNotification(
                        $title,
                        $message,
                        'Applications',
                        'forwarded',
                        'fas fa-share',
                        route('backend.applications.profileview', $application->id)
                    ));
                    ApplicationStatusHistory::recordStatusChange($application, $statusEnum);
                }
            } elseif ($request->action === 'DOCS_DESK') {
                // Get the desk associated with the application
                $desk = $application->desk;



                if ($desk) {
                    // Get the desk head user from the desk
                    $deskHead = $desk->deskHead;
                    if ($deskHead) {

                        if ($application->review_phase === "toa_first_round") {
                            $statusEnum = constant(ApplicationStatusEnum::class . '::DOCS_TOA');
                            ApplicationStatusHistory::recordStatusChange($application, $statusEnum, "Application forwarded to desk for First round Team of Assessor Assessment");
                            $title = "Action Required: Forward Application from {$instituteName} for {$programName} for First Round ToA Review";
                            $message = "The application from **{$instituteName}** for the program **{$programName}** has been forwarded for the first round of review by the Team of Assessors (ToA).";
                        } elseif ($application->review_phase === "toa_second_round") {
                            ApplicationStatusHistory::recordStatusChange($application, $statusEnum, "Application forwarded to desk for Second round Team of Assessor Assessment");
                            $title = "Action Required: Forward Application from {$instituteName} for {$programName} for Second Round ToA Review";
                            $message = "The application from **{$instituteName}** for the program **{$programName}** has progressed to the second round of assessment by the Team of Assessors (ToA).";
                        } elseif ($application->review_phase === "toa_first_round_approved_by_desk") {
                            ApplicationStatusHistory::recordStatusChange($application, $statusEnum, "Application Under Second");
                            $title = "Action Required: Desk Approved TOA First Round for {$instituteName} - {$programName}";
                            $message = "The application from **{$instituteName}** for the program **{$programName}** has been reviewed and approved at the desk level.";
                        } else {

                            if ($application->review_phase === "desk_review" && $application->doc_version == 2) {

                                ApplicationStatusHistory::recordStatusChange($application, $statusEnum);
                                $title = "Action Required: Revised Application from {$instituteName} for {$programName} Forwarded to Your Desk";
                                $message = "Revised Application from {$instituteName} for the program {$programName} has been assigned to your desk for review.";
                            } else {

                                ApplicationStatusHistory::recordStatusChange($application, $statusEnum);
                                $title = "Action Required: Application from {$instituteName} for {$programName} Forwarded to Your Desk";
                                $message = "Application from **{$instituteName}** for the program **{$programName}** has been assigned to your desk for review.";
                            }
                        }


                        $deskHead->notify(new GenericNotification(
                            $title,
                            $message,
                            'Applications',
                            'forwarded',
                            'fas fa-share',
                            route('backend.applications.profileview', $application->id)
                        ));
                    } else {
                        Log::warning("Desk head not found for desk ID: {$desk->id}");
                        return redirect()->back();
                    }
                    $application = Application::findOrFail($id);

                    // Fetch all reviewers who reviewed the current application with status 'Completed'
                    $completedReviewers = DeskReviewAssignment::where('application_id', $application->id)
                        ->where('status', 'Completed')
                        ->where('review_phase', $application->review_phase)
                        ->get();

                    // Notify each reviewer and update their status to 'Revision'
                    foreach ($completedReviewers as $reviewerAssignment) {

                        $reviewer = $reviewerAssignment->assessor;


                        if ($reviewer) {
                            // Custom message for reviewers
                            $reviewerTitle = "Application Revision Submitted for {$instituteName} - {$programName}";
                            $reviewerMessage = "The application from **{$instituteName}** for the program **{$programName}** that you previously reviewed has been revised. You are requested to make a final decision on the revised application.";
                            // Notify the reviewer
                            $reviewer->notify(new GenericNotification(
                                $reviewerTitle,
                                $reviewerMessage,
                                'Applications',
                                'revision',
                                'fas fa-undo',
                                route('backend.applications.profileview', $application->id)
                            ));

                            // Update the reviewer's status to 'Revision'
                            if ($isRevision) {
                                $reviewerAssignment->status = 'Revision';
                                $reviewerAssignment->save();
                            }
                        } else {
                            log::warning("Reviewer not found for assignment ID: {$reviewerAssignment->id}");
                            // Alert::toast('An error occurred while updating the application status. Please try again.', 'error');

                        }
                    }
                } else {
                    Log::warning("Desk not found for application ID: {$application->id}");
                }
            } else {
            }

            // Commit the transaction
            DB::commit();

            // Show success toast
            $toastMessage = $isRevision ? "Application status updated to $request->action successfully." : "Application status updated to $request->action successfully.";
            Alert::toast($toastMessage, 'success')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();

            // Redirect and pass the application ID
            return redirect()->route("backend.$module_name.profileview", ['id' => $id])
                ->with('success', $isRevision ? "Revised Application $request->action successfully." : "Application $request->action successfully.");
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error in profiledecision method: ' . $e->getMessage());
            Alert::toast('An error occurred while updating the application status. Please try again.', 'error');
            return redirect()->back();
        }
    }

    public function updateConflictOfInterest(Request $request, $application_id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        $request->validate([
            'status' => 'required|in:yes,no',
        ]);

        DB::beginTransaction();
        try {
            $assignment = DeskReviewAssignment::where('application_id', $application_id)
                ->where('assessor_id', auth()->id())
                ->firstOrFail();

            // Check if the assignment is canceled (deleted_at is not NULL)
            if (!is_null($assignment->deleted_at)) {
                Alert::toast('You are no longer able to perform this evaluation because it has been canceled.', 'error');
                return redirect()->route('backend.deskreviews.index');
            }

            // Check if the conflict of interest is already declared
            if ($assignment->conflict_of_interest === 'YES') {
                Alert::toast('You have already agreed to review this application.', 'info');
                return redirect()->route('backend.deskreviews.index');
            }

            if ($assignment->conflict_of_interest === 'NO') {
                Alert::toast('You have already declared a conflict of interest for this application.', 'info');
                return redirect()->route('backend.deskreviews.index');
            }

            // Update the conflict of interest status
            $assignment->update([
                'conflict_of_interest' => $request->status === 'yes' ? 'YES' : 'NO',
            ]);

            DB::commit();

            Alert::toast('Conflict of interest status updated successfully.', 'success');
            return redirect()->route('backend.deskreviews.index');
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error in updateConflictOfInterest method: ' . $e->getMessage());
            Alert::toast('An error occurred while updating the conflict of interest status. Please try again.', 'error');
            return redirect()->back();
        }
    }

    public function showConflictOfInterestPage($application_id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $application_id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        try {
            // Validate the input to ensure it's a valid integer
            if (!is_numeric($application_id) || $application_id <= 0) {
                Alert::toast('Invalid application ID.', 'error')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->route('backend.deskreviews.index');
            }

            // Retrieve the assignment with proper authorization check
            $assignment = DeskReviewAssignment::where('application_id', $application_id)
                ->where('assessor_id', auth()->id())
                ->firstOrFail();

            // Check if the assignment is canceled (deleted_at is not NULL)
            if (!is_null($assignment->deleted_at)) {
                Alert::toast('You are no longer able to perform this evaluation because it has been canceled.', 'error')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->route('backend.deskreviews.index');
            }

            // Check if the conflict of interest is already declared
            if ($assignment->conflict_of_interest === 'YES') {
                Alert::toast('You have already agreed to review this application.', 'info')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->route('backend.deskreviews.index');
            }

            if ($assignment->conflict_of_interest === 'NO') {
                Alert::toast('You have already declared a conflict of interest for this application.', 'info')
                    ->position('top-end')
                    ->autoClose(5000)
                    ->timerProgressBar();
                return redirect()->route('backend.deskreviews.index');
            }

            // Only proceed if deleted_at is NULL and conflict_of_interest is NULL
            $application = Application::findOrFail($application_id);
            $module_name = 'applications';
            $module_title = 'Conflict of Interest';
            $module_icon = 'fa-regular fa-sun';

            return view("application::backend.applications.conflict_of_interest", compact('application', 'module_name', 'module_icon', 'module_title'));
        } catch (\Exception $e) {
            // Log the error for debugging
            log::error('Error in showConflictOfInterestPage: ' . $e->getMessage());

            Alert::toast('An error occurred while loading the conflict of interest page. Please try again.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->route('backend.deskreviews.index');
        }
    }

    public function reviewersProgress($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
        try {
            $module_title = $this->module_title;
            $module_name = $this->module_name;
            $module_path = $this->module_path;
            $module_icon = $this->module_icon;
            $module_model = $this->module_model;
            $module_name_singular = Str::singular($module_name);

            $application = Application::findOrFail($id);
            $review_phase = $application->review_phase;

            // Get all reviewers assigned to this application
            $reviewers = DeskReviewAssignment::where('application_id', $id)
                ->with(['assessor', 'desk'])
                ->get();

            // Get progress for each reviewer
            $reviewersProgress = [];
            foreach ($reviewers as $reviewer) {
                $total_indicators = 0;
                $reviewed_indicators = 0;

                // Get the DCT for this application's program
                $dct = DCT::where('program_id', $application->program_id)->first();

                if ($dct) {
                    $standards = Standard::where('dct_id', $dct->id)->get();

                    foreach ($standards as $standard) {
                        $total_indicators += $standard->totalIndicators();
                        // Use the new method that accepts review phase
                        $reviewed_indicators += $standard->countReviewedIndicatorsByPhase(
                            $id,
                            $reviewer->assessor_id,
                            $reviewer->review_phase // Use the phase from the assignment
                        );
                    }
                }

                $progress = $total_indicators > 0 ? round(($reviewed_indicators / $total_indicators) * 100) : 0;

                $reviewersProgress[] = [
                    'reviewer' => $reviewer->assessor,
                    'assessor_type' => $reviewer->assessor_type,
                    'review_phase' => $reviewer->review_phase,
                    'progress' => $progress,
                    'total_indicators' => $total_indicators,
                    'reviewed_indicators' => $reviewed_indicators,
                    'status' => $reviewer->status,
                    'assigned_date' => $reviewer->created_at,
                    'completed_date' => $reviewer->status == 'Completed' ? $reviewer->updated_at : null,
                    'is_chair' => $reviewer->chair_id == $reviewer->assessor_id,
                ];
            }

            // Rest of your controller remains the same
            $groupedProgress = collect($reviewersProgress)->groupBy('review_phase');

            return view("$module_path.$module_name.reviewers_progress", compact(
                'module_title',
                'module_name',
                'module_icon',
                'module_name_singular',
                'application',
                'groupedProgress',
                'review_phase'
            ));
        } catch (\Exception $e) {
            Log::error('Error in reviewersProgress: ' . $e->getMessage());
            Alert::toast('An error occurred while fetching reviewer progress.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }
    }

    //exit report related
    public function uploadExitReport(Request $request, $id)
    {
        try {
            $validated = $request->validate([
                'exit_report_file' => 'required|mimes:pdf|max:8192',
            ]);

            $application = Application::findOrFail($id);

            // Check application eligibility
            if ($application->doc_version > 4 && $application->status !== 'toa_second_round') {
                return response()->json([
                    'success' => false,
                    'message' => 'Reupload not allowed for this application.'
                ], 403);
            }

            DB::transaction(function () use ($application, $request) {
                $application->clearMediaCollection('exit_report');

                $application->addMedia($request->file('exit_report_file'))
                    ->toMediaCollection('exit_report', 'private');
            });

            return response()->json([
                'success' => true,
                'message' => 'Exit Report uploaded successfully!',
                'redirect' => route('backend.applications.beginresponse', ['id' => $id])
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e instanceof \Illuminate\Validation\ValidationException
                    ? $e->errors()
                    : 'An error occurred. Please try again.'
            ], $e instanceof \Illuminate\Validation\ValidationException ? 422 : 500);
        }
    }

    public function viewExitReport($id)
    {
        // Step 1: Validate the ID
        $validator = Validator::make(['application_id' => $id], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        $application = Application::findOrFail($id);

        $media = $application->getFirstMedia('exit_report');
        if ($media) {
            $filePath = storage_path('app/private/' . $media->id . '/' . $media->file_name);
            if (file_exists($filePath)) {
                // Force open in browser
                return response()->file($filePath, [
                    'Content-Type' => 'application/pdf',
                    'Content-Disposition' => 'inline; filename="' . $media->file_name . '"'
                ]);
            }
        }

        Alert::toast('Exit Report file not found.', 'error')
            ->position('top-end')
            ->autoClose(5000)
            ->timerProgressBar();
        return redirect()->back();
    }

    public function viewCertificate($applicationId)
    {

        // Role check
        if (!auth()->user()->hasAnyRole(['user', 'deputy director', 'accreditation expert', 'ceo', 'council member', 'director general'])) {
            Alert::toast('You are not allowed to view this certificate!', 'error')
                ->position('top-end')
                ->autoClose(5000);
            return redirect()->back();
        }
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID', 'error')
                ->position('top-end')
                ->autoClose(5000);
            return redirect()->back();
        }


        $application = Application::findOrFail($applicationId);

        if ($application->doc_version < 6) {
            Alert::toast('Certificate is not available for this application version.', 'error')
                ->position('top-end')
                ->autoClose(5000);
            return redirect()->back();
        }

        $certificate = Certificate::where('application_id', $applicationId)->firstOrFail();
        $media = $certificate->getFirstMedia('certificate_pdf');

        if ($media) {
            $filePath = storage_path('app/private/' . $media->id . '/' . $media->file_name);

            if (file_exists($filePath)) {
                return response()->file($filePath, [
                    'Content-Type' => 'application/pdf',
                    'Content-Disposition' => 'inline; filename="' . $media->file_name . '"'
                ]);
            }
        }

        // If missing, regenerate and store
        $pdfBinary = $this->pdfPrintCertificate($applicationId, true);

        // Temp private file
        $tempFile = storage_path('app/private/temp_certificate_' . $certificate->id . '.pdf');
        file_put_contents($tempFile, $pdfBinary);

        // Save to private media collection
        $certificate
            ->addMedia($tempFile)
            ->usingFileName('certificate_' . $certificate->id . '.pdf')
            ->toMediaCollection('certificate_pdf', 'private');

        // Delete temp
        if (file_exists($tempFile)) {
            unlink($tempFile);
        }

        // Get fresh media
        $media = $certificate->getFirstMedia('certificate_pdf');
        $filePath = storage_path('app/private/' . $media->id . '/' . $media->file_name);

        return response()->file($filePath, [
            'Content-Type' => 'application/pdf',
            'Content-Disposition' => 'inline; filename="' . $media->file_name . '"'
        ]);
    }

    public function downloadCombinedAssessmentReport($applicationId)
    {
        // Validate application ID
        $validator = Validator::make(['application_id' => $applicationId], [
            'application_id' => 'required|integer|exists:applications,id',
        ]);

        if ($validator->fails()) {
            Alert::toast('Invalid application ID.', 'error')
                ->position('top-end')
                ->autoClose(5000)
                ->timerProgressBar();
            return redirect()->back();
        }

        // Get weights from settings
        $documentReviewWeight = Mainsetting::get('percentage_of_toa_document_review') ?? 50;
        $siteVisitWeight = Mainsetting::get('percentage_of_site_visit_review') ?? 50;

        // Load application data
        $application = Application::with(['program'])->findOrFail($applicationId);

        // Prepare logo
        $logoPath = public_path('img/logo-square.png');
        $logoBase64 = base64_encode(file_get_contents($logoPath));
        $logoSrc = 'data:image/png;base64,' . $logoBase64;

        // CSS styles
        $html = '<style>
        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        th, td { border: 1px solid #000; padding: 8px; text-align: left; }
        th { background-color: #CCCCCC; font-weight: bold; }
        .page-break { page-break-after: always; }
        .center { text-align: center; }
        .bold { font-weight: bold; }
        .formula { font-style: italic; color: #555; margin: 5px 0; }
        .highlight { background-color: #FFF2CC; }
        .deviation-high { color: #FF0000; font-weight: bold; }
        .header-logo { text-align: center; margin-bottom: 20px; }
        .header-logo img { height: 150px; }
        .watermark {
            position: fixed;
            opacity: 0.1;
            font-size: 40px;
            width: 100%;
            text-align: center;
            z-index: -1000;
            transform: rotate(-45deg);
            transform-origin: 50% 50%;
            top: 50%;
            left: 0;
            color: #000000;
            font-weight: bold;
        }
        .reviewer-comment { margin: 5px 0; padding-left: 10px; border-left: 3px solid #ddd; }
        .weight-cell { background-color: #E6E6E6; }
    </style>';

        // Cover Page
        $html .= '<div class="header-logo"><img src="' . $logoSrc . '" alt="ETA Logo"></div>';
        $html .= '<h1 class="center">Education and Training Authority</h1>';
        $html .= '<h2 class="center">Combined Assessment Report for ' . $application->program->name . '</h2>';
        // Add this right after your cover page heading (before the page-break)

        // Determine decision and styling
        $decision = $application->desk_decision ?? null;
        $decisionText = '';
        $decisionColor = '';
        $icon = '';

        switch ($decision) {
            case 'fully_accredited':
                $decisionText = 'Council Decision: Full Accreditation';
                $decisionColor = '#28a745'; // Green
                break;
            case 'provitionally_accredited':
                $decisionText = 'Council Decision: Provisional Accreditation';
                $decisionColor = '#ffc107'; // Yellow
                break;
            case 'rejected':
                $decisionText = 'Council Decision: Rejected';
                $decisionColor = '#dc3545'; // Red
                break;
            default:
                $decisionText = 'Council Decision: Pending';
                $decisionColor = '#6c757d'; // Gray
                $icon = '...';
        }

        // Add the decision display
        $html .= '<div style="margin: 20px 0; text-align: center;">';
        $html .= '<div style="display: inline-block; padding: 15px 30px; border-radius: 8px; background-color: ' . $decisionColor . '; color: white; font-size: 24px; font-weight: bold; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">';
        $html .= $decisionText;
        $html .= '</div>';
        $html .= '</div>';

        // Then continue with your existing page-break
        $html .= '<div class="page-break"></div>';
        // Process both rounds
        $rounds = [
            'first' => [
                'title' => 'First Round (Document Review)',
                'phase' => 'toa_first_round',
                'weight' => $documentReviewWeight
            ],
            'second' => [
                'title' => 'Second Round (Site Visit)',
                'phase' => 'toa_second_round',
                'weight' => $siteVisitWeight
            ]
        ];

        $allRoundData = [];
        $combinedStandardsData = [];

        foreach ($rounds as $roundKey => $roundConfig) {
            // Fetch reviews for this round before nekemte
            // $toaReviews = DeskReview::where('application_id', $applicationId)
            //     ->where('indicator_id', '!=', 0)
            //     ->where('review_phase', $roundConfig['phase'])
            //     ->with(['indicator.substandard', 'reviewer', 'standard'])
            //     ->get();


            $toaReviews = DeskReview::where('application_id', $applicationId)
                ->where('indicator_id', '!=', 0)
                ->where('review_phase', $roundConfig['phase'])
                ->whereHas('deskReviewAssignmentByRound', function ($query) {
                    $query->where('status', 'Completed');
                })
                ->with(['indicator.substandard', 'reviewer', 'standard'])
                ->get();

            if ($toaReviews->isEmpty()) {
                $html .= '<h3 class="center">No ' . $roundConfig['title'] . ' reviews found</h3>';
                $html .= '<div class="page-break"></div>';
                continue;
            }

            // Round header
            $html .= '<h3 class="center">' . $roundConfig['title'] . '</h3>';
            $html .= '<p class="center bold">Weight: ' . $roundConfig['weight'] . '%</p>';

            // Group by standard first
            $groupedByStandard = $toaReviews->sortBy('standard_id')->groupBy('standard_id');
            $roundSummaryData = [];

            foreach ($groupedByStandard as $standardId => $standardReviews) {
                $standard = $standardReviews->first()->standard;
                $standardName = $standard?->name ?? "Unknown Standard";
                $standardWeight = $standard?->weights ?? 1;

                $html .= '<h4>' . $standardName . '</h4>';
                $html .= '<table>
                <thead>
                    <tr>
                        <th>Substandard</th>
                        <th>Indicator</th>
                        <th>Avg Rating</th>
                        <th>Key Findings</th>
                    </tr>
                </thead>
                <tbody>';

                // Group by substandard
                $groupedBySubstandard = $standardReviews->sortBy('indicator.substandard_id')->groupBy('indicator.substandard_id');

                foreach ($groupedBySubstandard as $substandardId => $substandardReviews) {
                    $substandardName = $substandardReviews->first()->indicator->substandard?->name ?? "No Substandard";
                    $html .= '<tr class="bold">
                    <td colspan="4">' . $substandardName . '</td>
                </tr>';

                    // Group by indicator
                    $groupedByIndicator = $substandardReviews->sortBy('indicator_id')->groupBy('indicator_id');

                    foreach ($groupedByIndicator as $indicatorId => $indicatorReviews) {
                        $indicatorName = $indicatorReviews->first()->indicator?->name ?? "Unknown Indicator";

                        // Calculate average rating
                        $avgRating = $indicatorReviews->avg('rating_value');

                        // Compile all reviewer comments
                        $comments = '';
                        $reviewerCount = 1;
                        foreach ($indicatorReviews as $review) {
                            if (!empty($review->comment)) {
                                $comments .= '<div class="reviewer-comment"><strong>Assessor #' . $reviewerCount . ':</strong> ' . $review->comment . '</div>';
                                $reviewerCount++;
                            }
                        }
                        if (empty($comments)) {
                            $comments = 'No comments provided';
                        }

                        $html .= '<tr>
                        <td></td>
                        <td>' . $indicatorName . '</td>
                        <td>' . round($avgRating, 2) . '</td>
                        <td>' . $comments . '</td>
                    </tr>';
                    }
                }

                // Calculate standard summary
                $assessmentValue = $standardReviews->sum('rating_value');
                $totalIndicators = $standardReviews->count();
                $maxPossibleValue = $totalIndicators * 5;
                $aggregatedValue = $maxPossibleValue > 0 ? ($assessmentValue / $maxPossibleValue) * $standardWeight : 0;
                $percentageAchieved = $standardWeight > 0 ? ($aggregatedValue / $standardWeight) * 100 : 0;

                $html .= '<tr class="bold">
                <td colspan="4">
                    <div class="formula">Standard Calculation:</div>
                    Total Rating: ' . $assessmentValue . ' / ' . $maxPossibleValue . '<br>
                    Weighted Value: (' . $assessmentValue . ' ÷ ' . $maxPossibleValue . ') × ' . $standardWeight . ' = ' . round($aggregatedValue, 2) . '<br>
                    Percentage Achieved: ' . round($percentageAchieved, 2) . '%
                </td>
            </tr>';

                $html .= '</tbody></table>';

                // Store for combined summary
                if (!isset($combinedStandardsData[$standardId])) {
                    $combinedStandardsData[$standardId] = [
                        'name' => $standardName,
                        'weight' => $standardWeight,
                        'first_round' => null,
                        'second_round' => null
                    ];
                }

                $roundKeyMap = [
                    'first' => 'first_round',
                    'second' => 'second_round'
                ];
                $combinedStandardsData[$standardId][$roundKeyMap[$roundKey]] = [
                    'assessmentValue' => $assessmentValue,
                    'maxPossibleValue' => $maxPossibleValue,
                    'aggregatedValue' => $aggregatedValue,
                    'percentageAchieved' => $percentageAchieved
                ];
            }

            $html .= '<div class="page-break"></div>';
        }

        // Final Combined Summary Section - Key Parameters Overview
        $html .= '<h3 class="center">Key Parameters Overview Summary Table</h3>';
        $html .= '<table>
        <thead>
            <tr>
                <th>Standard</th>
                <th>Doc Review %</th>
                <th>Site Visit %</th>
                <th>Weighted %</th>
                <th>Weighted Score</th>
            </tr>
        </thead>
        <tbody>';

        $totalDocReviewPercentage = 0;
        $totalSiteVisitPercentage = 0;
        $totalWeightedPercentage = 0;
        $totalWeightedScore = 0;
        $standardCount = 0;

        foreach ($combinedStandardsData as $standardId => $standardData) {
            $docReview = $standardData['first_round'] ?? null;
            $siteVisit = $standardData['second_round'] ?? null;

            // Calculate components
            $docReviewPercentage = $docReview ? $docReview['percentageAchieved'] : 0;
            $siteVisitPercentage = $siteVisit ? $siteVisit['percentageAchieved'] : 0;

            $weightedScore = ($docReview ? ($docReview['aggregatedValue'] * $documentReviewWeight / 100) : 0) +
                ($siteVisit ? ($siteVisit['aggregatedValue'] * $siteVisitWeight / 100) : 0);

            $weightedPercentage = $standardData['weight'] > 0 ? ($weightedScore / $standardData['weight']) * 100 : 0;

            $html .= '<tr>
            <td>' . $standardData['name'] . '</td>
            <td>' . round($docReviewPercentage, 2) . '%</td>
            <td>' . round($siteVisitPercentage, 2) . '%</td>
            <td>' . round($weightedPercentage, 2) . '%</td>
            <td>' . round($weightedScore, 2) . '</td>
        </tr>';

            $totalDocReviewPercentage += $docReviewPercentage;
            $totalSiteVisitPercentage += $siteVisitPercentage;
            $totalWeightedPercentage += $weightedPercentage;
            $totalWeightedScore += $weightedScore;
            $standardCount++;
        }

        // Calculate averages
        $avgDocReviewPercentage = $standardCount > 0 ? $totalDocReviewPercentage / $standardCount : 0;
        $avgSiteVisitPercentage = $standardCount > 0 ? $totalSiteVisitPercentage / $standardCount : 0;
        $avgWeightedPercentage = $standardCount > 0 ? $totalWeightedPercentage / $standardCount : 0;

        // Final totals row
        $html .= '<tr class="bold">
        <td>Average</td>
        <td>' . round($avgDocReviewPercentage, 2) . '%</td>
        <td>' . round($avgSiteVisitPercentage, 2) . '%</td>
        <td>' . round($avgWeightedPercentage, 2) . '%</td>
        <td>' . round($totalWeightedScore, 2) . '</td>
    </tr>';

        $html .= '</tbody></table>';
        $html .= '<div class="page-break"></div>';

        // Big Final Result Display
        $html .= '<div style="margin-top: 40px; font-size: 24px; text-align: center; border: 2px solid #000; padding: 20px; background-color: #f8f9fa;">';
        $html .= '<p><strong>FINAL ACCREDITATION REVIEW RESULTS</strong></p>';
        $html .= '<p style="font-size: 20px;">Document Review Average: <strong>' . round($avgDocReviewPercentage, 2) . '%</strong> (Weight: ' . $documentReviewWeight . '%)</p>';
        $html .= '<p style="font-size: 20px;">Site Visit Average: <strong>' . round($avgSiteVisitPercentage, 2) . '%</strong> (Weight: ' . $siteVisitWeight . '%)</p>';
        $html .= '<p style="font-size: 24px; color: #2c3e50;">Final Weighted Result: <strong>' . round($avgWeightedPercentage, 2) . '%</strong></p>';
        $html .= '<p style="font-size: 18px; margin-top: 10px;">Based on evaluation of ' . $standardCount . ' standards</p>';
        $html .= '</div>';

        // Generate PDF
        $options = new Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true);

        $dompdf = new Dompdf($options);
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'landscape');
        $dompdf->render();

        $filename = 'combined_assessment_report_' . $applicationId . '.pdf';
        return $dompdf->stream($filename);
    }
    
 
public function downloadDctStructureInPdf(Request $request)
{
    $dctId = $request->input('id');

    // Validate the DCT ID
    $validator = Validator::make(['dct_id' => $dctId], [
        'dct_id' => 'required|integer|exists:dcts,id',
    ]);

    if ($validator->fails()) {
        Alert::toast('Invalid DCT ID.', 'error')
            ->position('top-end')
            ->autoClose(5000)
            ->timerProgressBar();
        return redirect()->back();
    }

    // Fetch the DCT with its relationships
    $dct = \Modules\DCT\Models\DCT::with([
        'standards.substandards.indicators.questions',
        'standards.substandards.indicators.attachments'
    ])->findOrFail($dctId);

    // Prepare logo
    $logoPath = public_path('img/logo-square.png');
    $logoBase64 = base64_encode(file_get_contents($logoPath));
    $logoSrc = 'data:image/png;base64,' . $logoBase64;

    // Start PDF HTML
    $html = '<style>
        body { font-family: Arial, sans-serif; }
        h1 { text-align: center; font-size: 24px; margin-bottom: 20px; }
        h2 { font-size: 20px; margin-top: 25px; margin-bottom: 15px; background-color: #f0f0f0; padding: 8px; }
        h3 { font-size: 18px; margin-top: 20px; margin-bottom: 10px; padding: 6px; padding-left: 15px; background-color: #f8f8f8; }
        h4 { font-size: 16px; margin-top: 15px; margin-bottom: 8px; }
        ul { margin-top: 5px; margin-bottom: 15px; }
        li { margin-bottom: 5px; }
        .page-break { page-break-after: always; }
        .header-logo { text-align: center; margin-bottom: 20px; }
        .header-logo img { height: 100px; }
        .watermark {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(-30deg);
            opacity: 0.1;
            z-index: -1;
            text-align: center;
        }
        .watermark img { height: 250px; }
        .attachment-list { margin-left: 30px; }
    </style>';

    // Cover page
    $html .= '<div class="header-logo"><img src="' . $logoSrc . '" alt="ETA Logo"></div>';
    $html .= '<h1 style="text-align: center;">Education and Training Authority</h1>';
    $html .= '<h2 style="text-align: center;">Data Collection Tool Structure</h2>';
    $html .= '<h3 style="text-align: center;">' . e($dct->name) . '</h3>';
    $html .= '<div class="watermark"><img src="' . $logoSrc . '" alt="ETA Watermark"></div>';
    $html .= '<div class="page-break"></div>';

    // DCT Content
    foreach ($dct->standards->sortBy('id') as $standard) {
        $html .= '<h1>Standard: ' . e($standard->name) . '</h1>';

        if (!empty($standard->description)) {
            $html .= '<p><strong>Description:</strong> ' . e($standard->description) . '</p>';
        }

        foreach ($standard->substandards->sortBy('id') as $substandard) {
            $html .= '<h2>Substandard: ' . e($substandard->name) . '</h2>';

            if (!empty($substandard->description)) {
                $html .= '<p><strong>Description:</strong> ' . e($substandard->description) . '</p>';
            }

            foreach ($substandard->indicators->sortBy('id') as $indicator) {
                $html .= '<h3>Indicator: ' . e($indicator->name) . '</h3>';

                if (!empty($indicator->description)) {
                    $html .= '<p><strong>Description:</strong> ' . e($indicator->description) . '</p>';
                }

                // Questions
                if ($indicator->questions->count() > 0) {
                    $html .= '<h4>Narrative Questions:</h4><ol>';
                    foreach ($indicator->questions as $question) {
                        $html .= '<li>' . e($question->question_text) . '</li>';
                    }
                    $html .= '</ol>';
                }

                // Attachments
                if ($indicator->attachments->count() > 0) {
                    $html .= '<h4>Supportive Materials:</h4><ul class="attachment-list">';
                    foreach ($indicator->attachments as $attachment) {
                        $html .= '<li>' . e($attachment->name) . ' (' . e($attachment->is_required) . ')</li>';
                    }
                    $html .= '</ul>';
                }
            }
        }

        $html .= '<div class="page-break"></div>';
    }

    // Generate PDF
    $options = new Options();
    $options->set('isHtml5ParserEnabled', true);
    $options->set('isRemoteEnabled', true);

    $dompdf = new Dompdf($options);
    $dompdf->loadHtml($html);
    $dompdf->setPaper('A4', 'portrait');
    $dompdf->render();

    // Filename
    $dctName = Str::slug($dct->name);
    $filename = 'dct_structure_' . $dctName . '.pdf';

    // Output PDF as string
    $output = $dompdf->output();

    // Return as Laravel response (download)
    return response($output, 200)
        ->header('Content-Type', 'application/pdf')
        ->header('Content-Disposition', 'attachment; filename="' . $filename . '"');
}

}


