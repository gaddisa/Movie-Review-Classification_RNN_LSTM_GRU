<?php
namespace App\Livewire\Institutions;

use LivewireUI\Modal\ModalComponent;
use App\Models\Institute;
use App\Models\Campus;
use Illuminate\Support\Facades\Auth;

class CampusModal extends ModalComponent
{
    public $campusId;
    public $isEdit = false;
    public $instituteId;

    // Form fields
    public $name;
    public $status = 'Active';

    protected function rules()
    {
        return [
            'instituteId' => 'required|exists:institutes,id',
            'name' => 'required|string|max:255',
            'status' => 'required|in:Active,Inactive',
        ];
    }

    public function mount($instituteId = null, $campusId = null)
    {
        $this->instituteId = $instituteId;

        if ($campusId) {
            $this->isEdit = true;
            $this->loadCampus($campusId);
        }
    }

    public function loadCampus($campusId)
    {
        try {
            $campus = Campus::findOrFail($campusId);
            $this->campusId = $campusId;
            $this->name = $campus->name;
            $this->status = $campus->status;
            $this->instituteId = $campus->institute_id;
        } catch (\Exception $e) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Failed to load campus data',
                'position' => 'top-end',
                'duration' => 5000
            ]);
            $this->closeModal();
        }
    }

    public function saveCampus()
    {
        $this->validate();

        try {
            $data = [
                'name' => $this->name,
                'institute_id' => $this->instituteId,
                'status' => $this->status,
                'created_by' => Auth::id(),
            ];

            if ($this->isEdit) {
                $campus = Campus::findOrFail($this->campusId);
                $campus->update($data);
                $message = 'Campus updated successfully!';
            } else {
                Campus::create($data);
                $message = 'Campus created successfully!';
            }

            $this->dispatch('refreshInstitutes');
            $this->closeModal();
            
            $this->dispatch('showToast', [
                'type' => 'success',
                'message' => $message,
                'position' => 'top-end',
                'duration' => 5000
            ]);
        } catch (\Exception $e) {
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Failed to save campus: ' . $e->getMessage(),
                'position' => 'top-end',
                'duration' => 5000
            ]);
        }
    }

    public function getInstitutesProperty()
    {
        return Institute::active()->orderBy('name')->get(['id', 'name']);
    }

    public function render()
    {
        return view('livewire.institutions.campus-modal');
    }

    public static function modalMaxWidth(): string
    {
        return '2xl';
    }
}
